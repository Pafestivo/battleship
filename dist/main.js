(()=>{"use strict";var n={806:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,'@media only screen and (max-width: 1000px) {\n  #page-title {\n    margin-top: 30px;\n    font-size: 75px;\n  }\n\n  #game-container {\n    flex-direction: column;\n    margin-top: 10px;\n  }\n  \n  .player h1 {\n    font-size: 30px\n  }\n\n  .player h2 {\n    font-size: 20px;\n  }\n\n  .rotate {\n    font-size: 15px;\n    padding: 3px 15px;\n  }\n\n  #length-indicator {\n    font-size: 20px;\n  }\n\n  .board {\n    margin: 0 auto;\n    width: 350px;\n    height: 350px;\n  }\n\n  .mobile-hidden {\n    display: none;\n  }\n\n  .ship-hit::after {\n    position: absolute;\n    content: "\\274c";\n    font-size: 27px; \n    color: #FFF;\n  }\n\n  .winner-overlay h1 {\n    font-size: 40px\n  }\n}',"",{version:3,sources:["webpack://./src/styles/media-queries.css"],names:[],mappings:"AAAA;EACE;IACE,gBAAgB;IAChB,eAAe;EACjB;;EAEA;IACE,sBAAsB;IACtB,gBAAgB;EAClB;;EAEA;IACE;EACF;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,eAAe;IACf,iBAAiB;EACnB;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,cAAc;IACd,YAAY;IACZ,aAAa;EACf;;EAEA;IACE,aAAa;EACf;;EAEA;IACE,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,WAAW;EACb;;EAEA;IACE;EACF;AACF",sourcesContent:['@media only screen and (max-width: 1000px) {\n  #page-title {\n    margin-top: 30px;\n    font-size: 75px;\n  }\n\n  #game-container {\n    flex-direction: column;\n    margin-top: 10px;\n  }\n  \n  .player h1 {\n    font-size: 30px\n  }\n\n  .player h2 {\n    font-size: 20px;\n  }\n\n  .rotate {\n    font-size: 15px;\n    padding: 3px 15px;\n  }\n\n  #length-indicator {\n    font-size: 20px;\n  }\n\n  .board {\n    margin: 0 auto;\n    width: 350px;\n    height: 350px;\n  }\n\n  .mobile-hidden {\n    display: none;\n  }\n\n  .ship-hit::after {\n    position: absolute;\n    content: "\\274c";\n    font-size: 27px; \n    color: #FFF;\n  }\n\n  .winner-overlay h1 {\n    font-size: 40px\n  }\n}'],sourceRoot:""}]);const s=i},884:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,".player h1 {\n  text-align: center;\n  font-size: 40px;\n  margin-bottom: 10px;\n}\n\n.direction {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n}\n\n.player h2 {\n  font-size: 30px;\n}\n\n.rotate {\n  background-color: white;\n  color: black;\n  margin: 0 0 10px 10px;\n  width: max-content;\n  text-align: center;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 5px 15px;\n  cursor: pointer;\n}\n\n.rotate:hover {\n  background-color: rgb(199, 199, 199);\n}\n\n#length-indicator {\n  text-align: center;\n  font-size: 25px;\n}\n\n.pre-game {\n  cursor: pointer;\n}\n\n.hidden {\n  display: none !important\n}","",{version:3,sources:["webpack://./src/styles/prepare-game.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,YAAY;EACZ,qBAAqB;EACrB,kBAAkB;EAClB,kBAAkB;EAClB,kBAAkB;EAClB,eAAe;EACf,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE;AACF",sourcesContent:[".player h1 {\n  text-align: center;\n  font-size: 40px;\n  margin-bottom: 10px;\n}\n\n.direction {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n}\n\n.player h2 {\n  font-size: 30px;\n}\n\n.rotate {\n  background-color: white;\n  color: black;\n  margin: 0 0 10px 10px;\n  width: max-content;\n  text-align: center;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 5px 15px;\n  cursor: pointer;\n}\n\n.rotate:hover {\n  background-color: rgb(199, 199, 199);\n}\n\n#length-indicator {\n  text-align: center;\n  font-size: 25px;\n}\n\n.pre-game {\n  cursor: pointer;\n}\n\n.hidden {\n  display: none !important\n}"],sourceRoot:""}]);const s=i},772:(n,e,t)=>{t.d(e,{Z:()=>p});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),s=t(667),c=t.n(s),d=new URL(t(265),t.b),l=i()(r()),A=c()(d);l.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url("+A+');\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#restart {\n  display: block;\n  margin: 0 auto;\n  font-size: 20px;\n  padding: 10px;\n  border-radius: 10px;\n  margin-top: 10px;\n  cursor: pointer;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n  margin-top: 10px;\n\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  width: 500px;\n  height: 500px;\n  transition: all 0.1s ease-in-out;\n}\n\n.box {\n  border: 1px solid black;\n}\n\n.AI-box {\n  cursor: crosshair;\n}\n\n.AI-box:hover {\n  background-color: #6200ff;\n}\n\n.details h1 {\n  font-size: 60px\n}\n\n.details p {\n  font-size: 30px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n}\n\n.highlight {\n  background-color: #6200ff;\n}\n\n.contain-ship {\n  background-color: azure;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}\n\n.ship-hit {\n  background-color: #2354da;\n}\n\n.ship-hit::after {\n  position: absolute;\n  content: "\\274c";\n  font-size: 40px; \n  color: #FFF;\n}\n\n.ship-hit:hover {\n  cursor: not-allowed;\n  background-color: #2354da;\n}\n\n\n\n',"",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;EACE,mDAAgD;EAChD,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,cAAc;EACd,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,mBAAmB;EACnB,gBAAgB;;AAElB;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,yBAAyB;EACzB,YAAY;EACZ,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE;AACF;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gCAAgC;AAClC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,yBAAyB;AAC3B",sourcesContent:['* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url(../assets/images/background.jpg);\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#restart {\n  display: block;\n  margin: 0 auto;\n  font-size: 20px;\n  padding: 10px;\n  border-radius: 10px;\n  margin-top: 10px;\n  cursor: pointer;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n  margin-top: 10px;\n\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  width: 500px;\n  height: 500px;\n  transition: all 0.1s ease-in-out;\n}\n\n.box {\n  border: 1px solid black;\n}\n\n.AI-box {\n  cursor: crosshair;\n}\n\n.AI-box:hover {\n  background-color: #6200ff;\n}\n\n.details h1 {\n  font-size: 60px\n}\n\n.details p {\n  font-size: 30px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n}\n\n.highlight {\n  background-color: #6200ff;\n}\n\n.contain-ship {\n  background-color: azure;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}\n\n.ship-hit {\n  background-color: #2354da;\n}\n\n.ship-hit::after {\n  position: absolute;\n  content: "\\274c";\n  font-size: 40px; \n  color: #FFF;\n}\n\n.ship-hit:hover {\n  cursor: not-allowed;\n  background-color: #2354da;\n}\n\n\n\n'],sourceRoot:""}]);const p=l},561:(n,e,t)=>{t.d(e,{Z:()=>p});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),s=t(667),c=t.n(s),d=new URL(t(265),t.b),l=i()(r()),A=c()(d);l.push([n.id,".overlay {\n  position: fixed;\n  display: none;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.winner-overlay {\n  position: fixed;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 30px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: url("+A+");\n  width: 600px;\n  height: 300px;\n  box-shadow: 2px 0px 10px #242424;\n}\n\n.winner-overlay h1 {\n  font-size: 60px\n}\n\n.winner-overlay button {\n  border-style: none;\n  background-color: #2389da;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 10px 25px;\n  cursor: pointer;\n}\n\n.winner-overlay button:hover {\n  background-color: #6200ff;\n}\n\n.winner-overlay button:disabled {\n  color: rgb(39, 39, 39);\n}\n\n.winner-overlay button:disabled:hover {\n  background-color: #2389da;\n  cursor: wait;\n}\n\n","",{version:3,sources:["webpack://./src/styles/winner-overlay.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,aAAa;EACb,MAAM;EACN,OAAO;EACP,YAAY;EACZ,aAAa;EACb,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;EACb,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,mDAAgD;EAChD,YAAY;EACZ,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE;AACF;;AAEA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;EACzB,YAAY;AACd",sourcesContent:[".overlay {\n  position: fixed;\n  display: none;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.winner-overlay {\n  position: fixed;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 30px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: url(../assets/images/background.jpg);\n  width: 600px;\n  height: 300px;\n  box-shadow: 2px 0px 10px #242424;\n}\n\n.winner-overlay h1 {\n  font-size: 60px\n}\n\n.winner-overlay button {\n  border-style: none;\n  background-color: #2389da;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 10px 25px;\n  cursor: pointer;\n}\n\n.winner-overlay button:hover {\n  background-color: #6200ff;\n}\n\n.winner-overlay button:disabled {\n  color: rgb(39, 39, 39);\n}\n\n.winner-overlay button:disabled:hover {\n  background-color: #2389da;\n  cursor: wait;\n}\n\n"],sourceRoot:""}]);const p=l},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],d=o.base?c[0]+o.base:c[0],l=a[d]||0,A="".concat(d," ").concat(l);a[d]=l+1;var p=t(A),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var u=r(h,o);o.byIndex=s,e.splice(s,0,{identifier:A,updater:u,references:1})}i.push(A)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=o(n,r),d=0;d<a.length;d++){var l=t(a[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},265:(n,e,t)=>{n.exports=t.p+"assets/images/background.jpg"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");o.length&&(n=o[o.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const n="https://battleship-backend-gjrc.onrender.com/ships",e="https://battleship-backend-gjrc.onrender.com/playerHits",o="https://battleship-backend-gjrc.onrender.com/AIHits",r={"Content-Type":"application/json"};function a(e,t){const o=JSON.stringify({id:e,...t});fetch(n,{method:"POST",headers:r,body:o}).then((n=>{n.ok||console.log("Failed to add ship.")})).catch((n=>{console.log("Error: ",n)}))}function i(e){return fetch(n,{method:"GET",headers:r}).then((n=>n.json())).then((n=>{e(n)})).catch((n=>{console.log("Error: ",n)}))}async function s(n,t){const o=JSON.stringify(t);return fetch(`${e}/${n}`,{method:"PUT",headers:r,body:o}).then((n=>{n.ok||console.log("failed to record hit",n)})).catch((n=>{console.log("Error: ",n)}))}async function c(n,e){const t=JSON.stringify(e);return fetch(`${o}/${n}`,{method:"PUT",headers:r,body:t}).then((n=>{n.ok||console.log("failed to record hit",n)})).catch((n=>{console.log("Error: ",n)}))}async function d(n,t){var a;await(a=function(t){0!==t.length?Object.values(t[0]).forEach((e=>{n.gameBoard.receiveAttack([e[0],e[1]])})):function(){const n=JSON.stringify({id:1,placeHolder:[]});fetch(e,{method:"POST",headers:r,body:n}).then((n=>{n.ok||console.log("Failed to put placeHolder",n)})).catch((n=>{console.log("Error: ",n)}))}()},fetch(e,{method:"GET",headers:r}).then((n=>n.json())).then((n=>{a(n)})).catch((n=>{console.log("Error: ",n)}))),await fetch(o,{method:"GET",headers:r}).then((n=>n.json())).then((n=>{var e;0!==(e=n).length?Object.values(e[0]).forEach((n=>{t.gameBoard.receiveAttack([n[0],n[1]])})):function(){const n=JSON.stringify({id:1,placeHolder:[]});fetch(o,{method:"POST",headers:r,body:n}).then((n=>{n.ok||console.log("Failed to put placeHolder",n)})).catch((n=>{console.log("Error: ",n)}))}()})).catch((n=>{console.log("Error: ",n)}));const i=document.getElementById("player-board"),d=document.getElementById("AI-board");document.getElementById("page-title").classList.add("mobile-hidden");const l=document.querySelector(".player > h1"),A=document.querySelector(".direction"),p=document.getElementById("length-indicator"),h=document.querySelector("#AI-player"),u=document.querySelector("#restart");l.classList.add("hidden"),A.classList.add("hidden"),p.classList.add("hidden"),h.classList.remove("hidden"),u.classList.remove("hidden"),i.innerHTML="",d.innerHTML="";for(let e=0;e<n.board.length;e++){const t=document.createElement("div");t.id=`p${e}`,t.classList.add("box"),n.board[e].ship&&t.classList.add("contain-ship"),n.board[e].attacked&&t.classList.add("attacked"),n.board[e].attacked&&n.board[e].ship&&t.classList.add("ship-hit"),i.append(t)}for(let e=0;e<t.board.length;e++){const o=document.createElement("div");o.id=t.board[e].coordinates,o.classList.add("AI-box","box"),t.board[e].attacked&&o.classList.add("attacked"),t.board[e].attacked&&t.board[e].ship&&o.classList.add("ship-hit"),o.addEventListener("click",(async()=>{if(t.board[e].attacked)return;n.shoot(t,t.board[e].coordinates),t.board[e].ship?(o.classList.add("ship-hit"),t.board[e].ship.isSunk&&(d.style.backgroundColor="red",E.style.color="red",setTimeout((()=>{d.style.backgroundColor="#2389da",E.style.color="#fff"}),50),t.board[e].ship.shipCoordinates.forEach((n=>{t.gameBoard.getAdjacentBoxes(n).forEach((n=>{document.getElementById(n.coordinates).classList.add("attacked"),t.gameBoard.receiveAttack(n.coordinates)}))})),C())):o.classList.add("attacked");const r=n.board.indexOf(t.shoot(n)),a=document.querySelector(`#player-board > #p${r}`);n.board[r].ship?(a.classList.add("ship-hit"),n.board[r].ship.isSunk&&(i.style.backgroundColor="red",m.style.color="red",setTimeout((()=>{i.style.backgroundColor="#2389da",m.style.color="#fff"}),50),n.board[r].ship.shipCoordinates.forEach((e=>{n.gameBoard.getAdjacentBoxes(e).forEach((e=>{const t=n.board.find((n=>n.coordinates.every(((n,t)=>n===e.coordinates[t])))),o=n.board.indexOf(t);document.getElementById(`p${o}`).classList.add("attacked"),n.gameBoard.receiveAttack(e.coordinates)}))})),C())):a.classList.add("attacked"),await s(1,n.gameBoard.hitLocations),await c(1,t.gameBoard.hitLocations),b()})),d.append(o)}const g=document.querySelector("#player-details h1"),f=document.querySelector("#AI-details h1"),m=document.querySelector("#player-details p"),E=document.querySelector("#AI-details p");function b(){m.textContent="Ships alive: "+(n.gameBoard.ships.length-n.gameBoard.sunkShips.length),E.textContent="Ships alive: "+(t.gameBoard.ships.length-t.gameBoard.sunkShips.length)}function C(){const e=document.querySelector(".overlay"),o=document.querySelector(".winner-overlay"),r=document.querySelector(".winner-overlay > h1");n.gameBoard.ships.length===n.gameBoard.sunkShips.length?(e.style.display="block",r.textContent="Computer won!",o.style.display="flex"):t.gameBoard.ships.length===t.gameBoard.sunkShips.length&&(e.style.display="block",r.textContent="Player won!",o.style.display="flex")}g.textContent=n.name,g.classList.add("mobile-hidden"),f.textContent=t.name,f.classList.add("mobile-hidden"),b()}function l(n,e){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;const o=n,r=[],a=e;let i=0,s=!1;return{get length(){return o},get direction(){return a},get shipCoordinates(){return r},get id(){return t},get hits(){return i},get isSunk(){return s},addCoordinates(n){r.push(n)},hit(){i++,i===o&&(s=!0)}}}function A(){let n=[],e=[],t=[],o=[],r=0,a=1,i=1;for(let e=0;e<100;e++){let e={coordinates:[a,i],ship:null,attacked:!1,available:!0};n.push(e),a++,a>10&&(a=1,i++)}return{get board(){return n},get hitLocations(){return o},get sunkShips(){return t},get totalHits(){return r},get ships(){return e},set ships(n){e=n},placeShip(t,o,r){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;if("right"===o&&t[0]+r>11)return"ship exceeding boundaries";if("down"===o&&t[1]+r>11)return"ship exceeding boundaries";let i=[...t];for(let e=0;e<r;e++){0!==e&&("right"===o?i[0]++:i[1]++);let t=n.find((n=>n.coordinates.every(((n,e)=>n===i[e]))));if(!t)return"No such coordinates";if(!t.available)return"Some of the space is unavailable"}const s=new l(r,o,a);e.push(s);let c=[...t];for(let n=0;n<r;n++){let n=[...c];"right"===o?c[0]++:c[1]++,s.addCoordinates(n)}for(let e=0;e<r;e++){0!==e&&("right"===o?t[0]++:t[1]++);let[r,a]=t,i=[[r-1,a],[r+1,a],[r-1,a+1],[r-1,a-1],[r+1,a+1],[r+1,a-1],[r,a+1],[r,a-1]],c=n.find((n=>n.coordinates.every(((n,e)=>n===t[e]))));c.ship=s,c.ship.coordinates=c.coordinates,c.available=!1,i.forEach((e=>{let t=n.find((n=>n.coordinates.every(((n,t)=>n===e[t]))));t&&(t.available=!1)}))}},receiveAttack(e){const a=n.find((n=>n.coordinates.every(((n,t)=>n===e[t]))));void 0===a||a.attacked||(a.attacked=!0,r++,a.ship&&(a.ship.hit(),a.ship.isSunk&&t.push(a.ship)),o.push(e))},getAdjacentBoxes(n){const[e,t]=n;return[[e-1,t],[e+1,t],[e-1,t+1],[e-1,t-1],[e+1,t+1],[e+1,t-1],[e,t+1],[e,t-1]].map((n=>this.board.find((e=>e.coordinates.every(((e,t)=>e===n[t])))))).filter((n=>void 0!==n))},hasArmedShips(){let n=!1;return e.forEach((e=>{e.isSunk||(n=!0)})),n}}}var p=t(379),h=t.n(p),u=t(795),g=t.n(u),f=t(569),m=t.n(f),E=t(565),b=t.n(E),C=t(216),y=t.n(C),B=t(589),x=t.n(B),v=t(772),k={};k.styleTagTransform=x(),k.setAttributes=b(),k.insert=m().bind(null,"head"),k.domAPI=g(),k.insertStyleElement=y(),h()(v.Z,k),v.Z&&v.Z.locals&&v.Z.locals;var w=t(561),S={};S.styleTagTransform=x(),S.setAttributes=b(),S.insert=m().bind(null,"head"),S.domAPI=g(),S.insertStyleElement=y(),h()(w.Z,S),w.Z&&w.Z.locals&&w.Z.locals;var I=t(884),z={};z.styleTagTransform=x(),z.setAttributes=b(),z.insert=m().bind(null,"head"),z.domAPI=g(),z.insertStyleElement=y(),h()(I.Z,z),I.Z&&I.Z.locals&&I.Z.locals;var L=t(806),j={};j.styleTagTransform=x(),j.setAttributes=b(),j.insert=m().bind(null,"head"),j.domAPI=g(),j.insertStyleElement=y(),h()(L.Z,j),L.Z&&L.Z.locals&&L.Z.locals,async function(n,e){await i((function(t){if(2===t.length){const o=Object.values(t[0]),r=Object.values(t[1]);o.pop(),r.pop(),o.forEach((e=>{n.placeShip(e.shipCoordinates[0],e.direction,e.length)})),r.forEach((n=>{e.placeShip(n.shipCoordinates[0],n.direction,n.length)})),d(n,e)}}));const t=document.getElementById("player-board"),o=document.getElementById("ship-length"),r=[5,5,3,2,2,2,1];let s="right",c=0;const l=document.getElementById("direction-text");document.querySelector(".rotate").addEventListener("click",(()=>{"right"===s?s="down":"down"===s&&(s="right"),l.textContent=s}));for(let i=0;i<n.board.length;i++){const l=document.createElement("div");l.id=n.board[i].coordinates,l.classList.add("box","pre-game"),l.addEventListener("mouseover",(()=>{A.forEach((n=>{n.classList.remove("highlight");const e=l.id.split(","),t=+e[0],o=+e[1],a=n.id.split(","),i=+a[0],d=+a[1];if("right"===s){if(t<=i&&i<t+r[c]&&d===o){if(t+r[c]>11)return;n.classList.add("highlight")}}else if("down"===s&&o<=d&&d<o+r[c]&&i===t){if(o+r[c]>11)return;n.classList.add("highlight")}}))})),l.addEventListener("click",(()=>{const t=l.id.split(","),i=[];i.push(+t[0]),i.push(+t[1]),n.placeShip(i,s,r[c]),n.gameBoard.ships.length>c&&(c++,o.textContent=r[c],document.querySelectorAll(".highlight").forEach((n=>{n.classList.add("contain-ship")}))),r[c]||(a("1",n.gameBoard.ships),e.placeRandomShip(1),e.placeRandomShip(2),e.placeRandomShip(2),e.placeRandomShip(2),e.placeRandomShip(3),e.placeRandomShip(5),e.placeRandomShip(5),a("2",e.gameBoard.ships),d(n,e))})),t.append(l)}const A=document.querySelectorAll(".pre-game")}(function(n){const e=new A;return{name:"player",gameBoard:e,get board(){return e.board},placeShip:(n,t,o)=>e.placeShip(n,t,o),shoot(n,e){n.gameBoard.receiveAttack(e)}}}(),function(){const n=new A;let e=!1,t="",o=[],r=[];function a(n){let e=[];return"right"===n&&(e=[r[0]+1,r[1]]),"left"===n&&(e=[r[0]-1,r[1]]),"up"===n&&(e=[r[0],r[1]-1]),"down"===n&&(e=[r[0],r[1]+1]),e}return{name:"AI",gameBoard:n,get board(){return n.board},placeShip:(e,t,o)=>n.placeShip(e,t,o),placeRandomShip(e){const t=crypto.randomUUID();let o=0;for(;o<1e3;){o++;let r=[];const a=Math.ceil(10*Math.random()),i=Math.ceil(10*Math.random());r.push(a),r.push(i);const s=["right","down"],c=s[Math.floor(Math.random()*s.length)];n.placeShip(r,c,e,t);let d=n.board.find((n=>n.coordinates.every(((n,e)=>n===r[e]))));if(null!=d.ship&&d.ship.id===t)return}},shoot(n){const i=n.gameBoard.board;if(e){if(""===t){let a,s=o[0],c=o[1],d=[[s+1,c],[s,c+1],[s-1,c],[s,c-1]];for(let n=0;n<d.length&&(a=i.find((e=>e.coordinates.every(((e,t)=>e===d[n][t])))),!a||a.attacked);n++);if(n.gameBoard.receiveAttack(a.coordinates),a.ship)if(a.ship.isSunk)e=!1;else{r=a.coordinates;let n=r[0],e=r[1];n>s?t="right":n<s?t="left":e<c?t="up":e>c&&(t="down")}return a}{let s=!1,c=a(t),d=i.find((n=>n.coordinates.every(((n,e)=>n===c[e]))));if(d&&!d.attacked&&(n.gameBoard.receiveAttack(d.coordinates),r=d.coordinates,s=!0,d.ship))return d.ship.isSunk&&(e=!1,t=""),d;if("right"===t?t="left":"left"===t?t="right":"up"===t?t="down":"down"===t&&(t="up"),r=o,d&&!d.ship)return d;if(!s)return c=a(t),d=i.find((n=>n.coordinates.every(((n,e)=>n===c[e])))),n.gameBoard.receiveAttack(d.coordinates),r=d.coordinates,d}}for(;;){let t=[];const r=Math.ceil(10*Math.random()),a=Math.ceil(10*Math.random());t.push(r),t.push(a);let s=i.find((n=>n.coordinates.every(((n,e)=>n===t[e]))));if(!s.attacked){if(n.gameBoard.receiveAttack(s.coordinates),s.ship){if(s.ship.isSunk)return s;e=!0,o=s.coordinates}return s}}}}}());const T=document.querySelector(".winner-overlay > button"),Z=(document.querySelector(".overlay"),document.querySelector(".winner-overlay"),document.getElementById("player-board"),document.querySelector("#AI-player"),document.getElementById("AI-board"),document.querySelector("#restart"));async function q(){T.setAttribute("disabled",!0),Z.setAttribute("disabled",!0),await i((async function(e){const t=[];for(let a=0;a<=e.length-1;a++)t.push((o=e[a].id,fetch(`${n}/${o}`,{method:"DELETE",headers:r}).then((n=>{if(!n.ok)throw new Error("Network response was not ok")})).catch((n=>{console.error("There was a problem deleting the items:",n)}))));var o;await Promise.all(t)})),fetch(`${o}/1`,{method:"DELETE",headers:r}).then((n=>{n.ok||(404===n.status?console.log("No item to delete"):console.log("Network response was not ok",n))})).catch((n=>{console.error("There was a problem deleting the items:",n)})),await fetch(`${e}/1`,{method:"DELETE",headers:r}).then((n=>{n.ok||(404===n.status?console.log("No item to delete"):console.log("Network response was not ok",n))})).catch((n=>{console.error("There was a problem deleting the items:",n)})),setTimeout((()=>{window.location.reload()}),700)}T.addEventListener("click",q),Z.addEventListener("click",q)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVVsRyxpQkFBaUIsUUFBU21HLEdBRXBDM0csRUFBV1EsaUJBQWlCLFFBQVNtRyxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvbWVkaWEtcXVlcmllcy5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvcHJlcGFyZS1nYW1lLmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9zdHlsZXMuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL3dpbm5lci1vdmVybGF5LmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9Nb2R1bGVzL0pTT04tc2VydmVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvTW9kdWxlcy9zdGFydEdhbWUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9jb25zdHJ1Y3RvcnMvU2hpcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2NvbnN0cnVjdG9ycy9HYW1lQm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvc3R5bGVzLmNzcz9lNDViIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL3dpbm5lci1vdmVybGF5LmNzcz9kNWM5Iiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL3ByZXBhcmUtZ2FtZS5jc3M/YWZlMSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9tZWRpYS1xdWVyaWVzLmNzcz9jNjBhIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvTW9kdWxlcy9wcmVwYXJlR2FtZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvY29uc3RydWN0b3JzL1BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2NvbnN0cnVjdG9ycy9BSXBsYXllci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAwMHB4KSB7XFxuICAjcGFnZS10aXRsZSB7XFxuICAgIG1hcmdpbi10b3A6IDMwcHg7XFxuICAgIGZvbnQtc2l6ZTogNzVweDtcXG4gIH1cXG5cXG4gICNnYW1lLWNvbnRhaW5lciB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxuICB9XFxuICBcXG4gIC5wbGF5ZXIgaDEge1xcbiAgICBmb250LXNpemU6IDMwcHhcXG4gIH1cXG5cXG4gIC5wbGF5ZXIgaDIge1xcbiAgICBmb250LXNpemU6IDIwcHg7XFxuICB9XFxuXFxuICAucm90YXRlIHtcXG4gICAgZm9udC1zaXplOiAxNXB4O1xcbiAgICBwYWRkaW5nOiAzcHggMTVweDtcXG4gIH1cXG5cXG4gICNsZW5ndGgtaW5kaWNhdG9yIHtcXG4gICAgZm9udC1zaXplOiAyMHB4O1xcbiAgfVxcblxcbiAgLmJvYXJkIHtcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxuICAgIHdpZHRoOiAzNTBweDtcXG4gICAgaGVpZ2h0OiAzNTBweDtcXG4gIH1cXG5cXG4gIC5tb2JpbGUtaGlkZGVuIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG5cXG4gIC5zaGlwLWhpdDo6YWZ0ZXIge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGNvbnRlbnQ6IFxcXCJcXFxcMjc0Y1xcXCI7XFxuICAgIGZvbnQtc2l6ZTogMjdweDsgXFxuICAgIGNvbG9yOiAjRkZGO1xcbiAgfVxcblxcbiAgLndpbm5lci1vdmVybGF5IGgxIHtcXG4gICAgZm9udC1zaXplOiA0MHB4XFxuICB9XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvbWVkaWEtcXVlcmllcy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRTtJQUNFLGdCQUFnQjtJQUNoQixlQUFlO0VBQ2pCOztFQUVBO0lBQ0Usc0JBQXNCO0lBQ3RCLGdCQUFnQjtFQUNsQjs7RUFFQTtJQUNFO0VBQ0Y7O0VBRUE7SUFDRSxlQUFlO0VBQ2pCOztFQUVBO0lBQ0UsZUFBZTtJQUNmLGlCQUFpQjtFQUNuQjs7RUFFQTtJQUNFLGVBQWU7RUFDakI7O0VBRUE7SUFDRSxjQUFjO0lBQ2QsWUFBWTtJQUNaLGFBQWE7RUFDZjs7RUFFQTtJQUNFLGFBQWE7RUFDZjs7RUFFQTtJQUNFLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLFdBQVc7RUFDYjs7RUFFQTtJQUNFO0VBQ0Y7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMDBweCkge1xcbiAgI3BhZ2UtdGl0bGUge1xcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xcbiAgICBmb250LXNpemU6IDc1cHg7XFxuICB9XFxuXFxuICAjZ2FtZS1jb250YWluZXIge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xcbiAgfVxcbiAgXFxuICAucGxheWVyIGgxIHtcXG4gICAgZm9udC1zaXplOiAzMHB4XFxuICB9XFxuXFxuICAucGxheWVyIGgyIHtcXG4gICAgZm9udC1zaXplOiAyMHB4O1xcbiAgfVxcblxcbiAgLnJvdGF0ZSB7XFxuICAgIGZvbnQtc2l6ZTogMTVweDtcXG4gICAgcGFkZGluZzogM3B4IDE1cHg7XFxuICB9XFxuXFxuICAjbGVuZ3RoLWluZGljYXRvciB7XFxuICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gIH1cXG5cXG4gIC5ib2FyZCB7XFxuICAgIG1hcmdpbjogMCBhdXRvO1xcbiAgICB3aWR0aDogMzUwcHg7XFxuICAgIGhlaWdodDogMzUwcHg7XFxuICB9XFxuXFxuICAubW9iaWxlLWhpZGRlbiB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxuXFxuICAuc2hpcC1oaXQ6OmFmdGVyIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBjb250ZW50OiBcXFwiXFxcXDI3NGNcXFwiO1xcbiAgICBmb250LXNpemU6IDI3cHg7IFxcbiAgICBjb2xvcjogI0ZGRjtcXG4gIH1cXG5cXG4gIC53aW5uZXItb3ZlcmxheSBoMSB7XFxuICAgIGZvbnQtc2l6ZTogNDBweFxcbiAgfVxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucGxheWVyIGgxIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogNDBweDtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcblxcbi5kaXJlY3Rpb24ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuLnBsYXllciBoMiB7XFxuICBmb250LXNpemU6IDMwcHg7XFxufVxcblxcbi5yb3RhdGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBjb2xvcjogYmxhY2s7XFxuICBtYXJnaW46IDAgMCAxMHB4IDEwcHg7XFxuICB3aWR0aDogbWF4LWNvbnRlbnQ7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBwYWRkaW5nOiA1cHggMTVweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnJvdGF0ZTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTk5LCAxOTksIDE5OSk7XFxufVxcblxcbiNsZW5ndGgtaW5kaWNhdG9yIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMjVweDtcXG59XFxuXFxuLnByZS1nYW1lIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmhpZGRlbiB7XFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnRcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9wcmVwYXJlLWdhbWUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsWUFBWTtFQUNaLHFCQUFxQjtFQUNyQixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxvQ0FBb0M7QUFDdEM7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRTtBQUNGXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5wbGF5ZXIgaDEge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiA0MHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuLmRpcmVjdGlvbiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG5cXG4ucGxheWVyIGgyIHtcXG4gIGZvbnQtc2l6ZTogMzBweDtcXG59XFxuXFxuLnJvdGF0ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGNvbG9yOiBibGFjaztcXG4gIG1hcmdpbjogMCAwIDEwcHggMTBweDtcXG4gIHdpZHRoOiBtYXgtY29udGVudDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIHBhZGRpbmc6IDVweCAxNXB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ucm90YXRlOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigxOTksIDE5OSwgMTk5KTtcXG59XFxuXFxuI2xlbmd0aC1pbmRpY2F0b3Ige1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiAyNXB4O1xcbn1cXG5cXG4ucHJlLWdhbWUge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudFxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4uL2Fzc2V0cy9pbWFnZXMvYmFja2dyb3VuZC5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5ib2R5IHtcXG4gIGJhY2tncm91bmQ6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbiNwYWdlLXRpdGxlIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIG1hcmdpbi10b3A6IDY1cHg7XFxuICBmb250LXNpemU6IDEwMHB4O1xcbn1cXG5cXG4jcmVzdGFydCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBtYXJnaW4tdG9wOiAxMHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4jZ2FtZS1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGNvbHVtbi1nYXA6IDcwcHg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogMTAwdnc7XFxuICBoZWlnaHQ6IG1heC1jb250ZW50O1xcbiAgbWFyZ2luLXRvcDogMTBweDtcXG5cXG59XFxuXFxuLmJvYXJkIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMCwgMWZyKTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMzg5ZGE7XFxuICB3aWR0aDogNTAwcHg7XFxuICBoZWlnaHQ6IDUwMHB4O1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XFxufVxcblxcbi5ib3gge1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxufVxcblxcbi5BSS1ib3gge1xcbiAgY3Vyc29yOiBjcm9zc2hhaXI7XFxufVxcblxcbi5BSS1ib3g6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYyMDBmZjtcXG59XFxuXFxuLmRldGFpbHMgaDEge1xcbiAgZm9udC1zaXplOiA2MHB4XFxufVxcblxcbi5kZXRhaWxzIHAge1xcbiAgZm9udC1zaXplOiAzMHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XFxufVxcblxcbi5oaWdobGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYyMDBmZjtcXG59XFxuXFxuLmNvbnRhaW4tc2hpcCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBhenVyZTtcXG59XFxuXFxuLmF0dGFja2VkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYTIzMjM7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbn1cXG5cXG4uYXR0YWNrZWQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RhMjMyMztcXG59XFxuXFxuLnNoaXAtaGl0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMzU0ZGE7XFxufVxcblxcbi5zaGlwLWhpdDo6YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY29udGVudDogXFxcIlxcXFwyNzRjXFxcIjtcXG4gIGZvbnQtc2l6ZTogNDBweDsgXFxuICBjb2xvcjogI0ZGRjtcXG59XFxuXFxuLnNoaXAtaGl0OmhvdmVyIHtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjM1NGRhO1xcbn1cXG5cXG5cXG5cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3N0eWxlcy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxVQUFVO0VBQ1YsU0FBUztFQUNULHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLG1EQUFnRDtFQUNoRCxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxjQUFjO0VBQ2QsZUFBZTtFQUNmLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsZ0JBQWdCO0VBQ2hCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsZ0JBQWdCO0VBQ2hCLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsWUFBWTtFQUNaLG1CQUFtQjtFQUNuQixnQkFBZ0I7O0FBRWxCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNDQUFzQztFQUN0Qyx5QkFBeUI7RUFDekIsWUFBWTtFQUNaLGFBQWE7RUFDYixnQ0FBZ0M7QUFDbEM7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRTtBQUNGOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixnQ0FBZ0M7QUFDbEM7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsV0FBVztBQUNiOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLHlCQUF5QjtBQUMzQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5ib2R5IHtcXG4gIGJhY2tncm91bmQ6IHVybCguLi9hc3NldHMvaW1hZ2VzL2JhY2tncm91bmQuanBnKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuI3BhZ2UtdGl0bGUge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbWFyZ2luLXRvcDogNjVweDtcXG4gIGZvbnQtc2l6ZTogMTAwcHg7XFxufVxcblxcbiNyZXN0YXJ0IHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbiNnYW1lLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgY29sdW1uLWdhcDogNzBweDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGhlaWdodDogbWF4LWNvbnRlbnQ7XFxuICBtYXJnaW4tdG9wOiAxMHB4O1xcblxcbn1cXG5cXG4uYm9hcmQge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAxZnIpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzODlkYTtcXG4gIHdpZHRoOiA1MDBweDtcXG4gIGhlaWdodDogNTAwcHg7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcXG59XFxuXFxuLmJveCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG59XFxuXFxuLkFJLWJveCB7XFxuICBjdXJzb3I6IGNyb3NzaGFpcjtcXG59XFxuXFxuLkFJLWJveDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjIwMGZmO1xcbn1cXG5cXG4uZGV0YWlscyBoMSB7XFxuICBmb250LXNpemU6IDYwcHhcXG59XFxuXFxuLmRldGFpbHMgcCB7XFxuICBmb250LXNpemU6IDMwcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcXG59XFxuXFxuLmhpZ2hsaWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjIwMGZmO1xcbn1cXG5cXG4uY29udGFpbi1zaGlwIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGF6dXJlO1xcbn1cXG5cXG4uYXR0YWNrZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RhMjMyMztcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxufVxcblxcbi5hdHRhY2tlZDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGEyMzIzO1xcbn1cXG5cXG4uc2hpcC1oaXQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzNTRkYTtcXG59XFxuXFxuLnNoaXAtaGl0OjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjb250ZW50OiBcXFwiXFxcXDI3NGNcXFwiO1xcbiAgZm9udC1zaXplOiA0MHB4OyBcXG4gIGNvbG9yOiAjRkZGO1xcbn1cXG5cXG4uc2hpcC1oaXQ6aG92ZXIge1xcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMzU0ZGE7XFxufVxcblxcblxcblxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiLi4vYXNzZXRzL2ltYWdlcy9iYWNrZ3JvdW5kLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5vdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTtcXG59XFxuXFxuLndpbm5lci1vdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcm93LWdhcDogMzBweDtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICBiYWNrZ3JvdW5kOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO1xcbiAgd2lkdGg6IDYwMHB4O1xcbiAgaGVpZ2h0OiAzMDBweDtcXG4gIGJveC1zaGFkb3c6IDJweCAwcHggMTBweCAjMjQyNDI0O1xcbn1cXG5cXG4ud2lubmVyLW92ZXJsYXkgaDEge1xcbiAgZm9udC1zaXplOiA2MHB4XFxufVxcblxcbi53aW5uZXItb3ZlcmxheSBidXR0b24ge1xcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzODlkYTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIHBhZGRpbmc6IDEwcHggMjVweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLndpbm5lci1vdmVybGF5IGJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjIwMGZmO1xcbn1cXG5cXG4ud2lubmVyLW92ZXJsYXkgYnV0dG9uOmRpc2FibGVkIHtcXG4gIGNvbG9yOiByZ2IoMzksIDM5LCAzOSk7XFxufVxcblxcbi53aW5uZXItb3ZlcmxheSBidXR0b246ZGlzYWJsZWQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzODlkYTtcXG4gIGN1cnNvcjogd2FpdDtcXG59XFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy93aW5uZXItb3ZlcmxheS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxlQUFlO0VBQ2YsYUFBYTtFQUNiLE1BQU07RUFDTixPQUFPO0VBQ1AsWUFBWTtFQUNaLGFBQWE7RUFDYixvQ0FBb0M7QUFDdEM7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsYUFBYTtFQUNiLHNCQUFzQjtFQUN0Qix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGFBQWE7RUFDYixRQUFRO0VBQ1IsU0FBUztFQUNULGdDQUFnQztFQUNoQyxtREFBZ0Q7RUFDaEQsWUFBWTtFQUNaLGFBQWE7RUFDYixnQ0FBZ0M7QUFDbEM7O0FBRUE7RUFDRTtBQUNGOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLFlBQVk7QUFDZFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIub3ZlcmxheSB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGhlaWdodDogMTAwdmg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7XFxufVxcblxcbi53aW5uZXItb3ZlcmxheSB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHJvdy1nYXA6IDMwcHg7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgYmFja2dyb3VuZDogdXJsKC4uL2Fzc2V0cy9pbWFnZXMvYmFja2dyb3VuZC5qcGcpO1xcbiAgd2lkdGg6IDYwMHB4O1xcbiAgaGVpZ2h0OiAzMDBweDtcXG4gIGJveC1zaGFkb3c6IDJweCAwcHggMTBweCAjMjQyNDI0O1xcbn1cXG5cXG4ud2lubmVyLW92ZXJsYXkgaDEge1xcbiAgZm9udC1zaXplOiA2MHB4XFxufVxcblxcbi53aW5uZXItb3ZlcmxheSBidXR0b24ge1xcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzODlkYTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIHBhZGRpbmc6IDEwcHggMjVweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLndpbm5lci1vdmVybGF5IGJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjIwMGZmO1xcbn1cXG5cXG4ud2lubmVyLW92ZXJsYXkgYnV0dG9uOmRpc2FibGVkIHtcXG4gIGNvbG9yOiByZ2IoMzksIDM5LCAzOSk7XFxufVxcblxcbi53aW5uZXItb3ZlcmxheSBidXR0b246ZGlzYWJsZWQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzODlkYTtcXG4gIGN1cnNvcjogd2FpdDtcXG59XFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTtcblxuICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfVxuXG4gIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJjb25zdCBzaGlwc1VybCA9IFwiaHR0cHM6Ly9iYXR0bGVzaGlwLWJhY2tlbmQtZ2pyYy5vbnJlbmRlci5jb20vc2hpcHNcIlxuY29uc3QgcGxheWVySGl0c1VybCA9IFwiaHR0cHM6Ly9iYXR0bGVzaGlwLWJhY2tlbmQtZ2pyYy5vbnJlbmRlci5jb20vcGxheWVySGl0c1wiXG5jb25zdCBBSUhpdHNVcmwgPSBcImh0dHBzOi8vYmF0dGxlc2hpcC1iYWNrZW5kLWdqcmMub25yZW5kZXIuY29tL0FJSGl0c1wiXG5jb25zdCBoZWFkZXJzID0ge1xuICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxufVxuXG5mdW5jdGlvbiBhZGRTaGlwVG9BUEkoaWQsIHNoaXBEYXRhKSB7XG4gIGNvbnN0IHBheWxvYWQgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgaWQsXG4gICAgLi4uc2hpcERhdGFcbiAgfSlcblxuICBmZXRjaChzaGlwc1VybCwge1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgaGVhZGVycyxcbiAgICBib2R5OiBwYXlsb2FkXG4gIH0pXG4gIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICBpZighcmVzcG9uc2Uub2spIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRmFpbGVkIHRvIGFkZCBzaGlwLlwiKVxuICAgIH1cbiAgfSlcbiAgLmNhdGNoKGVycm9yID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiwgZXJyb3IpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGdldFNoaXBzKGNhbGxiYWNrKSB7XG5cbiAgcmV0dXJuIGZldGNoKHNoaXBzVXJsLCB7XG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGhlYWRlcnNcbiAgfSlcbiAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAudGhlbihkYXRhID0+IHtcbiAgICBjYWxsYmFjayhkYXRhKVxuICB9KVxuICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiLCBlcnJvcilcbiAgfSlcbn1cblxuZnVuY3Rpb24gZGVsZXRlU2hpcChpdGVtSUQpIHtcbiAgcmV0dXJuIGZldGNoKGAke3NoaXBzVXJsfS8ke2l0ZW1JRH1gLCB7XG4gICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgIGhlYWRlcnNcbiAgfSlcbiAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5ldHdvcmsgcmVzcG9uc2Ugd2FzIG5vdCBva1wiKTtcbiAgICB9XG4gIH0pXG4gIC5jYXRjaChlcnJvciA9PiB7XG4gICAgY29uc29sZS5lcnJvcihcIlRoZXJlIHdhcyBhIHByb2JsZW0gZGVsZXRpbmcgdGhlIGl0ZW1zOlwiLCBlcnJvcik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwbGF5ZXJQbGFjZUhvbGRlcigpIHtcbiAgY29uc3QgcGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICBpZDogMSxcbiAgICBwbGFjZUhvbGRlcjogW119KVxuXG4gIHJldHVybiBmZXRjaChwbGF5ZXJIaXRzVXJsLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBoZWFkZXJzLFxuICAgIGJvZHk6IHBheWxvYWRcbiAgfSlcbiAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgIGlmKCFyZXNwb25zZS5vaykge1xuICAgICAgY29uc29sZS5sb2coXCJGYWlsZWQgdG8gcHV0IHBsYWNlSG9sZGVyXCIsIHJlc3BvbnNlKVxuICAgIH1cbiAgfSlcbiAgLmNhdGNoKGVycm9yID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiwgZXJyb3IpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIEFJUGxhY2VIb2xkZXIoKSB7XG4gIGNvbnN0IHBheWxvYWQgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgaWQ6IDEsXG4gICAgcGxhY2VIb2xkZXI6IFtdfSlcblxuICByZXR1cm4gZmV0Y2goQUlIaXRzVXJsLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBoZWFkZXJzLFxuICAgIGJvZHk6IHBheWxvYWRcbiAgfSlcbiAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgIGlmKCFyZXNwb25zZS5vaykge1xuICAgICAgY29uc29sZS5sb2coXCJGYWlsZWQgdG8gcHV0IHBsYWNlSG9sZGVyXCIsIHJlc3BvbnNlKVxuICAgIH1cbiAgfSlcbiAgLmNhdGNoKGVycm9yID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiwgZXJyb3IpXG4gIH0pXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVBsYXllckhpdHNBUEkoaWQsIGhpdHNBcnJheSkge1xuICBjb25zdCBwYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkoaGl0c0FycmF5KVxuXG4gIHJldHVybiBmZXRjaChgJHtwbGF5ZXJIaXRzVXJsfS8ke2lkfWAsIHtcbiAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgaGVhZGVycyxcbiAgICBib2R5OiBwYXlsb2FkXG4gIH0pXG4gIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICBpZighcmVzcG9uc2Uub2spIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZmFpbGVkIHRvIHJlY29yZCBoaXRcIiwgcmVzcG9uc2UpXG4gICAgfVxuICB9KVxuICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiLCBlcnJvcilcbiAgfSlcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlQUlIaXRzQVBJKGlkLCBoaXRzQXJyYXkpIHtcbiAgY29uc3QgcGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KGhpdHNBcnJheSlcblxuICByZXR1cm4gZmV0Y2goYCR7QUlIaXRzVXJsfS8ke2lkfWAsIHtcbiAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgaGVhZGVycyxcbiAgICBib2R5OiBwYXlsb2FkXG4gIH0pXG4gIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICBpZighcmVzcG9uc2Uub2spIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZmFpbGVkIHRvIHJlY29yZCBoaXRcIiwgcmVzcG9uc2UpXG4gICAgfVxuICB9KVxuICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiLCBlcnJvcilcbiAgfSlcbn1cblxuZnVuY3Rpb24gZ2V0UGxheWVySGl0cyhjYWxsYmFjaykge1xuXG4gIHJldHVybiBmZXRjaChwbGF5ZXJIaXRzVXJsLCB7XG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGhlYWRlcnNcbiAgfSlcbiAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAudGhlbihkYXRhID0+IHtcbiAgICBjYWxsYmFjayhkYXRhKVxuICB9KVxuICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiLCBlcnJvcilcbiAgfSlcbn1cblxuZnVuY3Rpb24gZ2V0QUlIaXRzKGNhbGxiYWNrKSB7XG5cbiAgcmV0dXJuIGZldGNoKEFJSGl0c1VybCwge1xuICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICBoZWFkZXJzXG4gIH0pXG4gIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgLnRoZW4oZGF0YSA9PiB7XG4gICAgY2FsbGJhY2soZGF0YSlcbiAgfSlcbiAgLmNhdGNoKGVycm9yID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiwgZXJyb3IpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGRlbGV0ZVBsYXllckhpdHMoaWQpIHtcbiAgcmV0dXJuIGZldGNoKGAke3BsYXllckhpdHNVcmx9LyR7aWR9YCwge1xuICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICBoZWFkZXJzXG4gIH0pXG4gIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBpZihyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkgY29uc29sZS5sb2coJ05vIGl0ZW0gdG8gZGVsZXRlJylcbiAgICAgIGVsc2UgY29uc29sZS5sb2coXCJOZXR3b3JrIHJlc3BvbnNlIHdhcyBub3Qgb2tcIiwgcmVzcG9uc2UpXG4gICAgfVxuICB9KVxuICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGRlbGV0aW5nIHRoZSBpdGVtczpcIiwgZXJyb3IpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBkZWxldGVBSUhpdHMoaWQpIHtcbiAgcmV0dXJuIGZldGNoKGAke0FJSGl0c1VybH0vJHtpZH1gLCB7XG4gICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgIGhlYWRlcnNcbiAgfSlcbiAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIGlmKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0KSBjb25zb2xlLmxvZygnTm8gaXRlbSB0byBkZWxldGUnKVxuICAgICAgZWxzZSBjb25zb2xlLmxvZyhcIk5ldHdvcmsgcmVzcG9uc2Ugd2FzIG5vdCBva1wiLCByZXNwb25zZSlcbiAgICB9XG4gIH0pXG4gIC5jYXRjaChlcnJvciA9PiB7XG4gICAgY29uc29sZS5lcnJvcihcIlRoZXJlIHdhcyBhIHByb2JsZW0gZGVsZXRpbmcgdGhlIGl0ZW1zOlwiLCBlcnJvcilcbiAgfSk7XG59XG5cbmV4cG9ydCB7IGFkZFNoaXBUb0FQSSwgZ2V0U2hpcHMsIGRlbGV0ZVNoaXAsIHVwZGF0ZVBsYXllckhpdHNBUEksIHVwZGF0ZUFJSGl0c0FQSSwgZGVsZXRlUGxheWVySGl0cywgZ2V0UGxheWVySGl0cywgZ2V0QUlIaXRzLCBkZWxldGVBSUhpdHMsIHBsYXllclBsYWNlSG9sZGVyLCBBSVBsYWNlSG9sZGVyIH0iLCJpbXBvcnQgeyB1cGRhdGVQbGF5ZXJIaXRzQVBJLCB1cGRhdGVBSUhpdHNBUEksIGdldFBsYXllckhpdHMsIGdldEFJSGl0cywgcGxheWVyUGxhY2VIb2xkZXIsIEFJUGxhY2VIb2xkZXIgfSBmcm9tIFwiLi9KU09OLXNlcnZlclwiXG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0R2FtZShwbGF5ZXIsIEFJKSB7XG5cbiAgICAvLyBhZGQgYSBwbGFjZWhvbGRlciB0byB0aGUgaGl0cyBhcnJheSBpbiB0aGUgc2VydmVyXG4gICAgYXdhaXQgZ2V0UGxheWVySGl0cyhwcm9jZXNzUGxheWVySGl0cylcbiAgICBhd2FpdCBnZXRBSUhpdHMocHJvY2Vzc0FJSGl0cylcbiAgICBmdW5jdGlvbiBwcm9jZXNzUGxheWVySGl0cyhoaXRzKSB7ICAgICAgXG4gICAgICBpZihoaXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBwbGF5ZXJQbGFjZUhvbGRlcigpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBpZiB0aGVyZSBhcmUgaGl0cywgY29udmVydCBvYmplY3QgdG8gYXJyYXlcbiAgICAgIGNvbnN0IGhpdHNBcnJheSA9IE9iamVjdC52YWx1ZXMoaGl0c1swXSlcblxuICAgICAgaGl0c0FycmF5LmZvckVhY2goaGl0ID0+IHtcbiAgICAgICAgcGxheWVyLmdhbWVCb2FyZC5yZWNlaXZlQXR0YWNrKFtoaXRbMF0sIGhpdFsxXV0pXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NBSUhpdHMoaGl0cykgeyAgICAgIFxuICAgICAgaWYoaGl0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgQUlQbGFjZUhvbGRlcigpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBpZiB0aGVyZSBhcmUgaGl0cywgY29udmVydCBvYmplY3QgdG8gYXJyYXlcbiAgICAgIGNvbnN0IGhpdHNBcnJheSA9IE9iamVjdC52YWx1ZXMoaGl0c1swXSlcblxuICAgICAgaGl0c0FycmF5LmZvckVhY2goaGl0ID0+IHtcbiAgICAgICAgQUkuZ2FtZUJvYXJkLnJlY2VpdmVBdHRhY2soW2hpdFswXSwgaGl0WzFdXSlcbiAgICAgIH0pXG4gICAgfVxuXG4gIC8vIHNlbGVjdCB0aGUgY29udGFpbmVycyBvZiBlYWNoIGJvYXJkXG4gIGNvbnN0IHBsYXllckJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllci1ib2FyZCcpXG4gIGNvbnN0IEFJQm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnQUktYm9hcmQnKVxuICBjb25zdCBwYWdlVGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFnZS10aXRsZScpXG4gIHBhZ2VUaXRsZS5jbGFzc0xpc3QuYWRkKCdtb2JpbGUtaGlkZGVuJylcblxuXG4gIC8vIGhpZGUgcHJlLWdhbWUgdGl0bGVzLCBzaG93IEFJIGJvYXJkXG4gIGNvbnN0IHBsYWNlU2hpcHNUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGF5ZXIgPiBoMScpXG4gIGNvbnN0IGNoYW5nZURpcmVjdGlvbkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kaXJlY3Rpb24nKVxuICBjb25zdCBsZW5ndGhJbmRpY2F0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGVuZ3RoLWluZGljYXRvcicpXG4gIGNvbnN0IEFJU2lkZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNBSS1wbGF5ZXInKVxuICBjb25zdCByZXN0YXJ0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Jlc3RhcnQnKVxuICBwbGFjZVNoaXBzVGl0bGUuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcbiAgY2hhbmdlRGlyZWN0aW9uQnRuLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG4gIGxlbmd0aEluZGljYXRvci5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICBBSVNpZGUuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJylcbiAgcmVzdGFydEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuXG4gIC8vIHJlc2V0IHRoZSBwbGF5ZXIgYm9hcmRcbiAgcGxheWVyQm9hcmQuaW5uZXJIVE1MID0gXCJcIlxuICBBSUJvYXJkLmlubmVySFRNTCA9IFwiXCJcblxuICAvLyByZW5kZXIgdGhlIHBsYXllciBib2FyZFxuICBmb3IobGV0IGkgPSAwOyBpIDwgcGxheWVyLmJvYXJkLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBib3guaWQgPSBgcCR7aX1gXG4gICAgYm94LmNsYXNzTGlzdC5hZGQoJ2JveCcpXG4gICAgLy8gc2hvd3Mgc2hpcHMgb24gdGhlIGJvYXJkXG4gICAgaWYocGxheWVyLmJvYXJkW2ldLnNoaXApIGJveC5jbGFzc0xpc3QuYWRkKCdjb250YWluLXNoaXAnKVxuXG4gICAgLy8gbWFyayBhdHRhY2tlZCBib3hlc1xuICAgIGlmKHBsYXllci5ib2FyZFtpXS5hdHRhY2tlZCkgYm94LmNsYXNzTGlzdC5hZGQoJ2F0dGFja2VkJylcbiAgICBpZihwbGF5ZXIuYm9hcmRbaV0uYXR0YWNrZWQgJiYgcGxheWVyLmJvYXJkW2ldLnNoaXApIGJveC5jbGFzc0xpc3QuYWRkKCdzaGlwLWhpdCcpXG5cbiAgICBwbGF5ZXJCb2FyZC5hcHBlbmQoYm94KVxuICB9XG5cbiAgLy8gcmVuZGVyIHRoZSBBSSBib2FyZFxuICBmb3IobGV0IGkgPSAwOyBpIDwgQUkuYm9hcmQubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGJveC5pZCA9IEFJLmJvYXJkW2ldLmNvb3JkaW5hdGVzIC8vIHNldCB0aGUgaWQgb2YgdGhlIGJveCB0byBpdCdzIGNvb3JkaW5hdGVzXG4gICAgYm94LmNsYXNzTGlzdC5hZGQoJ0FJLWJveCcsICdib3gnKVxuXG4gICAgLy8gbWFyayBhdHRhY2tlZCBib3hlc1xuICAgIGlmKEFJLmJvYXJkW2ldLmF0dGFja2VkKSBib3guY2xhc3NMaXN0LmFkZCgnYXR0YWNrZWQnKVxuICAgIGlmKEFJLmJvYXJkW2ldLmF0dGFja2VkICYmIEFJLmJvYXJkW2ldLnNoaXApIGJveC5jbGFzc0xpc3QuYWRkKCdzaGlwLWhpdCcpXG5cbiAgICAvLyB3aGVuIGJveCBpcyBjbGlja2VkXG4gICAgYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gZG8gbm90aGluZyBpZiBpdCdzIGFscmVhZHkgYXR0YWNrZWRcbiAgICAgIGlmKEFJLmJvYXJkW2ldLmF0dGFja2VkKSByZXR1cm5cbiAgICAgIC8vIGlmIG5vdCwgc2hvb3QgQUkgYXQgbG9jYXRpb25cbiAgICAgIHBsYXllci5zaG9vdChBSSwgQUkuYm9hcmRbaV0uY29vcmRpbmF0ZXMpXG4gICAgICAvLyBpZiBzaGlwIGdvdCBoaXRcbiAgICAgIGlmKEFJLmJvYXJkW2ldLnNoaXApIHtcbiAgICAgICAgYm94LmNsYXNzTGlzdC5hZGQoJ3NoaXAtaGl0JylcbiAgICAgICAgLy8gaWYgc2hpcCBzdW5rXG4gICAgICAgIGlmKEFJLmJvYXJkW2ldLnNoaXAuaXNTdW5rKSB7XG4gICAgICAgICAgQUlCb2FyZC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmVkJ1xuICAgICAgICAgIEFJU3RhdGUuc3R5bGUuY29sb3IgPSAncmVkJ1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgQUlCb2FyZC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzIzODlkYSdcbiAgICAgICAgICAgIEFJU3RhdGUuc3R5bGUuY29sb3IgPSAnI2ZmZidcbiAgICAgICAgICB9LCA1MClcbiAgICAgICAgICAvLyBtYXJrIGFkamFjZW50IGFzIGF0dGFja2VkXG4gICAgICAgICAgY29uc3Qgc2hpcENvb3JkcyA9IEFJLmJvYXJkW2ldLnNoaXAuc2hpcENvb3JkaW5hdGVzXG4gICAgICAgICAgc2hpcENvb3Jkcy5mb3JFYWNoKGNvb3JkcyA9PiB7XG4gICAgICAgICAgICBjb25zdCBhZGphY2VudEJveGVzID0gQUkuZ2FtZUJvYXJkLmdldEFkamFjZW50Qm94ZXMoY29vcmRzKVxuICAgICAgICAgICAgYWRqYWNlbnRCb3hlcy5mb3JFYWNoKGFkamFjZW50ID0+IHtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYWRqYWNlbnQuY29vcmRpbmF0ZXMpLmNsYXNzTGlzdC5hZGQoJ2F0dGFja2VkJylcbiAgICAgICAgICAgICAgQUkuZ2FtZUJvYXJkLnJlY2VpdmVBdHRhY2soYWRqYWNlbnQuY29vcmRpbmF0ZXMpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLy8gY2hlY2sgaWYgZ2FtZSBpcyBvdmVyXG4gICAgICAgICAgaXNHYW1lT3ZlcigpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgYm94LmNsYXNzTGlzdC5hZGQoJ2F0dGFja2VkJylcblxuICAgICAgLy8gdGhlbiBBSSBzaG9vdHMgYmFjayBhdCByYW5kb20gbG9jYXRpb25cbiAgICAgIGNvbnN0IEFJSGl0ID0gcGxheWVyLmJvYXJkLmluZGV4T2YoQUkuc2hvb3QocGxheWVyKSlcbiAgICAgIGNvbnN0IHRhcmdldEJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNwbGF5ZXItYm9hcmQgPiAjcCR7QUlIaXR9YClcbiAgICAgIC8vIGlmIHNoaXAgZ290IGhpdFxuICAgICAgaWYocGxheWVyLmJvYXJkW0FJSGl0XS5zaGlwKSB7XG4gICAgICAgIHRhcmdldEJveC5jbGFzc0xpc3QuYWRkKCdzaGlwLWhpdCcpIFxuICAgICAgICAvLyBpZiBzaGlwIHN1bmtcbiAgICAgICAgaWYocGxheWVyLmJvYXJkW0FJSGl0XS5zaGlwLmlzU3Vuaykge1xuICAgICAgICAgIHBsYXllckJvYXJkLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZWQnXG4gICAgICAgICAgcGxheWVyU3RhdGUuc3R5bGUuY29sb3IgPSAncmVkJ1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgcGxheWVyQm9hcmQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyMyMzg5ZGEnXG4gICAgICAgICAgICBwbGF5ZXJTdGF0ZS5zdHlsZS5jb2xvciA9ICcjZmZmJ1xuICAgICAgICAgIH0sIDUwKVxuICAgICAgICAgIC8vIG1hcmsgYWRqYWNlbnQgYXMgYXR0YWNrZWRcbiAgICAgICAgICBjb25zdCBzaGlwQ29vcmRzID0gcGxheWVyLmJvYXJkW0FJSGl0XS5zaGlwLnNoaXBDb29yZGluYXRlc1xuICAgICAgICAgIHNoaXBDb29yZHMuZm9yRWFjaChjb29yZHMgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWRqYWNlbnRCb3hlcyA9IHBsYXllci5nYW1lQm9hcmQuZ2V0QWRqYWNlbnRCb3hlcyhjb29yZHMpXG4gICAgICAgICAgICBhZGphY2VudEJveGVzLmZvckVhY2goYWRqYWNlbnQgPT4ge1xuICAgICAgICAgICAgICAvLyBmaW5kIHRoZSBjb3JyZWN0IGJveCBpbiB0aGUgYXJyYXkgY29ycmVzcG9uZGluZyB0byB0aGUgY29vcmRcbiAgICAgICAgICAgICAgY29uc3QgY3VycmVudEJveCA9IHBsYXllci5ib2FyZC5maW5kKGl0ZW0gPT4gaXRlbS5jb29yZGluYXRlcy5ldmVyeSgoY29vcmQsIGluZGV4KSA9PiBjb29yZCA9PT0gYWRqYWNlbnQuY29vcmRpbmF0ZXNbaW5kZXhdKSlcbiAgICAgICAgICAgICAgLy8gZ2V0IHRoZSBpbmRleCBvZiB0aGlzIGJveFxuICAgICAgICAgICAgICBjb25zdCBjdXJyZW50Qm94SW5kZXggPSBwbGF5ZXIuYm9hcmQuaW5kZXhPZihjdXJyZW50Qm94KVxuICAgICAgICAgICAgICAvLyB1c2Ugc2VsZWN0b3IgdG8gc2VsZWN0IHRoZSBib3ggd2l0aCB0aGUgaW5kZXggYXMgaXQncyBpZFxuICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgcCR7Y3VycmVudEJveEluZGV4fWApLmNsYXNzTGlzdC5hZGQoJ2F0dGFja2VkJylcbiAgICAgICAgICAgICAgLy8gYWRqYWNlbnQuYXR0YWNrZWQgPSB0cnVlXG4gICAgICAgICAgICAgIHBsYXllci5nYW1lQm9hcmQucmVjZWl2ZUF0dGFjayhhZGphY2VudC5jb29yZGluYXRlcylcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgICAvLyBjaGVjayBpZiBnYW1lIGlzIG92ZXJcbiAgICAgICAgICBpc0dhbWVPdmVyKClcbiAgICAgICAgfVxuICAgICAgfSBcbiAgICAgIGVsc2UgdGFyZ2V0Qm94LmNsYXNzTGlzdC5hZGQoJ2F0dGFja2VkJylcbiAgICAgIC8vIHVwZGF0ZXMgdGhlIEFQSXNcbiAgICAgIGF3YWl0IHVwZGF0ZVBsYXllckhpdHNBUEkoMSwgcGxheWVyLmdhbWVCb2FyZC5oaXRMb2NhdGlvbnMpXG4gICAgICBhd2FpdCB1cGRhdGVBSUhpdHNBUEkoMSwgQUkuZ2FtZUJvYXJkLmhpdExvY2F0aW9ucylcbiAgICAgIHVwZGF0ZVNoaXBzRGV0YWlscygpXG4gICAgfSlcbiAgICBBSUJvYXJkLmFwcGVuZChib3gpXG4gIH1cblxuXG4gIC8vIGFkZCBwbGF5ZXIgZGV0YWlsczpcbiAgY29uc3QgcGxheWVyTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwbGF5ZXItZGV0YWlscyBoMScpXG4gIGNvbnN0IEFJTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNBSS1kZXRhaWxzIGgxJylcbiAgY29uc3QgcGxheWVyU3RhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGxheWVyLWRldGFpbHMgcCcpXG4gIGNvbnN0IEFJU3RhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjQUktZGV0YWlscyBwJylcbiAgcGxheWVyTmFtZS50ZXh0Q29udGVudCA9IHBsYXllci5uYW1lXG4gIHBsYXllck5hbWUuY2xhc3NMaXN0LmFkZCgnbW9iaWxlLWhpZGRlbicpXG4gIEFJTmFtZS50ZXh0Q29udGVudCA9IEFJLm5hbWVcbiAgQUlOYW1lLmNsYXNzTGlzdC5hZGQoJ21vYmlsZS1oaWRkZW4nKVxuICB1cGRhdGVTaGlwc0RldGFpbHMoKVxuXG5cbiAgZnVuY3Rpb24gdXBkYXRlU2hpcHNEZXRhaWxzKCkge1xuICAgIHBsYXllclN0YXRlLnRleHRDb250ZW50ID0gYFNoaXBzIGFsaXZlOiAke3BsYXllci5nYW1lQm9hcmQuc2hpcHMubGVuZ3RoIC0gcGxheWVyLmdhbWVCb2FyZC5zdW5rU2hpcHMubGVuZ3RofWBcbiAgICBBSVN0YXRlLnRleHRDb250ZW50ID0gYFNoaXBzIGFsaXZlOiAke0FJLmdhbWVCb2FyZC5zaGlwcy5sZW5ndGggLSBBSS5nYW1lQm9hcmQuc3Vua1NoaXBzLmxlbmd0aH1gXG4gIH1cblxuICBmdW5jdGlvbiBpc0dhbWVPdmVyKCkge1xuICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcub3ZlcmxheScpXG4gICAgY29uc3Qgd2lubmVyT3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53aW5uZXItb3ZlcmxheScpXG4gICAgY29uc3Qgd2lubmVyTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53aW5uZXItb3ZlcmxheSA+IGgxJylcblxuICAgIC8vIGlmIHBsYXllciBoYXMgbm8gbW9yZSBzaGlwcyBhbGl2ZVxuICAgIGlmKHBsYXllci5nYW1lQm9hcmQuc2hpcHMubGVuZ3RoID09PSBwbGF5ZXIuZ2FtZUJvYXJkLnN1bmtTaGlwcy5sZW5ndGgpIHtcbiAgICAgIC8vIGNvbXB1dGVyIHdpbnNcbiAgICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgIHdpbm5lck5hbWUudGV4dENvbnRlbnQgPSAnQ29tcHV0ZXIgd29uISdcbiAgICAgIHdpbm5lck92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdmbGV4J1xuICAgIH1cbiAgICAvLyBpZiBjb21wdXRlciBoYXMgbm8gbW9yZSBzaGlwcyBhbGl2ZVxuICAgIGVsc2UgaWYoQUkuZ2FtZUJvYXJkLnNoaXBzLmxlbmd0aCA9PT0gQUkuZ2FtZUJvYXJkLnN1bmtTaGlwcy5sZW5ndGgpIHtcbiAgICAgIC8vIHBsYXllciB3aW5zXG4gICAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG4gICAgICB3aW5uZXJOYW1lLnRleHRDb250ZW50ID0gJ1BsYXllciB3b24hJ1xuICAgICAgd2lubmVyT3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnXG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2hpcChsZW4sIGRpcmVjdCwgaWQgPSBudWxsKSB7XG4gIGNvbnN0IGxlbmd0aCA9IGxlblxuICBjb25zdCBzaGlwQ29vcmRpbmF0ZXMgPSBbXVxuICBjb25zdCBkaXJlY3Rpb24gPSBkaXJlY3RcbiAgbGV0IGhpdHMgPSAwXG4gIGxldCBpc1N1bmsgPSBmYWxzZVxuICByZXR1cm4ge1xuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoXG4gICAgfSxcblxuICAgIGdldCBkaXJlY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGlyZWN0aW9uXG4gICAgfSxcblxuICAgIGdldCBzaGlwQ29vcmRpbmF0ZXMoKSB7XG4gICAgICByZXR1cm4gc2hpcENvb3JkaW5hdGVzXG4gICAgfSxcbiAgICBcbiAgICBnZXQgaWQoKSB7XG4gICAgICByZXR1cm4gaWRcbiAgICB9LFxuXG4gICAgZ2V0IGhpdHMoKSB7XG4gICAgICByZXR1cm4gaGl0c1xuICAgIH0sXG5cbiAgICBnZXQgaXNTdW5rKCkge1xuICAgICAgcmV0dXJuIGlzU3Vua1xuICAgIH0sXG5cbiAgICBhZGRDb29yZGluYXRlcyhjb29yZCkge1xuICAgICAgc2hpcENvb3JkaW5hdGVzLnB1c2goY29vcmQpXG4gICAgfSxcblxuICAgIGhpdCgpIHtcbiAgICAgIGhpdHMrK1xuICAgICAgaWYoaGl0cyA9PT0gbGVuZ3RoKSBpc1N1bmsgPSB0cnVlXG4gICAgfVxuICB9XG59IiwiaW1wb3J0IFNoaXAgZnJvbSBcIi4vU2hpcFwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdhbWVCb2FyZCgpIHtcbiAgbGV0IGJvYXJkID0gW11cbiAgbGV0IHNoaXBzID0gW11cbiAgbGV0IHN1bmtTaGlwcyA9IFtdXG4gIGxldCBoaXRMb2NhdGlvbnMgPSBbXVxuICBsZXQgdG90YWxIaXRzID0gMFxuICBsZXQgZ3JpZFNpemUgPSAxMDBcbiAgLy8gaW5pdGlhbGl6ZSBjb29yZGluYXRlcyBhdCAxLDFcbiAgbGV0IHggPSAxXG4gIGxldCB5ID0gMVxuICBmb3IobGV0IGkgPSAwOyBpIDwgZ3JpZFNpemU7IGkrKykge1xuICAgIC8vIG1ha2UgZWFjaCBib3ggYW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YVxuICAgIGxldCBib3ggPSB7XG4gICAgICBcImNvb3JkaW5hdGVzXCI6IFt4LHldLFxuICAgICAgXCJzaGlwXCI6IG51bGwsXG4gICAgICBcImF0dGFja2VkXCI6IGZhbHNlLFxuICAgICAgXCJhdmFpbGFibGVcIjogdHJ1ZVxuICAgIH1cbiAgICAvLyBhZGQgb2JqZWN0IHRvIGdhbWVCb2FyZCBhcnJheVxuICAgIGJvYXJkLnB1c2goYm94KVxuICAgIFxuICAgIC8vIGluY3JlbWVudCB4IGFuZCB5IGNvb3JkaW5hdGVzXG4gICAgeCsrXG4gICAgaWYoeCA+IDEwKSB7XG4gICAgICB4ID0gMVxuICAgICAgeSsrXG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldCBib2FyZCgpIHtcbiAgICAgIHJldHVybiBib2FyZFxuICAgIH0sXG5cbiAgICBnZXQgaGl0TG9jYXRpb25zKCkge1xuICAgICAgcmV0dXJuIGhpdExvY2F0aW9uc1xuICAgIH0sXG5cbiAgICBnZXQgc3Vua1NoaXBzKCkge1xuICAgICAgcmV0dXJuIHN1bmtTaGlwc1xuICAgIH0sXG5cbiAgICBnZXQgdG90YWxIaXRzKCkge1xuICAgICAgcmV0dXJuIHRvdGFsSGl0c1xuICAgIH0sXG5cbiAgICBnZXQgc2hpcHMoKSB7XG4gICAgICByZXR1cm4gc2hpcHNcbiAgICB9LFxuXG4gICAgc2V0IHNoaXBzKG5ld1ZhbHVlKSB7XG4gICAgICBzaGlwcyA9IG5ld1ZhbHVlXG4gICAgfSxcblxuICAgIHBsYWNlU2hpcChjb29yZHMsIGRpcmVjdGlvbiwgbGVuLCBpZCA9IG51bGwpIHtcbiAgICAgIC8vIGNoZWNrIGlmIHNoaXAgc3RheXMgd2l0aGluIGJvdW5kYXJpZXNcbiAgICAgIGlmKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyAmJiBjb29yZHNbMF0gKyBsZW4gPiAxMSkgcmV0dXJuICdzaGlwIGV4Y2VlZGluZyBib3VuZGFyaWVzJ1xuICAgICAgaWYoZGlyZWN0aW9uID09PSAnZG93bicgJiYgY29vcmRzWzFdICsgbGVuID4gMTEpIHJldHVybiAnc2hpcCBleGNlZWRpbmcgYm91bmRhcmllcydcblxuICAgICAgbGV0IGNvb3Jkc0NvcHkgPSBbLi4uY29vcmRzXVxuXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYoaSAhPT0gMCkge1xuICAgICAgICAgIGlmKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JykgY29vcmRzQ29weVswXSsrXG4gICAgICAgICAgZWxzZSBjb29yZHNDb3B5WzFdICsrXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNob3NlbkxvY2F0aW9uID0gYm9hcmQuZmluZChib3ggPT4gYm94LmNvb3JkaW5hdGVzLmV2ZXJ5KChjb29yZCwgaW5kZXgpID0+IGNvb3JkID09PSBjb29yZHNDb3B5W2luZGV4XSkpXG4gICAgICAgIGlmKCFjaG9zZW5Mb2NhdGlvbikgcmV0dXJuICdObyBzdWNoIGNvb3JkaW5hdGVzJ1xuICAgICAgICBpZighY2hvc2VuTG9jYXRpb24uYXZhaWxhYmxlKSByZXR1cm4gJ1NvbWUgb2YgdGhlIHNwYWNlIGlzIHVuYXZhaWxhYmxlJ1xuICAgICAgfVxuXG4gICAgICAvLyBjcmVhdGVzIHRoZSBzaGlwXG4gICAgICBjb25zdCBiYXR0bGVzaGlwID0gbmV3IFNoaXAobGVuLCBkaXJlY3Rpb24sIGlkKVxuICAgICAgc2hpcHMucHVzaChiYXR0bGVzaGlwKVxuXG4gICAgICAvLyBhZGQgdGhlIHNoaXAgY29vcmRpbmF0ZXMgdG8gdGhlIHNoaXAgb2JqZWN0XG4gICAgICBsZXQgY29vcmRpbmF0ZXNDb3B5ID0gWy4uLmNvb3Jkc11cbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBsZXQgY3VycmVudENvb3JkcyA9IFsuLi5jb29yZGluYXRlc0NvcHldXG5cbiAgICAgICAgaWYoZGlyZWN0aW9uID09PSAncmlnaHQnKSBjb29yZGluYXRlc0NvcHlbMF0rK1xuICAgICAgICBlbHNlIGNvb3JkaW5hdGVzQ29weVsxXSsrXG5cbiAgICAgICAgYmF0dGxlc2hpcC5hZGRDb29yZGluYXRlcyhjdXJyZW50Q29vcmRzKVxuICAgICAgfVxuXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgLy8gc2tpcHMgc3RhdGVtZW50IG9uIGZpcnN0IHJvdW5kIHRvIGFkZCB0aGUgY2hvc2VuIGNvb3JkaW5hdGVzXG4gICAgICAgIGlmKGkgIT09IDApIHtcbiAgICAgICAgICAvLyBjb250aW51ZSBtb3ZpbmcgaW4gdGhlIGNob3NlbiBkaXJlY3Rpb25cbiAgICAgICAgICBpZihkaXJlY3Rpb24gPT09ICdyaWdodCcpIGNvb3Jkc1swXSsrXG4gICAgICAgICAgZWxzZSBjb29yZHNbMV0rK1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWFrZSBhbiBhcnJheSBjb250YWluaW5nIGFsbCBvZiB0aGUgYWRqYWNlbnQgbG9jYXRpb25zXG4gICAgICAgIGxldCBbYSwgYl0gPSBjb29yZHM7XG4gICAgICAgIGxldCBhZGphY2VudExvY2F0aW9ucyA9IFtcbiAgICAgICAgICBbYSAtIDEsIGJdLFxuICAgICAgICAgIFthICsgMSwgYl0sXG4gICAgICAgICAgW2EgLSAxLCBiICsgMV0sXG4gICAgICAgICAgW2EgLSAxLCBiIC0gMV0sXG4gICAgICAgICAgW2EgKyAxLCBiICsgMV0sXG4gICAgICAgICAgW2EgKyAxLCBiIC0gMV0sXG4gICAgICAgICAgW2EsIGIgKyAxXSxcbiAgICAgICAgICBbYSwgYiAtIDFdXG4gICAgICAgIF07XG5cbiAgICAgICAgbGV0IGNob3NlbkxvY2F0aW9uID0gYm9hcmQuZmluZChib3ggPT4gYm94LmNvb3JkaW5hdGVzLmV2ZXJ5KChjb29yZCwgaW5kZXgpID0+IGNvb3JkID09PSBjb29yZHNbaW5kZXhdKSlcbiAgICAgICAgY2hvc2VuTG9jYXRpb24uc2hpcCA9IGJhdHRsZXNoaXBcbiAgICAgICAgY2hvc2VuTG9jYXRpb24uc2hpcC5jb29yZGluYXRlcyA9IGNob3NlbkxvY2F0aW9uLmNvb3JkaW5hdGVzXG5cbiAgICAgICAgLy8gc2V0IHNoaXAgYm94ZXMgYW5kIGFkamFjZW50IGJveGVzIHVuYXZhaWxhYmxlXG4gICAgICAgIGNob3NlbkxvY2F0aW9uLmF2YWlsYWJsZSA9IGZhbHNlXG4gICAgICAgIGFkamFjZW50TG9jYXRpb25zLmZvckVhY2gobG9jYXRpb24gPT4ge1xuICAgICAgICAgIGxldCBjdXJyZW50ID0gYm9hcmQuZmluZChib3ggPT4gYm94LmNvb3JkaW5hdGVzLmV2ZXJ5KChjb29yZCwgaW5kZXgpID0+IGNvb3JkID09PSBsb2NhdGlvbltpbmRleF0pKVxuICAgICAgICAgIGlmKGN1cnJlbnQpIGN1cnJlbnQuYXZhaWxhYmxlID0gZmFsc2VcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVjZWl2ZUF0dGFjayhjb29yZHMpIHtcbiAgICAgIGNvbnN0IGNob3NlbkxvY2F0aW9uID0gYm9hcmQuZmluZChib3ggPT4gYm94LmNvb3JkaW5hdGVzLmV2ZXJ5KChjb29yZCwgaW5kZXgpID0+IGNvb3JkID09PSBjb29yZHNbaW5kZXhdKSlcbiAgICAgIC8vIGlmIHRoZSBsb2NhdGlvbiBpcyBvdXQgb2YgYm91bmRhcmllcyBvciB3YXMgYWxyZWFkeSBhdHRhY2tlZFxuICAgICAgaWYoY2hvc2VuTG9jYXRpb24gPT09IHVuZGVmaW5lZCB8fCBjaG9zZW5Mb2NhdGlvbi5hdHRhY2tlZCkgcmV0dXJuXG4gICAgXG4gICAgICAvLyBtYXJrIGxvY2F0aW9uIGFzIGF0dGFja2VkXG4gICAgICBjaG9zZW5Mb2NhdGlvbi5hdHRhY2tlZCA9IHRydWVcbiAgICAgIHRvdGFsSGl0cysrXG4gICAgICAvLyBoaXQgc2hpcCBpZiBwcmVzZW50XG4gICAgICBpZihjaG9zZW5Mb2NhdGlvbi5zaGlwKSB7XG4gICAgICAgIGNob3NlbkxvY2F0aW9uLnNoaXAuaGl0KClcbiAgICAgICAgLy8gaWYgc2hpcCBzdW5rLCBhZGQgdG8gc3Vua1NoaXBzXG4gICAgICAgIGlmKGNob3NlbkxvY2F0aW9uLnNoaXAuaXNTdW5rKSB7XG4gICAgICAgICAgc3Vua1NoaXBzLnB1c2goY2hvc2VuTG9jYXRpb24uc2hpcClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaGl0TG9jYXRpb25zLnB1c2goY29vcmRzKVxuICAgIH0sXG5cbiAgICAvLyByZXR1cm4gdGhlIGFkamFjZW50IGxvY2F0aW9uc1xuICAgIGdldEFkamFjZW50Qm94ZXMoY29vcmRzKSB7XG4gICAgICBjb25zdCBbYSwgYl0gPSBjb29yZHM7XG4gICAgICBjb25zdCBhZGphY2VudExvY2F0aW9ucyA9IFtcbiAgICAgICAgW2EgLSAxLCBiXSxcbiAgICAgICAgW2EgKyAxLCBiXSxcbiAgICAgICAgW2EgLSAxLCBiICsgMV0sXG4gICAgICAgIFthIC0gMSwgYiAtIDFdLFxuICAgICAgICBbYSArIDEsIGIgKyAxXSxcbiAgICAgICAgW2EgKyAxLCBiIC0gMV0sXG4gICAgICAgIFthLCBiICsgMV0sXG4gICAgICAgIFthLCBiIC0gMV1cbiAgICAgIF07XG4gICAgICBjb25zdCBhZGphY2VudEJveGVzID0gYWRqYWNlbnRMb2NhdGlvbnMubWFwKGxvY2F0aW9uID0+IHtcbiAgICAgICAgY29uc3QgYWRqYWNlbnRCb3ggPSB0aGlzLmJvYXJkLmZpbmQoYm94ID0+IGJveC5jb29yZGluYXRlcy5ldmVyeSgoY29vcmQsIGluZGV4KSA9PiBjb29yZCA9PT0gbG9jYXRpb25baW5kZXhdKSk7XG4gICAgICAgIHJldHVybiBhZGphY2VudEJveDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFkamFjZW50Qm94ZXMuZmlsdGVyKGJveCA9PiBib3ggIT09IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBcbiAgICBoYXNBcm1lZFNoaXBzKCkge1xuICAgICAgbGV0IGFybWVkU2hpcHMgPSBmYWxzZVxuICAgICAgc2hpcHMuZm9yRWFjaChzaGlwID0+IHtcbiAgICAgICAgaWYoIXNoaXAuaXNTdW5rKSBhcm1lZFNoaXBzID0gdHJ1ZVxuICAgICAgfSlcbiAgICAgIHJldHVybiBhcm1lZFNoaXBzXG4gICAgfVxuICB9XG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vd2lubmVyLW92ZXJsYXkuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi93aW5uZXItb3ZlcmxheS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcHJlcGFyZS1nYW1lLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcHJlcGFyZS1nYW1lLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tZWRpYS1xdWVyaWVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWVkaWEtcXVlcmllcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgc3RhcnRHYW1lIGZyb20gXCIuL3N0YXJ0R2FtZVwiO1xuaW1wb3J0IHsgYWRkU2hpcFRvQVBJLCBnZXRTaGlwcyB9IGZyb20gXCIuL0pTT04tc2VydmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHByZXBhcmVHYW1lKHBsYXllciwgQUkpIHtcblxuICAvLyBpZiBnYW1lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3MsIHNraXAgdGhlIHByZXBhcmF0aW9uIHBhcnRcbiAgYXdhaXQgZ2V0U2hpcHMoY2hlY2spXG4gIGZ1bmN0aW9uIGNoZWNrKHNoaXBzKSB7XG4gICAgaWYoc2hpcHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAvLyBjb252ZXJ0IG9iamVjdHMgdG8gYXJyYXlzXG4gICAgICBjb25zdCBwbGF5ZXJTaGlwcyA9IE9iamVjdC52YWx1ZXMoc2hpcHNbMF0pXG4gICAgICBjb25zdCBBSVNoaXBzID0gT2JqZWN0LnZhbHVlcyhzaGlwc1sxXSlcbiAgICAgIC8vIHJlbW92ZSB0aGUgSUQgcHJvcGVydHlcbiAgICAgIHBsYXllclNoaXBzLnBvcCgpXG4gICAgICBBSVNoaXBzLnBvcCgpXG5cbiAgICAgIC8vIHBsYWNlIHBsYXllciBzaGlwc1xuICAgICAgcGxheWVyU2hpcHMuZm9yRWFjaChzaGlwID0+IHtcbiAgICAgICAgcGxheWVyLnBsYWNlU2hpcChzaGlwLnNoaXBDb29yZGluYXRlc1swXSwgc2hpcC5kaXJlY3Rpb24sIHNoaXAubGVuZ3RoKVxuICAgICAgfSlcblxuICAgICAgLy8gcGxhY2UgQUkgc2hpcHNcbiAgICAgIEFJU2hpcHMuZm9yRWFjaChzaGlwID0+IHtcbiAgICAgICAgQUkucGxhY2VTaGlwKHNoaXAuc2hpcENvb3JkaW5hdGVzWzBdLCBzaGlwLmRpcmVjdGlvbiwgc2hpcC5sZW5ndGgpXG4gICAgICB9KVxuICAgICAgXG4gICAgICAvLyBzdGFydCBnYW1lIHdpdGhvdXQgcHJlcGFyYXRpb25cbiAgICAgIHN0YXJ0R2FtZShwbGF5ZXIsIEFJKVxuICAgIH0gXG4gIH1cblxuICBjb25zdCBwbGF5ZXJCb2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXItYm9hcmQnKVxuICBjb25zdCBsZW5ndGhJbmRpY2F0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hpcC1sZW5ndGgnKVxuICBjb25zdCBzaGlwTGVucyA9IFs1LCA1LCAzLCAyLCAyLCAyLCAxXVxuICBsZXQgZGlyZWN0aW9uID0gJ3JpZ2h0J1xuICBsZXQgY3VycmVudFNoaXAgPSAwXG5cbiAgLy8gaGFuZGxlIGNoYW5naW5nIGRpcmVjdGlvblxuICBjb25zdCBkaXJlY3Rpb25UZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RpcmVjdGlvbi10ZXh0JylcbiAgY29uc3Qgcm90YXRlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJvdGF0ZScpXG4gIHJvdGF0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBpZiAoZGlyZWN0aW9uID09PSAncmlnaHQnKSBkaXJlY3Rpb24gPSAnZG93bidcbiAgICBlbHNlIGlmKGRpcmVjdGlvbiA9PT0gJ2Rvd24nKSBkaXJlY3Rpb24gPSAncmlnaHQnXG4gICAgZGlyZWN0aW9uVGV4dC50ZXh0Q29udGVudCA9IGRpcmVjdGlvblxuICB9KVxuXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBwbGF5ZXIuYm9hcmQubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGJveC5pZCA9IHBsYXllci5ib2FyZFtpXS5jb29yZGluYXRlc1xuICAgIGJveC5jbGFzc0xpc3QuYWRkKCdib3gnLCAncHJlLWdhbWUnKVxuICAgIC8vIHNob3cgc2hpcCBsb2NhdGlvbiBvbiBob3ZlclxuICAgIGJveC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCAoKSA9PiB7XG4gICAgICBhbGxCb3hlcy5mb3JFYWNoKHNxdWFyZSA9PiB7XG4gICAgICAgIHNxdWFyZS5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQnKVxuICAgICAgICAvLyBnZXQgdGhlIHggYW5kIHRoZSB5IG9mIGhvdmVyZWQgYm94IGFuZCBvdGhlciBzcXVhcmVzXG4gICAgICAgIGNvbnN0IGhvdmVyZWRDb29yZHMgPSBib3guaWQuc3BsaXQoJywnKVxuICAgICAgICBjb25zdCBib3hYID0gK2hvdmVyZWRDb29yZHNbMF1cbiAgICAgICAgY29uc3QgYm94WSA9ICtob3ZlcmVkQ29vcmRzWzFdXG4gICAgICAgIGNvbnN0IHNxdWFyZUNvb3JkID0gc3F1YXJlLmlkLnNwbGl0KCcsJylcbiAgICAgICAgY29uc3Qgc3F1YXJlWCA9ICtzcXVhcmVDb29yZFswXVxuICAgICAgICBjb25zdCBzcXVhcmVZID0gK3NxdWFyZUNvb3JkWzFdXG5cbiAgICAgICAgLy8gaGlnaGxpZ2h0IHRoZSBzaGlwIHNpemUgaW4gdGhlIGNvcnJlY3QgZGlyZWN0aW9uXG4gICAgICAgIGlmKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIGlmKGJveFggPD0gc3F1YXJlWCAmJiBzcXVhcmVYIDwgYm94WCArIHNoaXBMZW5zW2N1cnJlbnRTaGlwXSAmJiBzcXVhcmVZID09PSBib3hZKSB7XG4gICAgICAgICAgICAvLyBpZiBzaGlwIGV4Y2VlZGluZyB0aGUgYm9hcmQgcmV0dXJuXG4gICAgICAgICAgICBpZihib3hYICsgc2hpcExlbnNbY3VycmVudFNoaXBdID4gMTEpIHJldHVyblxuICAgICAgICAgICAgLy8gZWxzZSBjb2xvciB0aGUgc3F1YXJlcyB0aGUgc2hpcCB3aWxsIHRha2VcbiAgICAgICAgICAgIHNxdWFyZS5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmKGRpcmVjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgaWYoYm94WSA8PSBzcXVhcmVZICYmIHNxdWFyZVkgPCBib3hZICsgc2hpcExlbnNbY3VycmVudFNoaXBdICYmIHNxdWFyZVggPT09IGJveFgpIHtcbiAgICAgICAgICAgIC8vIGlmIHNoaXAgZXhjZWVkaW5nIHRoZSBib2FyZCByZXR1cm5cbiAgICAgICAgICAgIGlmKGJveFkgKyBzaGlwTGVuc1tjdXJyZW50U2hpcF0gPiAxMSkgcmV0dXJuXG4gICAgICAgICAgICAvLyBlbHNlIGNvbG9yIHRoZSBzcXVhcmVzIHRoZSBzaGlwIHdpbGwgdGFrZVxuICAgICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodCcpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG5cbiAgICAvLyBwbGFjZSB0aGUgc2hpcCBvbiBjbGlja1xuICAgIGJveC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIC8vIGdldCBhbiBhcnJheSBvZiB0d28gbnVtYmVycyBhcyBjb29yZGluYXRlc1xuICAgICAgY29uc3QgaG92ZXJlZENvb3Jkc1N0cmluZyA9IGJveC5pZC5zcGxpdCgnLCcpXG4gICAgICBjb25zdCBob3ZlcmVkQ29vcmRzID0gW11cbiAgICAgIGhvdmVyZWRDb29yZHMucHVzaCgraG92ZXJlZENvb3Jkc1N0cmluZ1swXSlcbiAgICAgIGhvdmVyZWRDb29yZHMucHVzaCgraG92ZXJlZENvb3Jkc1N0cmluZ1sxXSlcbiAgICAgIFxuICAgICAgLy8gdHJ5IHRvIHBsYWNlIHNoaXBcbiAgICAgIHBsYXllci5wbGFjZVNoaXAoaG92ZXJlZENvb3JkcywgZGlyZWN0aW9uLCBzaGlwTGVuc1tjdXJyZW50U2hpcF0pXG4gICAgICAvLyBjaGVjayBpZiBzaGlwIHJlYWxseSBwbGFjZWRcbiAgICAgIGlmKHBsYXllci5nYW1lQm9hcmQuc2hpcHMubGVuZ3RoID4gY3VycmVudFNoaXApIHtcbiAgICAgICAgY3VycmVudFNoaXArK1xuICAgICAgICBsZW5ndGhJbmRpY2F0b3IudGV4dENvbnRlbnQgPSBzaGlwTGVuc1tjdXJyZW50U2hpcF1cbiAgICAgICAgLy8gaWYgaXQncyBwbGFjZWQsIGNoYW5nZWQgaGlnaGxpZ2h0ZWQgc3F1YXJlcyB0byBzaGlwIHNxdWFyZXNcbiAgICAgICAgY29uc3QgaGlnaGxpZ2h0ZWRTcXVhcmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmhpZ2hsaWdodCcpXG4gICAgICAgIGhpZ2hsaWdodGVkU3F1YXJlcy5mb3JFYWNoKHNxdWFyZSA9PiB7XG4gICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoJ2NvbnRhaW4tc2hpcCcpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBpZighc2hpcExlbnNbY3VycmVudFNoaXBdKSB7XG4gICAgICAgIGFkZFNoaXBUb0FQSSgnMScsIHBsYXllci5nYW1lQm9hcmQuc2hpcHMpXG4gICAgICAgIC8vIGNyZWF0ZSBBSSBzaGlwcyBhbmQgc3RhcnQgZ2FtZVxuICAgICAgICBBSS5wbGFjZVJhbmRvbVNoaXAoMSkgXG4gICAgICAgIEFJLnBsYWNlUmFuZG9tU2hpcCgyKSBcbiAgICAgICAgQUkucGxhY2VSYW5kb21TaGlwKDIpIFxuICAgICAgICBBSS5wbGFjZVJhbmRvbVNoaXAoMikgXG4gICAgICAgIEFJLnBsYWNlUmFuZG9tU2hpcCgzKSBcbiAgICAgICAgQUkucGxhY2VSYW5kb21TaGlwKDUpIFxuICAgICAgICBBSS5wbGFjZVJhbmRvbVNoaXAoNSkgXG4gICAgICAgIGFkZFNoaXBUb0FQSSgnMicsIEFJLmdhbWVCb2FyZC5zaGlwcylcbiAgICAgICAgc3RhcnRHYW1lKHBsYXllciwgQUkpXG4gICAgICB9XG4gICAgfSlcbiAgICBwbGF5ZXJCb2FyZC5hcHBlbmQoYm94KVxuICB9XG4gIGNvbnN0IGFsbEJveGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByZS1nYW1lJylcbn0iLCJpbXBvcnQgcHJlcGFyZUdhbWUgZnJvbSBcIi4vTW9kdWxlcy9wcmVwYXJlR2FtZVwiO1xuaW1wb3J0IEFJcGxheWVyIGZyb20gXCIuL2NvbnN0cnVjdG9ycy9BSXBsYXllclwiO1xuaW1wb3J0IFBsYXllciBmcm9tIFwiLi9jb25zdHJ1Y3RvcnMvUGxheWVyXCI7XG5pbXBvcnQgeyBkZWxldGVTaGlwLCBkZWxldGVQbGF5ZXJIaXRzLCBkZWxldGVBSUhpdHMsIGdldFNoaXBzIH0gZnJvbSBcIi4vTW9kdWxlcy9KU09OLXNlcnZlclwiO1xuaW1wb3J0ICcuL3N0eWxlcy9zdHlsZXMuY3NzJ1xuaW1wb3J0ICcuL3N0eWxlcy93aW5uZXItb3ZlcmxheS5jc3MnXG5pbXBvcnQgJy4vc3R5bGVzL3ByZXBhcmUtZ2FtZS5jc3MnXG5pbXBvcnQgJy4vc3R5bGVzL21lZGlhLXF1ZXJpZXMuY3NzJ1xuXG4vLyBjcmVhdGUgdGhlIHBsYXllcnNcbmNvbnN0IHBsYXllciA9IFBsYXllcigncGxheWVyJylcbmNvbnN0IEFJID0gQUlwbGF5ZXIoKVxuXG5wcmVwYXJlR2FtZShwbGF5ZXIsIEFJKVxuXG5jb25zdCBwbGF5QWdhaW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2lubmVyLW92ZXJsYXkgPiBidXR0b24nKVxuY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdmVybGF5JylcbmNvbnN0IHdpbm5lck92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2lubmVyLW92ZXJsYXknKVxuY29uc3QgcGxheWVyQm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxheWVyLWJvYXJkJylcbmNvbnN0IEFJUGxheWVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI0FJLXBsYXllcicpXG5jb25zdCBBSUJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0FJLWJvYXJkJylcbmNvbnN0IHJlc3RhcnRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcmVzdGFydCcpXG5cblxucGxheUFnYWluLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVzZXRHYW1lKVxuXG5yZXN0YXJ0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVzZXRHYW1lKVxuXG5hc3luYyBmdW5jdGlvbiByZXNldEdhbWUoKSB7XG4gIC8vIGRpc2FibGUgdGhlIGJ1dHRvbnNcbiAgcGxheUFnYWluLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIHRydWUpXG4gIHJlc3RhcnRCdG4uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgdHJ1ZSlcblxuICAvLyBkZWxldGUgdGhlIHNoaXBzXG4gIGF3YWl0IGdldFNoaXBzKHJlbW92ZSlcbiAgYXN5bmMgZnVuY3Rpb24gcmVtb3ZlKHNoaXBzKSB7XG4gICAgY29uc3QgZGVsZXRlUHJvbWlzZXMgPSBbXVxuICAgIGZvcihsZXQgaSA9IDA7IGkgPD0gc2hpcHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBkZWxldGVQcm9taXNlcy5wdXNoKGRlbGV0ZVNoaXAoc2hpcHNbaV0uaWQpKVxuICAgIH1cbiAgICBhd2FpdCBQcm9taXNlLmFsbChkZWxldGVQcm9taXNlcylcbiAgfVxuICBcbiAgXG4gIC8vIGRlbGV0ZSB0aGUgaGl0c1xuICBkZWxldGVBSUhpdHMoMSlcbiAgYXdhaXQgZGVsZXRlUGxheWVySGl0cygxKVxuXG4gIC8vIHJlc3RhcnQgZ2FtZVxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgfSwgNzAwKVxufVxuIiwiaW1wb3J0IEdhbWVCb2FyZCBmcm9tIFwiLi9HYW1lQm9hcmRcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQbGF5ZXIocGxheWVyTmFtZSkge1xuICBjb25zdCBuYW1lID0gcGxheWVyTmFtZVxuICBjb25zdCBnYW1lQm9hcmQgPSBuZXcgR2FtZUJvYXJkKClcblxuICByZXR1cm4ge1xuICAgIG5hbWUsXG4gICAgZ2FtZUJvYXJkLFxuICAgIGdldCBib2FyZCgpIHtcbiAgICAgIHJldHVybiBnYW1lQm9hcmQuYm9hcmRcbiAgICB9LFxuXG4gICAgcGxhY2VTaGlwKGNvb3JkLCBkaXJlY3Rpb24sIGxlbikge1xuICAgICAgcmV0dXJuIGdhbWVCb2FyZC5wbGFjZVNoaXAoY29vcmQsIGRpcmVjdGlvbiwgbGVuKVxuICAgIH0sXG5cbiAgICBzaG9vdCh0YXJnZXQsIGNvb3JkKSB7XG4gICAgICB0YXJnZXQuZ2FtZUJvYXJkLnJlY2VpdmVBdHRhY2soY29vcmQpXG4gICAgfVxuICB9XG59IiwiaW1wb3J0IEdhbWVCb2FyZCBmcm9tIFwiLi9HYW1lQm9hcmRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQUlwbGF5ZXIoKSB7XG4gIGNvbnN0IG5hbWUgPSAnQUknXG4gIGNvbnN0IGdhbWVCb2FyZCA9IG5ldyBHYW1lQm9hcmQoKVxuICBsZXQgbGFzdFR1cm5IaXQgPSBmYWxzZVxuICBsZXQgc2hpcERpcmVjdGlvbiA9ICcnXG4gIGxldCBmaXJzdEhpdCA9IFtdXG4gIGxldCBsYXN0SGl0ID0gW11cblxuICBmdW5jdGlvbiBmaW5kTmV4dEF0dGFjayhkaXJlY3Rpb24pIHtcbiAgICBsZXQgbmV4dEF0dGFjayA9IFtdXG4gICAgaWYoZGlyZWN0aW9uID09PSAncmlnaHQnKSBuZXh0QXR0YWNrID0gW2xhc3RIaXRbMF0gKyAxLCBsYXN0SGl0WzFdXVxuICAgIGlmKGRpcmVjdGlvbiA9PT0gJ2xlZnQnKSBuZXh0QXR0YWNrID0gW2xhc3RIaXRbMF0gLSAxLCBsYXN0SGl0WzFdXVxuICAgIGlmKGRpcmVjdGlvbiA9PT0gJ3VwJykgbmV4dEF0dGFjayA9IFtsYXN0SGl0WzBdLCBsYXN0SGl0WzFdIC0gMV1cbiAgICBpZihkaXJlY3Rpb24gPT09ICdkb3duJykgbmV4dEF0dGFjayA9IFtsYXN0SGl0WzBdLCBsYXN0SGl0WzFdICsgMV1cbiAgICByZXR1cm4gbmV4dEF0dGFja1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lLFxuICAgIGdhbWVCb2FyZCxcbiAgICBnZXQgYm9hcmQoKSB7XG4gICAgICByZXR1cm4gZ2FtZUJvYXJkLmJvYXJkXG4gICAgfSxcblxuICAgIHBsYWNlU2hpcChjb29yZCwgZGlyZWN0aW9uLCBsZW4pIHtcbiAgICAgIHJldHVybiBnYW1lQm9hcmQucGxhY2VTaGlwKGNvb3JkLCBkaXJlY3Rpb24sIGxlbilcbiAgICB9LFxuXG4gICAgcGxhY2VSYW5kb21TaGlwKGxlbikge1xuICAgICAgY29uc3QgaWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpXG4gICAgICAvLyBsaW1pdCB0aGUgYW1vdW50IG9mIGF0dGVtcHRzXG4gICAgICBsZXQgYXR0ZW1wdHMgPSAwXG4gICAgICB3aGlsZShhdHRlbXB0cyA8IDEwMDApIHtcbiAgICAgICAgYXR0ZW1wdHMrK1xuICAgICAgICAvLyBkZWNsYXJlIGVtcHR5IGNvb3JkcyBhcnJheVxuICAgICAgICBsZXQgY29vcmRzID0gW11cblxuICAgICAgICAvLyBnZW5lcmF0ZSByYW5kb20gY29vcmRpbmF0ZXNcbiAgICAgICAgY29uc3QgeCA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTApXG4gICAgICAgIGNvbnN0IHkgPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwKVxuXG4gICAgICAgIC8vIHB1c2ggdGhlbSB0byB0aGUgYXJyYXlcbiAgICAgICAgY29vcmRzLnB1c2goeClcbiAgICAgICAgY29vcmRzLnB1c2goeSlcblxuICAgICAgICAvLyBwaWNrIHJhbmRvbSBkaXJlY3Rpb25cbiAgICAgICAgY29uc3QgcG9zc2libGVEaXJlY3Rpb25zID0gWydyaWdodCcsICdkb3duJ11cbiAgICAgICAgY29uc3QgcmFuZG9tRGlyZWN0aW9uID0gcG9zc2libGVEaXJlY3Rpb25zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlRGlyZWN0aW9ucy5sZW5ndGgpXVxuXG4gICAgICAgIC8vIHRyeSB0byBwbGFjZSBzaGlwXG4gICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoY29vcmRzLCByYW5kb21EaXJlY3Rpb24sIGxlbiwgaWQpXG5cbiAgICAgICAgLy8gZ2V0IHRoZSBzaGlwIGxvY2F0aW9uIG9uIHRoZSBib2FyZFxuICAgICAgICBsZXQgbG9jYXRpb24gPSBnYW1lQm9hcmQuYm9hcmQuZmluZChib3ggPT4gYm94LmNvb3JkaW5hdGVzLmV2ZXJ5KChjb29yZCwgaW5kZXgpID0+IGNvb3JkID09PSBjb29yZHNbaW5kZXhdKSlcblxuICAgICAgICAvLyBjaGVjayBpZiBzaGlwIGlzIHByZXNlbnQgYXQgdGhlIGxvY2F0aW9uXG4gICAgICAgIGlmKGxvY2F0aW9uLnNoaXAgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIGNoZWNrIGlmIGl0cyB0aGUgc2hpcCB3ZSBqdXN0IGNyZWF0ZWRcbiAgICAgICAgICBpZihsb2NhdGlvbi5zaGlwLmlkID09PSBpZCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNob290KHRhcmdldCkge1xuICAgICAgLy8gc3RvcmUgdGhlIHRhcmdldCBib2FyZCBhcnJheSBhcyBhIHZhcmlhYmxlXG4gICAgICBjb25zdCB0YXJnZXRCb2FyZCA9IHRhcmdldC5nYW1lQm9hcmQuYm9hcmRcblxuICAgICAgLy8gY2hlY2sgaWYgbGFzdCB0dXJuIHdhcyBhIGhpdFxuICAgICAgaWYobGFzdFR1cm5IaXQpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgd2UgYWxyZWFkeSBrbm93IHRoZSBzaGlwIGRpcmVjdGlvblxuICAgICAgICBpZihzaGlwRGlyZWN0aW9uICE9PSAnJykge1xuICAgICAgICAgIC8vIGtlZXAgc2hvb3RpbmcgaW4gdGhlIHNhbWUgZGlyZWN0aW9uXG5cbiAgICAgICAgICBsZXQgc2hvdEZpcmVkID0gZmFsc2VcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBmaW5kIG5leHQgdGFyZ2V0IGNvb3JkaW5hdGVzIHVzaW5nIHRoZSBkaXJlY3Rpb25cbiAgICAgICAgICBsZXQgbmV4dEF0dGFjayA9IGZpbmROZXh0QXR0YWNrKHNoaXBEaXJlY3Rpb24pXG5cbiAgICAgICAgICAvLyBmaW5kIHRoZSBsb2NhdGlvbiB3aXRoIHRoZSBjb3JyZWN0IGNvb3JkaW5hdGVzXG4gICAgICAgICAgbGV0IGxvY2F0aW9uID0gdGFyZ2V0Qm9hcmQuZmluZChib3ggPT4gYm94LmNvb3JkaW5hdGVzLmV2ZXJ5KChjb29yZCwgaW5kZXgpID0+IGNvb3JkID09PSBuZXh0QXR0YWNrW2luZGV4XSkpXG4gICAgICAgICAgLy8gY2hlY2sgaWYgbG9jYXRpb24gaXMgaW5zaWRlIHRoZSBib2FyZFxuICAgICAgICAgIGlmKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICAvLyBpZiBsb2NhdGlvbiBpc24ndCBhdHRhY2tlZCwgYXR0YWNrIGl0XG4gICAgICAgICAgICBpZighbG9jYXRpb24uYXR0YWNrZWQpIHtcbiAgICAgICAgICAgICAgdGFyZ2V0LmdhbWVCb2FyZC5yZWNlaXZlQXR0YWNrKGxvY2F0aW9uLmNvb3JkaW5hdGVzKVxuICAgICAgICAgICAgICBsYXN0SGl0ID0gbG9jYXRpb24uY29vcmRpbmF0ZXNcbiAgICAgICAgICAgICAgc2hvdEZpcmVkID0gdHJ1ZVxuICAgICAgICAgICAgICAvLyBpZiBzaGlwIHdhcyBoaXQgaW4gdGhpcyBsb2NhdGlvbiwgcmV0dXJuXG4gICAgICAgICAgICAgIGlmKGxvY2F0aW9uLnNoaXApIHtcbiAgICAgICAgICAgICAgICBpZihsb2NhdGlvbi5zaGlwLmlzU3Vuaykge1xuICAgICAgICAgICAgICAgICAgbGFzdFR1cm5IaXQgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgc2hpcERpcmVjdGlvbiA9ICcnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdGlvblxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIGlmIGxvY2F0aW9uIGhhcyBubyBzaGlwLCBjb250aW51ZSB0byBjaGFuZ2UgZGlyZWN0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBsb2NhdGlvbiBpcyBvdXRzaWRlIHRoZSBib2FyZCwgY29udGludWUgdG8gY2hhbmdlIGRpcmVjdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBpZiBpdCBpcyBhdHRhY2tlZCwgZmxpcCB0aGUgZGlyZWN0aW9uIHRvIHRoZSBvdGhlciBzaWRlIGFuZCBoaXQgaXRcbiAgICAgICAgICBpZihzaGlwRGlyZWN0aW9uID09PSAncmlnaHQnKSBzaGlwRGlyZWN0aW9uID0gJ2xlZnQnXG4gICAgICAgICAgZWxzZSBpZihzaGlwRGlyZWN0aW9uID09PSAnbGVmdCcpIHNoaXBEaXJlY3Rpb24gPSAncmlnaHQnXG4gICAgICAgICAgZWxzZSBpZihzaGlwRGlyZWN0aW9uID09PSAndXAnKSBzaGlwRGlyZWN0aW9uID0gJ2Rvd24nXG4gICAgICAgICAgZWxzZSBpZihzaGlwRGlyZWN0aW9uID09PSAnZG93bicpIHNoaXBEaXJlY3Rpb24gPSAndXAnXG4gICAgICAgICAgbGFzdEhpdCA9IGZpcnN0SGl0XG4gICAgICAgICAgaWYobG9jYXRpb24gJiYgIWxvY2F0aW9uLnNoaXApIHJldHVybiBsb2NhdGlvblxuXG5cbiAgICAgICAgICAvLyBpZiBubyBzaG90IHdhcyBmaXJlZCB0aGF0IHR1cm5cbiAgICAgICAgICBpZighc2hvdEZpcmVkKSB7XG4gICAgICAgICAgICAvLyBmaW5kIHRoZSBuZXcgbG9jYXRpb24gZm9yIGF0dGFja1xuICAgICAgICAgICAgbmV4dEF0dGFjayA9IGZpbmROZXh0QXR0YWNrKHNoaXBEaXJlY3Rpb24pXG4gICAgICAgICAgICBsb2NhdGlvbiA9IHRhcmdldEJvYXJkLmZpbmQoYm94ID0+IGJveC5jb29yZGluYXRlcy5ldmVyeSgoY29vcmQsIGluZGV4KSA9PiBjb29yZCA9PT0gbmV4dEF0dGFja1tpbmRleF0pKVxuICAgICAgICAgICAgLy8gYXR0YWNrIGl0XG4gICAgICAgICAgICB0YXJnZXQuZ2FtZUJvYXJkLnJlY2VpdmVBdHRhY2sobG9jYXRpb24uY29vcmRpbmF0ZXMpXG4gICAgICAgICAgICBsYXN0SGl0ID0gbG9jYXRpb24uY29vcmRpbmF0ZXNcbiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvblxuICAgICAgICAgIH1cblxuXG5cbiAgICAgICAgLy8gaWYgd2UgZG9uJ3Qga25vdyB0aGUgZGlyZWN0aW9uLCBmaW5kIGl0XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGZpcnN0WCA9IGZpcnN0SGl0WzBdXG4gICAgICAgICAgbGV0IGZpcnN0WSA9IGZpcnN0SGl0WzFdXG4gICAgICAgICAgbGV0IGFkamFjZW50TG9jYXRpb25zID0gW1xuICAgICAgICAgICAgW2ZpcnN0WCArIDEsIGZpcnN0WV0sXG4gICAgICAgICAgICBbZmlyc3RYLCBmaXJzdFkgKyAxXSxcbiAgICAgICAgICAgIFtmaXJzdFggLSAxLCBmaXJzdFldLFxuICAgICAgICAgICAgW2ZpcnN0WCwgZmlyc3RZIC0gMV1cbiAgICAgICAgICBdXG4gICAgICAgICAgLy8gZ2V0IHRoZSBhZGphY2VudCBib3ggdGhhdCBpc24ndCBhdHRhY2tlZFxuICAgICAgICAgIGxldCBsb2NhdGlvblxuICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBhZGphY2VudExvY2F0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbG9jYXRpb24gPSB0YXJnZXRCb2FyZC5maW5kKGJveCA9PiBib3guY29vcmRpbmF0ZXMuZXZlcnkoKGNvb3JkLCBpbmRleCkgPT4gY29vcmQgPT09IGFkamFjZW50TG9jYXRpb25zW2ldW2luZGV4XSkpXG4gICAgICAgICAgICAvLyBicmVhayB0aGUgbG9vcCB3aGVuIGxvY2F0aW9uIHRoYXQgaXNuJ3QgYXR0YWNrIGZvdW5kXG4gICAgICAgICAgICBpZihsb2NhdGlvbiAmJiAhbG9jYXRpb24uYXR0YWNrZWQpIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGF0dGFjayB0aGUgbG9jYXRpb25cbiAgICAgICAgICB0YXJnZXQuZ2FtZUJvYXJkLnJlY2VpdmVBdHRhY2sobG9jYXRpb24uY29vcmRpbmF0ZXMpXG5cbiAgICAgICAgICAvLyBpZiB0aGUgbG9jYXRpb24gaGFzIHNoaXAgKHdoaWNoIG1lYW5zIGl0J3MgYSBoaXQpXG4gICAgICAgICAgaWYobG9jYXRpb24uc2hpcCkge1xuXG4gICAgICAgICAgICAvLyBpZiB0aGUgc2hpcCBzdW5rLCBtYWtlIG5leHQgYXR0YWNrIHJhbmRvbVxuICAgICAgICAgICAgaWYobG9jYXRpb24uc2hpcC5pc1N1bmspIGxhc3RUdXJuSGl0ID0gZmFsc2VcblxuICAgICAgICAgICAgLy8gZWxzZSBzdG9yZSB0aGUgY29vcmRpbmF0ZXMgYXMgbGFzdCBoaXRcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBsYXN0SGl0ID0gbG9jYXRpb24uY29vcmRpbmF0ZXNcbiAgICAgICAgICAgICAgbGV0IGxhc3RYID0gbGFzdEhpdFswXVxuICAgICAgICAgICAgICBsZXQgbGFzdFkgPSBsYXN0SGl0WzFdXG5cbiAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSBjb3JyZWN0IGRpcmVjdGlvblxuICAgICAgICAgICAgICBpZihsYXN0WCA+IGZpcnN0WCkgc2hpcERpcmVjdGlvbiA9ICdyaWdodCdcbiAgICAgICAgICAgICAgZWxzZSBpZihsYXN0WCA8IGZpcnN0WCkgc2hpcERpcmVjdGlvbiA9ICdsZWZ0J1xuICAgICAgICAgICAgICBlbHNlIGlmKGxhc3RZIDwgZmlyc3RZKSBzaGlwRGlyZWN0aW9uID0gJ3VwJ1xuICAgICAgICAgICAgICBlbHNlIGlmKGxhc3RZID4gZmlyc3RZKSBzaGlwRGlyZWN0aW9uID0gJ2Rvd24nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBsb2NhdGlvblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGxhc3QgdGltZSB3YXNuJ3QgYSBoaXQsIHRha2UgYSByYW5kb20gc2hvdFxuICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICAvLyBkZWNsYXJlIGVtcHR5IGNvb3JkcyBhcnJheVxuICAgICAgICBsZXQgY29vcmRzID0gW11cblxuICAgICAgICAvLyBnZW5lcmF0ZSByYW5kb20gY29vcmRpbmF0ZXNcbiAgICAgICAgY29uc3QgeCA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTApXG4gICAgICAgIGNvbnN0IHkgPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwKVxuXG4gICAgICAgIC8vIHB1c2ggdGhlbSB0byB0aGUgYXJyYXlcbiAgICAgICAgY29vcmRzLnB1c2goeClcbiAgICAgICAgY29vcmRzLnB1c2goeSlcblxuICAgICAgICAvLyBmaW5kIHRoZSBjb3JyZWN0IGxvY2F0aW9uIG9uIHRhcmdldCBib2FyZFxuICAgICAgICBsZXQgbG9jYXRpb24gPSB0YXJnZXRCb2FyZC5maW5kKGJveCA9PiBib3guY29vcmRpbmF0ZXMuZXZlcnkoKGNvb3JkLCBpbmRleCkgPT4gY29vcmQgPT09IGNvb3Jkc1tpbmRleF0pKVxuXG4gICAgICAgIC8vIGlmIHRoZSBsb2NhdGlvbiBpc24ndCBhdHRhY2tlZFxuICAgICAgICBpZighbG9jYXRpb24uYXR0YWNrZWQpIHtcbiAgICAgICAgICAvLyBhdHRhY2sgaXRcbiAgICAgICAgICB0YXJnZXQuZ2FtZUJvYXJkLnJlY2VpdmVBdHRhY2sobG9jYXRpb24uY29vcmRpbmF0ZXMpXG4gICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBzaGlwIGF0IHRoZSBsb2NhdGlvblxuICAgICAgICAgIGlmKGxvY2F0aW9uLnNoaXApIHtcbiAgICAgICAgICAgIC8vIGlmIHNoaXAgc3Vuayh0aGUgc2hpcCB3aXRoIGxlbmd0aCBvZiAxKVxuICAgICAgICAgICAgaWYobG9jYXRpb24uc2hpcC5pc1N1bmspIHJldHVybiBsb2NhdGlvblxuXG4gICAgICAgICAgICAvLyBpZiBzaGlwIGRpZG4ndCBzaW5rXG4gICAgICAgICAgICAvLyBkZWNsYXJlIHRoaXMgdHVybiBhcyBhIGhpdFxuICAgICAgICAgICAgbGFzdFR1cm5IaXQgPSB0cnVlXG4gICAgICAgICAgICAvLyBzdG9yZSB0aGUgY29vcmRpbmF0ZXMgd2hlcmUgaXQgaGl0XG4gICAgICAgICAgICBmaXJzdEhpdCA9IGxvY2F0aW9uLmNvb3JkaW5hdGVzXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBsb2NhdGlvblxuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGxvY2F0aW9uIGlzIGF0dGFja2VkLCByZXBlYXQgdG8gZ2V0IGFub3RoZXIgbG9jYXRpb25cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwibiIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIm5jIiwic2hpcHNVcmwiLCJwbGF5ZXJIaXRzVXJsIiwiQUlIaXRzVXJsIiwiaGVhZGVycyIsImFkZFNoaXBUb0FQSSIsInNoaXBEYXRhIiwicGF5bG9hZCIsImZldGNoIiwibWV0aG9kIiwiYm9keSIsInRoZW4iLCJyZXNwb25zZSIsIm9rIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyb3IiLCJnZXRTaGlwcyIsImNhbGxiYWNrIiwianNvbiIsImFzeW5jIiwidXBkYXRlUGxheWVySGl0c0FQSSIsImhpdHNBcnJheSIsInVwZGF0ZUFJSGl0c0FQSSIsInN0YXJ0R2FtZSIsInBsYXllciIsIkFJIiwiaGl0cyIsInZhbHVlcyIsImZvckVhY2giLCJoaXQiLCJnYW1lQm9hcmQiLCJyZWNlaXZlQXR0YWNrIiwicGxhY2VIb2xkZXIiLCJwbGF5ZXJQbGFjZUhvbGRlciIsIkFJUGxhY2VIb2xkZXIiLCJwbGF5ZXJCb2FyZCIsImdldEVsZW1lbnRCeUlkIiwiQUlCb2FyZCIsImNsYXNzTGlzdCIsImFkZCIsInBsYWNlU2hpcHNUaXRsZSIsImNoYW5nZURpcmVjdGlvbkJ0biIsImxlbmd0aEluZGljYXRvciIsIkFJU2lkZSIsInJlc3RhcnRCdG4iLCJpbm5lckhUTUwiLCJib2FyZCIsImJveCIsInNoaXAiLCJhdHRhY2tlZCIsImFwcGVuZCIsImNvb3JkaW5hdGVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNob290IiwiaXNTdW5rIiwiYmFja2dyb3VuZENvbG9yIiwiQUlTdGF0ZSIsImNvbG9yIiwic2V0VGltZW91dCIsInNoaXBDb29yZGluYXRlcyIsImNvb3JkcyIsImdldEFkamFjZW50Qm94ZXMiLCJhZGphY2VudCIsImlzR2FtZU92ZXIiLCJBSUhpdCIsImluZGV4T2YiLCJ0YXJnZXRCb3giLCJwbGF5ZXJTdGF0ZSIsImN1cnJlbnRCb3giLCJmaW5kIiwiZXZlcnkiLCJjb29yZCIsImN1cnJlbnRCb3hJbmRleCIsImhpdExvY2F0aW9ucyIsInVwZGF0ZVNoaXBzRGV0YWlscyIsInBsYXllck5hbWUiLCJBSU5hbWUiLCJ0ZXh0Q29udGVudCIsInNoaXBzIiwic3Vua1NoaXBzIiwib3ZlcmxheSIsIndpbm5lck92ZXJsYXkiLCJ3aW5uZXJOYW1lIiwiZGlzcGxheSIsIm5hbWUiLCJTaGlwIiwibGVuIiwiZGlyZWN0IiwiYXJndW1lbnRzIiwiZGlyZWN0aW9uIiwiYWRkQ29vcmRpbmF0ZXMiLCJHYW1lQm9hcmQiLCJ0b3RhbEhpdHMiLCJ4IiwieSIsIm5ld1ZhbHVlIiwicGxhY2VTaGlwIiwiY29vcmRzQ29weSIsImNob3NlbkxvY2F0aW9uIiwiYXZhaWxhYmxlIiwiYmF0dGxlc2hpcCIsImNvb3JkaW5hdGVzQ29weSIsImN1cnJlbnRDb29yZHMiLCJhZGphY2VudExvY2F0aW9ucyIsImN1cnJlbnQiLCJmaWx0ZXIiLCJoYXNBcm1lZFNoaXBzIiwiYXJtZWRTaGlwcyIsInBsYXllclNoaXBzIiwiQUlTaGlwcyIsInBvcCIsInNoaXBMZW5zIiwiY3VycmVudFNoaXAiLCJkaXJlY3Rpb25UZXh0IiwiYWxsQm94ZXMiLCJzcXVhcmUiLCJob3ZlcmVkQ29vcmRzIiwic3BsaXQiLCJib3hYIiwiYm94WSIsInNxdWFyZUNvb3JkIiwic3F1YXJlWCIsInNxdWFyZVkiLCJob3ZlcmVkQ29vcmRzU3RyaW5nIiwicXVlcnlTZWxlY3RvckFsbCIsInBsYWNlUmFuZG9tU2hpcCIsInByZXBhcmVHYW1lIiwiUGxheWVyIiwibGFzdFR1cm5IaXQiLCJzaGlwRGlyZWN0aW9uIiwiZmlyc3RIaXQiLCJsYXN0SGl0IiwiZmluZE5leHRBdHRhY2siLCJuZXh0QXR0YWNrIiwiY3J5cHRvIiwicmFuZG9tVVVJRCIsImF0dGVtcHRzIiwiTWF0aCIsImNlaWwiLCJyYW5kb20iLCJwb3NzaWJsZURpcmVjdGlvbnMiLCJyYW5kb21EaXJlY3Rpb24iLCJmbG9vciIsInRhcmdldEJvYXJkIiwiZmlyc3RYIiwiZmlyc3RZIiwibGFzdFgiLCJsYXN0WSIsInNob3RGaXJlZCIsIkFJcGxheWVyIiwicGxheUFnYWluIiwicmVzZXRHYW1lIiwiZGVsZXRlUHJvbWlzZXMiLCJpdGVtSUQiLCJQcm9taXNlIiwiYWxsIiwic3RhdHVzIiwicmVsb2FkIl0sInNvdXJjZVJvb3QiOiIifQ==