(()=>{"use strict";var n={806:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,'@media only screen and (max-width: 1000px) {\n  #page-title {\n    margin-top: 30px;\n    font-size: 75px;\n  }\n\n  #game-container {\n    flex-direction: column;\n    margin-top: 10px;\n  }\n  \n  .player h1 {\n    font-size: 30px\n  }\n\n  .player h2 {\n    font-size: 20px;\n  }\n\n  .rotate {\n    font-size: 15px;\n    padding: 3px 15px;\n  }\n\n  #length-indicator {\n    font-size: 20px;\n  }\n\n  .board {\n    margin: 0 auto;\n    width: 350px;\n    height: 350px;\n  }\n\n  .mobile-hidden {\n    display: none;\n  }\n\n  .ship-hit::after {\n    position: absolute;\n    content: "\\274c";\n    font-size: 27px; \n    color: #FFF;\n  }\n}',"",{version:3,sources:["webpack://./src/styles/media-queries.css"],names:[],mappings:"AAAA;EACE;IACE,gBAAgB;IAChB,eAAe;EACjB;;EAEA;IACE,sBAAsB;IACtB,gBAAgB;EAClB;;EAEA;IACE;EACF;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,eAAe;IACf,iBAAiB;EACnB;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,cAAc;IACd,YAAY;IACZ,aAAa;EACf;;EAEA;IACE,aAAa;EACf;;EAEA;IACE,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,WAAW;EACb;AACF",sourcesContent:['@media only screen and (max-width: 1000px) {\n  #page-title {\n    margin-top: 30px;\n    font-size: 75px;\n  }\n\n  #game-container {\n    flex-direction: column;\n    margin-top: 10px;\n  }\n  \n  .player h1 {\n    font-size: 30px\n  }\n\n  .player h2 {\n    font-size: 20px;\n  }\n\n  .rotate {\n    font-size: 15px;\n    padding: 3px 15px;\n  }\n\n  #length-indicator {\n    font-size: 20px;\n  }\n\n  .board {\n    margin: 0 auto;\n    width: 350px;\n    height: 350px;\n  }\n\n  .mobile-hidden {\n    display: none;\n  }\n\n  .ship-hit::after {\n    position: absolute;\n    content: "\\274c";\n    font-size: 27px; \n    color: #FFF;\n  }\n}'],sourceRoot:""}]);const s=i},884:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,".player h1 {\n  text-align: center;\n  font-size: 40px;\n  margin-bottom: 10px;\n}\n\n.direction {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n}\n\n.player h2 {\n  font-size: 30px;\n}\n\n.rotate {\n  background-color: white;\n  color: black;\n  margin: 0 0 10px 10px;\n  width: max-content;\n  text-align: center;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 5px 15px;\n  cursor: pointer;\n}\n\n.rotate:hover {\n  background-color: rgb(199, 199, 199);\n}\n\n#length-indicator {\n  text-align: center;\n  font-size: 25px;\n}\n\n.pre-game {\n  cursor: pointer;\n}\n\n.hidden {\n  display: none\n}","",{version:3,sources:["webpack://./src/styles/prepare-game.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,YAAY;EACZ,qBAAqB;EACrB,kBAAkB;EAClB,kBAAkB;EAClB,kBAAkB;EAClB,eAAe;EACf,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE;AACF",sourcesContent:[".player h1 {\n  text-align: center;\n  font-size: 40px;\n  margin-bottom: 10px;\n}\n\n.direction {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n}\n\n.player h2 {\n  font-size: 30px;\n}\n\n.rotate {\n  background-color: white;\n  color: black;\n  margin: 0 0 10px 10px;\n  width: max-content;\n  text-align: center;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 5px 15px;\n  cursor: pointer;\n}\n\n.rotate:hover {\n  background-color: rgb(199, 199, 199);\n}\n\n#length-indicator {\n  text-align: center;\n  font-size: 25px;\n}\n\n.pre-game {\n  cursor: pointer;\n}\n\n.hidden {\n  display: none\n}"],sourceRoot:""}]);const s=i},772:(n,e,t)=>{t.d(e,{Z:()=>p});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),s=t(667),c=t.n(s),d=new URL(t(265),t.b),l=i()(r()),A=c()(d);l.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url("+A+');\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n  margin-top: 50px;\n\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  width: 500px;\n  height: 500px;\n  transition: all 0.1s ease-in-out;\n}\n\n.box {\n  border: 1px solid black;\n}\n\n.AI-box {\n  cursor: crosshair;\n}\n\n.AI-box:hover {\n  background-color: #6200ff;\n}\n\n.details h1 {\n  font-size: 60px\n}\n\n.details p {\n  font-size: 30px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n}\n\n.highlight {\n  background-color: #6200ff;\n}\n\n.contain-ship {\n  background-color: azure;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}\n\n.ship-hit {\n  background-color: #2354da;\n}\n\n.ship-hit::after {\n  position: absolute;\n  content: "\\274c";\n  font-size: 40px; \n  color: #FFF;\n}\n\n.ship-hit:hover {\n  cursor: not-allowed;\n  background-color: #2354da;\n}\n\n\n\n',"",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;EACE,mDAAgD;EAChD,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,mBAAmB;EACnB,gBAAgB;;AAElB;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,yBAAyB;EACzB,YAAY;EACZ,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE;AACF;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gCAAgC;AAClC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,yBAAyB;AAC3B",sourcesContent:['* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url(../assets/images/background.jpg);\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n  margin-top: 50px;\n\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  width: 500px;\n  height: 500px;\n  transition: all 0.1s ease-in-out;\n}\n\n.box {\n  border: 1px solid black;\n}\n\n.AI-box {\n  cursor: crosshair;\n}\n\n.AI-box:hover {\n  background-color: #6200ff;\n}\n\n.details h1 {\n  font-size: 60px\n}\n\n.details p {\n  font-size: 30px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n}\n\n.highlight {\n  background-color: #6200ff;\n}\n\n.contain-ship {\n  background-color: azure;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}\n\n.ship-hit {\n  background-color: #2354da;\n}\n\n.ship-hit::after {\n  position: absolute;\n  content: "\\274c";\n  font-size: 40px; \n  color: #FFF;\n}\n\n.ship-hit:hover {\n  cursor: not-allowed;\n  background-color: #2354da;\n}\n\n\n\n'],sourceRoot:""}]);const p=l},561:(n,e,t)=>{t.d(e,{Z:()=>p});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),s=t(667),c=t.n(s),d=new URL(t(265),t.b),l=i()(r()),A=c()(d);l.push([n.id,".overlay {\n  position: fixed;\n  display: none;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.winner-overlay {\n  position: fixed;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 30px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: url("+A+");\n  width: 600px;\n  height: 300px;\n  box-shadow: 2px 0px 10px #242424;\n}\n\n.winner-overlay h1 {\n  font-size: 60px\n}\n\n.winner-overlay button {\n  border-style: none;\n  background-color: #2389da;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 10px 25px;\n  cursor: pointer;\n}\n\n.winner-overlay button:hover {\n  background-color: #6200ff;\n}\n\n.winner-overlay button:disabled {\n  color: rgb(39, 39, 39);\n}\n\n.winner-overlay button:disabled:hover {\n  background-color: #2389da;\n  cursor: wait;\n}\n\n","",{version:3,sources:["webpack://./src/styles/winner-overlay.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,aAAa;EACb,MAAM;EACN,OAAO;EACP,YAAY;EACZ,aAAa;EACb,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;EACb,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,mDAAgD;EAChD,YAAY;EACZ,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE;AACF;;AAEA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;EACzB,YAAY;AACd",sourcesContent:[".overlay {\n  position: fixed;\n  display: none;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.winner-overlay {\n  position: fixed;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 30px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: url(../assets/images/background.jpg);\n  width: 600px;\n  height: 300px;\n  box-shadow: 2px 0px 10px #242424;\n}\n\n.winner-overlay h1 {\n  font-size: 60px\n}\n\n.winner-overlay button {\n  border-style: none;\n  background-color: #2389da;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 10px 25px;\n  cursor: pointer;\n}\n\n.winner-overlay button:hover {\n  background-color: #6200ff;\n}\n\n.winner-overlay button:disabled {\n  color: rgb(39, 39, 39);\n}\n\n.winner-overlay button:disabled:hover {\n  background-color: #2389da;\n  cursor: wait;\n}\n\n"],sourceRoot:""}]);const p=l},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],d=o.base?c[0]+o.base:c[0],l=a[d]||0,A="".concat(d," ").concat(l);a[d]=l+1;var p=t(A),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var u=r(h,o);o.byIndex=s,e.splice(s,0,{identifier:A,updater:u,references:1})}i.push(A)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=o(n,r),d=0;d<a.length;d++){var l=t(a[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},265:(n,e,t)=>{n.exports=t.p+"assets/images/background.jpg"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");o.length&&(n=o[o.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const n="https://641ff86d82bea25f6df7b4b9.mockapi.io/ships",e="https://641ff86d82bea25f6df7b4b9.mockapi.io/recievedHits",o={"Content-Type":"application/json"};function r(e){const t=JSON.stringify(e);fetch(n,{method:"POST",headers:o,body:t}).then((n=>{n.ok||console.log("Failed to add ship.")})).catch((n=>{console.log("Error: ",n)}))}function a(e){return fetch(`${n}/${e}`,{method:"DELETE",headers:o}).then((n=>{if(!n.ok)throw new Error("Network response was not ok")})).catch((n=>{console.error("There was a problem deleting the items:",n)}))}async function i(n,t){const r=JSON.stringify([n,t]);return await s(1),fetch(e,{method:"POST",headers:o,body:r}).then((n=>{n.ok||console.log("failed to record hit")})).catch((n=>{console.log("Error: ",n)}))}function s(n){return fetch(`${e}/${n}`,{method:"DELETE",headers:o}).then((n=>{if(!n.ok)throw console.log(n),new Error("Network response was not ok")})).catch((n=>{console.error("There was a problem deleting the items:",n)}))}async function c(n,t){var r;await(r=function(n){0===n.length&&function(){const n=JSON.stringify([]);fetch(e,{method:"POST",headers:o,body:n}).then((n=>{n.ok||console.log("failed to add placeHolder")})).catch((n=>{console.log("Error: ",n)}))}()},fetch(e,{method:"GET",headers:o}).then((n=>n.json())).then((n=>{r(n)})).catch((n=>{console.log("Error: ",n)})));const a=document.getElementById("player-board"),s=document.getElementById("AI-board");document.getElementById("page-title").classList.add("mobile-hidden");const c=document.querySelector(".player > h1"),d=document.querySelector(".direction"),l=document.getElementById("length-indicator"),A=document.querySelector("#AI-player");c.classList.add("hidden"),d.classList.add("hidden"),l.classList.add("hidden"),A.classList.remove("hidden"),a.innerHTML="",s.innerHTML="";for(let e=0;e<n.board.length;e++){const t=document.createElement("div");t.id=`p${e}`,t.classList.add("box"),n.board[e].ship&&t.classList.add("contain-ship"),a.append(t)}for(let e=0;e<t.board.length;e++){const o=document.createElement("div");o.id=t.board[e].coordinates,o.classList.add("AI-box","box"),o.addEventListener("click",(async()=>{if(t.board[e].attacked)return;n.shoot(t,t.board[e].coordinates),t.board[e].ship?(o.classList.add("ship-hit"),t.board[e].ship.isSunk&&(s.style.backgroundColor="red",g.style.color="red",setTimeout((()=>{s.style.backgroundColor="#2389da",g.style.color="#fff"}),50),t.board[e].ship.shipCoordinates.forEach((n=>{t.gameBoard.getAdjacentBoxes(n).forEach((n=>{document.getElementById(n.coordinates).classList.add("attacked"),n.attacked=!0}))})),m(),await i(n.gameBoard.hitLocations,t.gameBoard.hitLocations))):o.classList.add("attacked");const r=n.board.indexOf(t.shoot(n)),c=document.querySelector(`#player-board > #p${r}`);n.board[r].ship?(c.classList.add("ship-hit"),n.board[r].ship.isSunk&&(a.style.backgroundColor="red",u.style.color="red",setTimeout((()=>{a.style.backgroundColor="#2389da",u.style.color="#fff"}),50),n.board[r].ship.shipCoordinates.forEach((e=>{n.gameBoard.getAdjacentBoxes(e).forEach((e=>{const t=n.board.find((n=>n.coordinates.every(((n,t)=>n===e.coordinates[t])))),o=n.board.indexOf(t);document.getElementById(`p${o}`).classList.add("attacked"),e.attacked=!0}))})),m(),i(n.gameBoard.hitLocations,t.gameBoard.hitLocations))):c.classList.add("attacked"),f()})),s.append(o)}const p=document.querySelector("#player-details h1"),h=document.querySelector("#AI-details h1"),u=document.querySelector("#player-details p"),g=document.querySelector("#AI-details p");function f(){u.textContent="Ships alive: "+(n.gameBoard.ships.length-n.gameBoard.sunkShips.length),g.textContent="Ships alive: "+(t.gameBoard.ships.length-t.gameBoard.sunkShips.length)}function m(){const e=document.querySelector(".overlay"),o=document.querySelector(".winner-overlay"),r=document.querySelector(".winner-overlay > h1");n.gameBoard.ships.length===n.gameBoard.sunkShips.length?(e.style.display="block",r.textContent="Computer won!",o.style.display="flex"):t.gameBoard.ships.length===t.gameBoard.sunkShips.length&&(e.style.display="block",r.textContent="Player won!",o.style.display="flex")}p.textContent=n.name,p.classList.add("mobile-hidden"),h.textContent=t.name,h.classList.add("mobile-hidden"),f()}function d(n,e){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;const o=n,r=[],a=e;let i=0,s=!1;return{get length(){return o},get direction(){return a},get shipCoordinates(){return r},get id(){return t},get hits(){return i},get isSunk(){return s},addCoordinates(n){r.push(n)},hit(){i++,i===o&&(s=!0)}}}function l(){let n=[],e=[],t=[],o=[],r=0,a=1,i=1;for(let e=0;e<100;e++){let e={coordinates:[a,i],ship:null,attacked:!1,available:!0};n.push(e),a++,a>10&&(a=1,i++)}return{get board(){return n},get hitLocations(){return o},get sunkShips(){return t},get totalHits(){return r},get ships(){return e},set ships(n){e=n},placeShip(t,o,r){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;if("right"===o&&t[0]+r>11)return"ship exceeding boundaries";if("down"===o&&t[1]+r>11)return"ship exceeding boundaries";let i=[...t];for(let e=0;e<r;e++){0!==e&&("right"===o?i[0]++:i[1]++);let t=n.find((n=>n.coordinates.every(((n,e)=>n===i[e]))));if(!t)return"No such coordinates";if(!t.available)return"Some of the space is unavailable"}const s=new d(r,o,a);e.push(s);let c=[...t];for(let n=0;n<r;n++){let n=[...c];"right"===o?c[0]++:c[1]++,s.addCoordinates(n)}for(let e=0;e<r;e++){0!==e&&("right"===o?t[0]++:t[1]++);let[r,a]=t,i=[[r-1,a],[r+1,a],[r-1,a+1],[r-1,a-1],[r+1,a+1],[r+1,a-1],[r,a+1],[r,a-1]],c=n.find((n=>n.coordinates.every(((n,e)=>n===t[e]))));c.ship=s,c.ship.coordinates=c.coordinates,c.available=!1,i.forEach((e=>{let t=n.find((n=>n.coordinates.every(((n,t)=>n===e[t]))));t&&(t.available=!1)}))}},receiveAttack(e){const a=n.find((n=>n.coordinates.every(((n,t)=>n===e[t]))));void 0===a||a.attacked||(a.attacked=!0,r++,a.ship&&(a.ship.hit(),a.ship.isSunk&&t.push(a.ship)),o.push(e))},getAdjacentBoxes(n){const[e,t]=n;return[[e-1,t],[e+1,t],[e-1,t+1],[e-1,t-1],[e+1,t+1],[e+1,t-1],[e,t+1],[e,t-1]].map((n=>this.board.find((e=>e.coordinates.every(((e,t)=>e===n[t])))))).filter((n=>void 0!==n))},hasArmedShips(){let n=!1;return e.forEach((e=>{e.isSunk||(n=!0)})),n}}}var A=t(379),p=t.n(A),h=t(795),u=t.n(h),g=t(569),f=t.n(g),m=t(565),E=t.n(m),b=t(216),C=t.n(b),y=t(589),B=t.n(y),x=t(772),v={};v.styleTagTransform=B(),v.setAttributes=E(),v.insert=f().bind(null,"head"),v.domAPI=u(),v.insertStyleElement=C(),p()(x.Z,v),x.Z&&x.Z.locals&&x.Z.locals;var k=t(561),w={};w.styleTagTransform=B(),w.setAttributes=E(),w.insert=f().bind(null,"head"),w.domAPI=u(),w.insertStyleElement=C(),p()(k.Z,w),k.Z&&k.Z.locals&&k.Z.locals;var S=t(884),I={};I.styleTagTransform=B(),I.setAttributes=E(),I.insert=f().bind(null,"head"),I.domAPI=u(),I.insertStyleElement=C(),p()(S.Z,I),S.Z&&S.Z.locals&&S.Z.locals;var L=t(806),z={};z.styleTagTransform=B(),z.setAttributes=E(),z.insert=f().bind(null,"head"),z.domAPI=u(),z.insertStyleElement=C(),p()(L.Z,z),L.Z&&L.Z.locals&&L.Z.locals,async function(e,t){var i;await(i=function(n){if(n.length>2)for(let e=n.length;e>=2;e--)a(e),n.pop(),console.log(n.length);if(2===n.length){const o=Object.values(n[0]),r=Object.values(n[1]);o.pop(),r.pop(),o.forEach((n=>{e.placeShip(n.shipCoordinates[0],n.direction,n.length)})),r.forEach((n=>{t.placeShip(n.shipCoordinates[0],n.direction,n.length)})),c(e,t)}},void fetch(n,{method:"GET",headers:o}).then((n=>n.json())).then((n=>{i(n)})).catch((n=>{console.log("Error: ",n)})));const s=document.getElementById("player-board"),d=document.getElementById("ship-length"),l=[5,5,3,2,2,2,1];let A="right",p=0;const h=document.getElementById("direction-text");document.querySelector(".rotate").addEventListener("click",(()=>{"right"===A?A="down":"down"===A&&(A="right"),h.textContent=A}));for(let n=0;n<e.board.length;n++){const o=document.createElement("div");o.id=e.board[n].coordinates,o.classList.add("box","pre-game"),o.addEventListener("mouseover",(()=>{u.forEach((n=>{n.classList.remove("highlight");const e=o.id.split(","),t=+e[0],r=+e[1],a=n.id.split(","),i=+a[0],s=+a[1];if("right"===A){if(t<=i&&i<t+l[p]&&s===r){if(t+l[p]>11)return;n.classList.add("highlight")}}else if("down"===A&&r<=s&&s<r+l[p]&&i===t){if(r+l[p]>11)return;n.classList.add("highlight")}}))})),o.addEventListener("click",(()=>{const n=o.id.split(","),a=[];a.push(+n[0]),a.push(+n[1]),e.placeShip(a,A,l[p]),e.gameBoard.ships.length>p&&(p++,d.textContent=l[p],document.querySelectorAll(".highlight").forEach((n=>{n.classList.add("contain-ship")}))),l[p]||(r(e.gameBoard.ships),t.placeRandomShip(1),t.placeRandomShip(2),t.placeRandomShip(2),t.placeRandomShip(2),t.placeRandomShip(3),t.placeRandomShip(5),t.placeRandomShip(5),r(t.gameBoard.ships),c(e,t))})),s.append(o)}const u=document.querySelectorAll(".pre-game")}(function(n){const e=new l;return{name:"player",gameBoard:e,get board(){return e.board},placeShip:(n,t,o)=>e.placeShip(n,t,o),shoot(n,e){n.gameBoard.receiveAttack(e)}}}(),function(){const n=new l;let e=!1,t="",o=[],r=[];function a(n){let e=[];return"right"===n&&(e=[r[0]+1,r[1]]),"left"===n&&(e=[r[0]-1,r[1]]),"up"===n&&(e=[r[0],r[1]-1]),"down"===n&&(e=[r[0],r[1]+1]),e}return{name:"AI",gameBoard:n,get board(){return n.board},placeShip:(e,t,o)=>n.placeShip(e,t,o),placeRandomShip(e){const t=crypto.randomUUID();let o=0;for(;o<1e3;){o++;let r=[];const a=Math.ceil(10*Math.random()),i=Math.ceil(10*Math.random());r.push(a),r.push(i);const s=["right","down"],c=s[Math.floor(Math.random()*s.length)];n.placeShip(r,c,e,t);let d=n.board.find((n=>n.coordinates.every(((n,e)=>n===r[e]))));if(null!=d.ship&&d.ship.id===t)return}},shoot(n){const i=n.gameBoard.board;if(e){if(""===t){let a,s=o[0],c=o[1],d=[[s+1,c],[s,c+1],[s-1,c],[s,c-1]];for(let n=0;n<d.length&&(a=i.find((e=>e.coordinates.every(((e,t)=>e===d[n][t])))),!a||a.attacked);n++);if(n.gameBoard.receiveAttack(a.coordinates),a.ship)if(a.ship.isSunk)e=!1;else{r=a.coordinates;let n=r[0],e=r[1];n>s?t="right":n<s?t="left":e<c?t="up":e>c&&(t="down")}return a}{let s=!1,c=a(t),d=i.find((n=>n.coordinates.every(((n,e)=>n===c[e]))));if(d&&!d.attacked&&(n.gameBoard.receiveAttack(d.coordinates),r=d.coordinates,s=!0,d.ship))return d.ship.isSunk&&(e=!1,t=""),d;if("right"===t?t="left":"left"===t?t="right":"up"===t?t="down":"down"===t&&(t="up"),r=o,d&&!d.ship)return d;if(!s)return c=a(t),d=i.find((n=>n.coordinates.every(((n,e)=>n===c[e])))),n.gameBoard.receiveAttack(d.coordinates),r=d.coordinates,d}}for(;;){let t=[];const r=Math.ceil(10*Math.random()),a=Math.ceil(10*Math.random());t.push(r),t.push(a);let s=i.find((n=>n.coordinates.every(((n,e)=>n===t[e]))));if(!s.attacked){if(n.gameBoard.receiveAttack(s.coordinates),s.ship){if(s.ship.isSunk)return s;e=!0,o=s.coordinates}return s}}}}}());const T=document.querySelector(".winner-overlay > button"),j=document.querySelector(".overlay"),M=document.querySelector(".winner-overlay"),Z=document.getElementById("player-board"),q=document.querySelector("#AI-player"),F=document.getElementById("AI-board");T.addEventListener("click",(async()=>{T.setAttribute("disabled",!0),await a(1),j.style.display="none",M.style.display="none",T.removeAttribute("disabled"),q.classList.add("hidden"),Z.innerHTML="",F.innerHTML="",window.location.reload(),s(1)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,