(()=>{"use strict";var e={772:(e,t,n)=>{n.d(t,{Z:()=>p});var r=n(537),a=n.n(r),o=n(645),i=n.n(o),c=n(667),s=n.n(c),d=new URL(n(265),n.b),l=i()(a()),u=s()(d);l.push([e.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url("+u+");\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  margin-top: 50px;\n  width: 500px;\n  height: 500px;\n}\n\n.box {\n  border: 1px solid black;\n  cursor: crosshair;\n}\n\n.box:hover {\n  background-color: #6200ff;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;EACE,mDAAgD;EAChD,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,yBAAyB;EACzB,gBAAgB;EAChB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;AAC3B",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url(../assets/images/background.jpg);\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  margin-top: 50px;\n  width: 500px;\n  height: 500px;\n}\n\n.box {\n  border: 1px solid black;\n  cursor: crosshair;\n}\n\n.box:hover {\n  background-color: #6200ff;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}"],sourceRoot:""}]);const p=l},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),t.push(l))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],l=o[d]||0,u="".concat(d," ").concat(l);o[d]=l+1;var p=n(u),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(h);else{var A=a(h,r);r.byIndex=c,t.splice(c,0,{identifier:u,updater:A,references:1})}i.push(u)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var c=n(o[i]);t[c].references--}for(var s=r(e,a),d=0;d<o.length;d++){var l=n(o[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},265:(e,t,n)=>{e.exports=n.p+"assets/images/background.jpg"}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{function e(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const n=e;let r=0,a=!1;return{get length(){return n},get id(){return t},get hits(){return r},get isSunk(){return a},hit(){r++,r===n&&(a=!0)}}}function t(){let t=[],n=[],r=[],a=0,o=1,i=1;for(let e=0;e<100;e++){let e={coordinates:[o,i],ship:null,attacked:!1,available:!0};t.push(e),o++,o>10&&(o=1,i++)}return{get board(){return t},get sunkShips(){return r},get totalHits(){return a},get ships(){return n},placeShip(r,a,o){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;if("right"===a&&r[0]+o>10)return"ship exceeding boundaries";if("up"===a&&r[1]-o<1)return"ship exceeding boundaries";let c=[...r];for(let e=0;e<o;e++){0!==e&&("right"===a?c[0]++:c[1]--);let n=t.find((e=>e.coordinates.every(((e,t)=>e===c[t]))));if(!n)return"No such coordinates";if(!n.available)return"Some of the space is unavailable"}const s=new e(o,i);n.push(s);for(let e=0;e<o;e++){0!==e&&("right"===a?r[0]++:r[1]--);let n=[[r[0]-1,r[1]],[r[0]+1,r[1]],[r[0]-1,r[1]+1],[r[0]-1,r[1]-1],[r[0]+1,r[1]-1],[r[0]+1,r[1]+1],[r[0],r[1]+1],[r[0],r[1]-1]],o=t.find((e=>e.coordinates.every(((e,t)=>e===r[t]))));o.ship=s,o.available=!1,n.forEach((e=>{let n=t.find((t=>t.coordinates.every(((t,n)=>t===e[n]))));n&&(n.available=!1)}))}},receiveAttack(e){const n=t.find((t=>t.coordinates.every(((t,n)=>t===e[n]))));void 0===n||n.attacked||(n.attacked=!0,a++,n.ship&&(n.ship.hit(),n.ship.isSunk&&r.push(n.ship)))},hasArmedShips(){let e=!1;return n.forEach((t=>{t.isSunk||(e=!0)})),e}}}var r=n(379),a=n.n(r),o=n(795),i=n.n(o),c=n(569),s=n.n(c),d=n(565),l=n.n(d),u=n(216),p=n.n(u),h=n(589),A=n.n(h),g=n(772),f={};f.styleTagTransform=A(),f.setAttributes=l(),f.insert=s().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=p(),a()(g.Z,f),g.Z&&g.Z.locals&&g.Z.locals,function(){const e=function(e){const n=new t;return{name:"player1",gameBoard:n,get board(){return n.board},placeShip(e,t,r){n.placeShip(e,t,r)},shoot(e,t){e.gameBoard.receiveAttack(t)}}}(),n=function(){const e=new t;return{name:"AI",gameBoard:e,get board(){return e.board},placeShip(t){const n=crypto.randomUUID();for(;;){let r=[];const a=Math.ceil(10*Math.random()),o=Math.ceil(10*Math.random());r.push(a),r.push(o);const i=["right","up"],c=i[Math.floor(Math.random()*i.length)];e.placeShip(r,c,t,n);let s=e.board.find((e=>e.coordinates.every(((e,t)=>e===r[t]))));if(null!=s.ship&&s.ship.id===n)return}},shoot(e){for(;;){let t=[];const n=Math.ceil(10*Math.random()),r=Math.ceil(10*Math.random());t.push(n),t.push(r);let a=e.gameBoard.board.find((e=>e.coordinates.every(((e,n)=>e===t[n]))));if(!a.attacked)return e.gameBoard.receiveAttack(a.coordinates),a}}}}();e.placeShip([1,1],"right",1),e.placeShip([1,3],"right",2),e.placeShip([1,5],"right",3),e.placeShip([1,7],"right",4),e.placeShip([1,9],"right",5),e.placeShip([10,10],"up",6),n.placeShip(1),n.placeShip(2),n.placeShip(5),n.placeShip(5);const r=document.getElementById("player-board"),a=document.getElementById("AI-board");for(let t=0;t<e.board.length;t++){const n=document.createElement("div");n.id=`num${t}`,n.classList.add("box"),e.board[t].ship&&n.classList.add("attacked"),r.append(n)}for(let t=0;t<n.board.length;t++){const r=document.createElement("div");r.classList.add("box"),n.board[t].ship&&r.classList.add("attacked"),r.addEventListener("click",(()=>{if(n.board[t].attacked)return;e.shoot(n,n.board[t].coordinates),r.classList.add("attacked");const a=e.board.indexOf(n.shoot(e));document.querySelector(`#player-board > #num${a}`).classList.add("attacked")})),a.append(r)}const o=document.querySelector("#player-details h1"),i=document.querySelector("#AI-details h1"),c=document.querySelector("#player-details p"),s=document.querySelector("#AI-details p");o.textContent=e.name,i.textContent=n.name,c.textContent="Ships alive: "+(e.gameBoard.ships.length-e.gameBoard.sunkShips.length),s.textContent="Ships alive: "+(n.gameBoard.ships.length-n.gameBoard.sunkShips.length)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,