(()=>{"use strict";var n={806:(n,e,t)=>{t.d(e,{Z:()=>i});var o=t(537),r=t.n(o),A=t(645),a=t.n(A)()(r());a.push([n.id,'@media only screen and (max-width: 1000px) {\n  #page-title {\n    margin-top: 30px;\n    font-size: 75px;\n  }\n\n  #game-container {\n    flex-direction: column;\n    margin-top: 10px;\n  }\n  \n  .player h1 {\n    font-size: 30px\n  }\n\n  .player h2 {\n    font-size: 20px;\n  }\n\n  .rotate {\n    font-size: 15px;\n    padding: 3px 15px;\n  }\n\n  #length-indicator {\n    font-size: 20px;\n  }\n\n  .board {\n    margin: 0 auto;\n    width: 350px;\n    height: 350px;\n  }\n\n  .mobile-hidden {\n    display: none;\n  }\n\n  .ship-hit::after {\n    position: absolute;\n    content: "\\274c";\n    font-size: 27px; \n    color: #FFF;\n  }\n}',"",{version:3,sources:["webpack://./src/styles/media-queries.css"],names:[],mappings:"AAAA;EACE;IACE,gBAAgB;IAChB,eAAe;EACjB;;EAEA;IACE,sBAAsB;IACtB,gBAAgB;EAClB;;EAEA;IACE;EACF;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,eAAe;IACf,iBAAiB;EACnB;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,cAAc;IACd,YAAY;IACZ,aAAa;EACf;;EAEA;IACE,aAAa;EACf;;EAEA;IACE,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,WAAW;EACb;AACF",sourcesContent:['@media only screen and (max-width: 1000px) {\n  #page-title {\n    margin-top: 30px;\n    font-size: 75px;\n  }\n\n  #game-container {\n    flex-direction: column;\n    margin-top: 10px;\n  }\n  \n  .player h1 {\n    font-size: 30px\n  }\n\n  .player h2 {\n    font-size: 20px;\n  }\n\n  .rotate {\n    font-size: 15px;\n    padding: 3px 15px;\n  }\n\n  #length-indicator {\n    font-size: 20px;\n  }\n\n  .board {\n    margin: 0 auto;\n    width: 350px;\n    height: 350px;\n  }\n\n  .mobile-hidden {\n    display: none;\n  }\n\n  .ship-hit::after {\n    position: absolute;\n    content: "\\274c";\n    font-size: 27px; \n    color: #FFF;\n  }\n}'],sourceRoot:""}]);const i=a},884:(n,e,t)=>{t.d(e,{Z:()=>i});var o=t(537),r=t.n(o),A=t(645),a=t.n(A)()(r());a.push([n.id,".player h1 {\n  text-align: center;\n  font-size: 40px;\n  margin-bottom: 10px;\n}\n\n.direction {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n}\n\n.player h2 {\n  font-size: 30px;\n}\n\n.rotate {\n  background-color: white;\n  color: black;\n  margin: 0 0 10px 10px;\n  width: max-content;\n  text-align: center;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 5px 15px;\n  cursor: pointer;\n}\n\n.rotate:hover {\n  background-color: rgb(199, 199, 199);\n}\n\n#length-indicator {\n  text-align: center;\n  font-size: 25px;\n}\n\n.pre-game {\n  cursor: pointer;\n}\n\n.hidden {\n  display: none\n}","",{version:3,sources:["webpack://./src/styles/prepare-game.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,YAAY;EACZ,qBAAqB;EACrB,kBAAkB;EAClB,kBAAkB;EAClB,kBAAkB;EAClB,eAAe;EACf,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE;AACF",sourcesContent:[".player h1 {\n  text-align: center;\n  font-size: 40px;\n  margin-bottom: 10px;\n}\n\n.direction {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n}\n\n.player h2 {\n  font-size: 30px;\n}\n\n.rotate {\n  background-color: white;\n  color: black;\n  margin: 0 0 10px 10px;\n  width: max-content;\n  text-align: center;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 5px 15px;\n  cursor: pointer;\n}\n\n.rotate:hover {\n  background-color: rgb(199, 199, 199);\n}\n\n#length-indicator {\n  text-align: center;\n  font-size: 25px;\n}\n\n.pre-game {\n  cursor: pointer;\n}\n\n.hidden {\n  display: none\n}"],sourceRoot:""}]);const i=a},262:(n,e,t)=>{t.d(e,{Z:()=>i});var o=t(537),r=t.n(o),A=t(645),a=t.n(A)()(r());a.push([n.id,".ship-list {\n  display: flex;\n  flex-direction: column;\n  row-gap: 15px;\n  background-color: #2389da;\n  width: 400px;\n  height: 500px;\n}\n\n.ship-list h1 {\n  text-align: center;\n}\n\n.ship {\n  display: flex;\n  \n}\n\n.square {\n  width: 50px;\n  height: 50px;\n  border: 1px solid black;\n  background-color: azure;\n}","",{version:3,sources:["webpack://./src/styles/ship-list.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,aAAa;EACb,yBAAyB;EACzB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;;AAEf;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,uBAAuB;EACvB,uBAAuB;AACzB",sourcesContent:[".ship-list {\n  display: flex;\n  flex-direction: column;\n  row-gap: 15px;\n  background-color: #2389da;\n  width: 400px;\n  height: 500px;\n}\n\n.ship-list h1 {\n  text-align: center;\n}\n\n.ship {\n  display: flex;\n  \n}\n\n.square {\n  width: 50px;\n  height: 50px;\n  border: 1px solid black;\n  background-color: azure;\n}"],sourceRoot:""}]);const i=a},772:(n,e,t)=>{t.d(e,{Z:()=>d});var o=t(537),r=t.n(o),A=t(645),a=t.n(A),i=t(667),s=t.n(i),c=new URL(t(265),t.b),l=a()(r()),p=s()(c);l.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url("+p+');\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n  margin-top: 50px;\n\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  width: 500px;\n  height: 500px;\n  transition: all 0.1s ease-in-out;\n}\n\n.box {\n  border: 1px solid black;\n}\n\n.AI-box {\n  cursor: crosshair;\n}\n\n.AI-box:hover {\n  background-color: #6200ff;\n}\n\n.details h1 {\n  font-size: 60px\n}\n\n.details p {\n  font-size: 30px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n}\n\n.highlight {\n  background-color: #6200ff;\n}\n\n.contain-ship {\n  background-color: azure;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}\n\n.ship-hit {\n  background-color: #2354da;\n}\n\n.ship-hit::after {\n  position: absolute;\n  content: "\\274c";\n  font-size: 40px; \n  color: #FFF;\n}\n\n.ship-hit:hover {\n  cursor: not-allowed;\n  background-color: #2354da;\n}\n\n\n\n',"",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;EACE,mDAAgD;EAChD,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,mBAAmB;EACnB,gBAAgB;;AAElB;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,yBAAyB;EACzB,YAAY;EACZ,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE;AACF;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gCAAgC;AAClC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,yBAAyB;AAC3B",sourcesContent:['* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url(../assets/images/background.jpg);\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n  margin-top: 50px;\n\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  width: 500px;\n  height: 500px;\n  transition: all 0.1s ease-in-out;\n}\n\n.box {\n  border: 1px solid black;\n}\n\n.AI-box {\n  cursor: crosshair;\n}\n\n.AI-box:hover {\n  background-color: #6200ff;\n}\n\n.details h1 {\n  font-size: 60px\n}\n\n.details p {\n  font-size: 30px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n}\n\n.highlight {\n  background-color: #6200ff;\n}\n\n.contain-ship {\n  background-color: azure;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}\n\n.ship-hit {\n  background-color: #2354da;\n}\n\n.ship-hit::after {\n  position: absolute;\n  content: "\\274c";\n  font-size: 40px; \n  color: #FFF;\n}\n\n.ship-hit:hover {\n  cursor: not-allowed;\n  background-color: #2354da;\n}\n\n\n\n'],sourceRoot:""}]);const d=l},561:(n,e,t)=>{t.d(e,{Z:()=>d});var o=t(537),r=t.n(o),A=t(645),a=t.n(A),i=t(667),s=t.n(i),c=new URL(t(265),t.b),l=a()(r()),p=s()(c);l.push([n.id,".overlay {\n  position: fixed;\n  display: none;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.winner-overlay {\n  position: fixed;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 30px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: url("+p+");\n  width: 600px;\n  height: 300px;\n  box-shadow: 2px 0px 10px #242424;\n}\n\n.winner-overlay h1 {\n  font-size: 60px\n}\n\n.winner-overlay p {\n  background-color: #2389da;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 10px 25px;\n  cursor: pointer;\n}\n\n.winner-overlay p:hover {\n  background-color: #6200ff;\n}\n\n","",{version:3,sources:["webpack://./src/styles/winner-overlay.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,aAAa;EACb,MAAM;EACN,OAAO;EACP,YAAY;EACZ,aAAa;EACb,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;EACb,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,mDAAgD;EAChD,YAAY;EACZ,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE;AACF;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B",sourcesContent:[".overlay {\n  position: fixed;\n  display: none;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.winner-overlay {\n  position: fixed;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 30px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: url(../assets/images/background.jpg);\n  width: 600px;\n  height: 300px;\n  box-shadow: 2px 0px 10px #242424;\n}\n\n.winner-overlay h1 {\n  font-size: 60px\n}\n\n.winner-overlay p {\n  background-color: #2389da;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 10px 25px;\n  cursor: pointer;\n}\n\n.winner-overlay p:hover {\n  background-color: #6200ff;\n}\n\n"],sourceRoot:""}]);const d=l},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,A){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(a[s]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);o&&a[l[0]]||(void 0!==A&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=A),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),A="/*# ".concat(r," */");return[e].concat([A]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var A={},a=[],i=0;i<n.length;i++){var s=n[i],c=o.base?s[0]+o.base:s[0],l=A[c]||0,p="".concat(c," ").concat(l);A[c]=l+1;var d=t(p),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)e[d].references++,e[d].updater(u);else{var g=r(u,o);o.byIndex=i,e.splice(i,0,{identifier:p,updater:g,references:1})}a.push(p)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var A=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<A.length;a++){var i=t(A[a]);e[i].references--}for(var s=o(n,r),c=0;c<A.length;c++){var l=t(A[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}A=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var A=t.sourceMap;A&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(A))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},265:(n,e,t)=>{n.exports=t.p+"assets/images/background.jpg"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var A=e[o]={id:o,exports:{}};return n[o](A,A.exports,t),A.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");o.length&&(n=o[o.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{function n(n){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const t=n,o=[];let r=0,A=!1;return{get length(){return t},get shipCoordinates(){return o},get id(){return e},get hits(){return r},get isSunk(){return A},addCoordinates(n){o.push(n)},hit(){r++,r===t&&(A=!0)}}}function e(){let e=[],t=[],o=[],r=0,A=1,a=1;for(let n=0;n<100;n++){let n={coordinates:[A,a],ship:null,attacked:!1,available:!0};e.push(n),A++,A>10&&(A=1,a++)}return{get board(){return e},get sunkShips(){return o},get totalHits(){return r},get ships(){return t},placeShip(o,r,A){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;if("right"===r&&o[0]+A>11)return"ship exceeding boundaries";if("down"===r&&o[1]+A>11)return"ship exceeding boundaries";let i=[...o];for(let n=0;n<A;n++){0!==n&&("right"===r?i[0]++:i[1]++);let t=e.find((n=>n.coordinates.every(((n,e)=>n===i[e]))));if(!t)return"No such coordinates";if(!t.available)return"Some of the space is unavailable"}const s=new n(A,a);t.push(s);let c=[...o];for(let n=0;n<A;n++){let n=[...c];"right"===r?c[0]++:c[1]++,s.addCoordinates(n)}for(let n=0;n<A;n++){0!==n&&("right"===r?o[0]++:o[1]++);let[t,A]=o,a=[[t-1,A],[t+1,A],[t-1,A+1],[t-1,A-1],[t+1,A+1],[t+1,A-1],[t,A+1],[t,A-1]],i=e.find((n=>n.coordinates.every(((n,e)=>n===o[e]))));i.ship=s,i.ship.coordinates=i.coordinates,i.available=!1,a.forEach((n=>{let t=e.find((e=>e.coordinates.every(((e,t)=>e===n[t]))));t&&(t.available=!1)}))}},receiveAttack(n){const t=e.find((e=>e.coordinates.every(((e,t)=>e===n[t]))));void 0===t||t.attacked||(t.attacked=!0,r++,t.ship&&(t.ship.hit(),t.ship.isSunk&&o.push(t.ship)))},getAdjacentBoxes(n){const[e,t]=n;return[[e-1,t],[e+1,t],[e-1,t+1],[e-1,t-1],[e+1,t+1],[e+1,t-1],[e,t+1],[e,t-1]].map((n=>this.board.find((e=>e.coordinates.every(((e,t)=>e===n[t])))))).filter((n=>void 0!==n))},hasArmedShips(){let n=!1;return t.forEach((e=>{e.isSunk||(n=!0)})),n}}}var o=t(379),r=t.n(o),A=t(795),a=t.n(A),i=t(569),s=t.n(i),c=t(565),l=t.n(c),p=t(216),d=t.n(p),u=t(589),g=t.n(u),h=t(772),E={};E.styleTagTransform=g(),E.setAttributes=l(),E.insert=s().bind(null,"head"),E.domAPI=a(),E.insertStyleElement=d(),r()(h.Z,E),h.Z&&h.Z.locals&&h.Z.locals;var f=t(561),C={};C.styleTagTransform=g(),C.setAttributes=l(),C.insert=s().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=d(),r()(f.Z,C),f.Z&&f.Z.locals&&f.Z.locals;var x=t(884),B={};B.styleTagTransform=g(),B.setAttributes=l(),B.insert=s().bind(null,"head"),B.domAPI=a(),B.insertStyleElement=d(),r()(x.Z,B),x.Z&&x.Z.locals&&x.Z.locals;var b=t(262),m={};m.styleTagTransform=g(),m.setAttributes=l(),m.insert=s().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),r()(b.Z,m),b.Z&&b.Z.locals&&b.Z.locals;var y=t(806),v={};v.styleTagTransform=g(),v.setAttributes=l(),v.insert=s().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=d(),r()(y.Z,v),y.Z&&y.Z.locals&&y.Z.locals;const k=function(n){const t=new e;return{name:"player",gameBoard:t,get board(){return t.board},placeShip:(n,e,o)=>t.placeShip(n,e,o),shoot(n,e){n.gameBoard.receiveAttack(e)}}}();new e,function(n,e){const t=document.getElementById("player-board");for(let e=0;e<n.board.length;e++){const o=document.createElement("div");o.id=`p${e}`,o.classList.add("box"),n.board[e].ship&&o.classList.add("contain-ship"),t.append(o)}}(k),document.querySelector(".winner-overlay > p").addEventListener("click",(()=>{window.location.reload()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aEMsRUFFdEIsTUFBTyxDQUNMaUMsS0RHa0IsU0NGbEJELFlBQ0kvQixZQUNGLE9BQU8rQixFQUFVL0IsS0FDbkIsRUFFQU8sVUFBU0EsQ0FBQ1YsRUFBT1ksRUFBV2xCLElBQ25Cd0MsRUFBVXhCLFVBQVVWLEVBQU9ZLEVBQVdsQixHQUcvQzBDLE1BQU03RyxFQUFReUUsR0FDWnpFLEVBQU8yRyxVQUFVUixjQUFjMUIsRUFDakMsRUFFSixDRFhlcUMsR0VOSyxJQUFJbkMsRUNGVCxTQUFxQjhCLEVBQVFNLEdBRTFDLE1BQU1DLEVBQWM5RyxTQUFTK0csZUFBZSxnQkFHNUMsSUFBSSxJQUFJOUssRUFBSSxFQUFHQSxFQUFJc0ssRUFBTzdCLE1BQU0zSSxPQUFRRSxJQUFLLENBQzNDLE1BQU0rSSxFQUFNaEYsU0FBU1csY0FBYyxPQUNuQ3FFLEVBQUkvSixHQUFNLElBQUdnQixJQUNiK0ksRUFBSWdDLFVBQVVDLElBQUksT0FFZlYsRUFBTzdCLE1BQU16SSxHQUFHNkosTUFBTWQsRUFBSWdDLFVBQVVDLElBQUksZ0JBQzNDSCxFQUFZSSxPQUFPbEMsRUFDckIsQ0FDRixDSEZBbUMsQ0FBWVosR0FFTXZHLFNBQVNDLGNBQWMsdUJBRS9CbUgsaUJBQWlCLFNBQVMsS0FDbENsSCxPQUFPbUQsU0FBU2dFLFFBQVEsRyIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL21lZGlhLXF1ZXJpZXMuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL3ByZXBhcmUtZ2FtZS5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvc2hpcC1saXN0LmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9zdHlsZXMuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL3dpbm5lci1vdmVybGF5LmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9jb25zdHJ1Y3RvcnMvU2hpcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2NvbnN0cnVjdG9ycy9HYW1lQm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvc3R5bGVzLmNzcz9lNDViIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL3dpbm5lci1vdmVybGF5LmNzcz9kNWM5Iiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL3ByZXBhcmUtZ2FtZS5jc3M/YWZlMSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9zaGlwLWxpc3QuY3NzP2RmOGYiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvbWVkaWEtcXVlcmllcy5jc3M/YzYwYSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvY29uc3RydWN0b3JzL1BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2NvbnN0cnVjdG9ycy9BSXBsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL01vZHVsZXMvcHJlcGFyZUdhbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMDBweCkge1xcbiAgI3BhZ2UtdGl0bGUge1xcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xcbiAgICBmb250LXNpemU6IDc1cHg7XFxuICB9XFxuXFxuICAjZ2FtZS1jb250YWluZXIge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xcbiAgfVxcbiAgXFxuICAucGxheWVyIGgxIHtcXG4gICAgZm9udC1zaXplOiAzMHB4XFxuICB9XFxuXFxuICAucGxheWVyIGgyIHtcXG4gICAgZm9udC1zaXplOiAyMHB4O1xcbiAgfVxcblxcbiAgLnJvdGF0ZSB7XFxuICAgIGZvbnQtc2l6ZTogMTVweDtcXG4gICAgcGFkZGluZzogM3B4IDE1cHg7XFxuICB9XFxuXFxuICAjbGVuZ3RoLWluZGljYXRvciB7XFxuICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gIH1cXG5cXG4gIC5ib2FyZCB7XFxuICAgIG1hcmdpbjogMCBhdXRvO1xcbiAgICB3aWR0aDogMzUwcHg7XFxuICAgIGhlaWdodDogMzUwcHg7XFxuICB9XFxuXFxuICAubW9iaWxlLWhpZGRlbiB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxuXFxuICAuc2hpcC1oaXQ6OmFmdGVyIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBjb250ZW50OiBcXFwiXFxcXDI3NGNcXFwiO1xcbiAgICBmb250LXNpemU6IDI3cHg7IFxcbiAgICBjb2xvcjogI0ZGRjtcXG4gIH1cXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9tZWRpYS1xdWVyaWVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFO0lBQ0UsZ0JBQWdCO0lBQ2hCLGVBQWU7RUFDakI7O0VBRUE7SUFDRSxzQkFBc0I7SUFDdEIsZ0JBQWdCO0VBQ2xCOztFQUVBO0lBQ0U7RUFDRjs7RUFFQTtJQUNFLGVBQWU7RUFDakI7O0VBRUE7SUFDRSxlQUFlO0lBQ2YsaUJBQWlCO0VBQ25COztFQUVBO0lBQ0UsZUFBZTtFQUNqQjs7RUFFQTtJQUNFLGNBQWM7SUFDZCxZQUFZO0lBQ1osYUFBYTtFQUNmOztFQUVBO0lBQ0UsYUFBYTtFQUNmOztFQUVBO0lBQ0Usa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2YsV0FBVztFQUNiO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDAwcHgpIHtcXG4gICNwYWdlLXRpdGxlIHtcXG4gICAgbWFyZ2luLXRvcDogMzBweDtcXG4gICAgZm9udC1zaXplOiA3NXB4O1xcbiAgfVxcblxcbiAgI2dhbWUtY29udGFpbmVyIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgbWFyZ2luLXRvcDogMTBweDtcXG4gIH1cXG4gIFxcbiAgLnBsYXllciBoMSB7XFxuICAgIGZvbnQtc2l6ZTogMzBweFxcbiAgfVxcblxcbiAgLnBsYXllciBoMiB7XFxuICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gIH1cXG5cXG4gIC5yb3RhdGUge1xcbiAgICBmb250LXNpemU6IDE1cHg7XFxuICAgIHBhZGRpbmc6IDNweCAxNXB4O1xcbiAgfVxcblxcbiAgI2xlbmd0aC1pbmRpY2F0b3Ige1xcbiAgICBmb250LXNpemU6IDIwcHg7XFxuICB9XFxuXFxuICAuYm9hcmQge1xcbiAgICBtYXJnaW46IDAgYXV0bztcXG4gICAgd2lkdGg6IDM1MHB4O1xcbiAgICBoZWlnaHQ6IDM1MHB4O1xcbiAgfVxcblxcbiAgLm1vYmlsZS1oaWRkZW4ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgfVxcblxcbiAgLnNoaXAtaGl0OjphZnRlciB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgY29udGVudDogXFxcIlxcXFwyNzRjXFxcIjtcXG4gICAgZm9udC1zaXplOiAyN3B4OyBcXG4gICAgY29sb3I6ICNGRkY7XFxuICB9XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5wbGF5ZXIgaDEge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiA0MHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuLmRpcmVjdGlvbiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG5cXG4ucGxheWVyIGgyIHtcXG4gIGZvbnQtc2l6ZTogMzBweDtcXG59XFxuXFxuLnJvdGF0ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGNvbG9yOiBibGFjaztcXG4gIG1hcmdpbjogMCAwIDEwcHggMTBweDtcXG4gIHdpZHRoOiBtYXgtY29udGVudDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIHBhZGRpbmc6IDVweCAxNXB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ucm90YXRlOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigxOTksIDE5OSwgMTk5KTtcXG59XFxuXFxuI2xlbmd0aC1pbmRpY2F0b3Ige1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiAyNXB4O1xcbn1cXG5cXG4ucHJlLWdhbWUge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmVcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9wcmVwYXJlLWdhbWUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsWUFBWTtFQUNaLHFCQUFxQjtFQUNyQixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxvQ0FBb0M7QUFDdEM7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRTtBQUNGXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5wbGF5ZXIgaDEge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiA0MHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuLmRpcmVjdGlvbiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG5cXG4ucGxheWVyIGgyIHtcXG4gIGZvbnQtc2l6ZTogMzBweDtcXG59XFxuXFxuLnJvdGF0ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGNvbG9yOiBibGFjaztcXG4gIG1hcmdpbjogMCAwIDEwcHggMTBweDtcXG4gIHdpZHRoOiBtYXgtY29udGVudDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIHBhZGRpbmc6IDVweCAxNXB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ucm90YXRlOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigxOTksIDE5OSwgMTk5KTtcXG59XFxuXFxuI2xlbmd0aC1pbmRpY2F0b3Ige1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiAyNXB4O1xcbn1cXG5cXG4ucHJlLWdhbWUge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmVcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnNoaXAtbGlzdCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHJvdy1nYXA6IDE1cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjM4OWRhO1xcbiAgd2lkdGg6IDQwMHB4O1xcbiAgaGVpZ2h0OiA1MDBweDtcXG59XFxuXFxuLnNoaXAtbGlzdCBoMSB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5zaGlwIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBcXG59XFxuXFxuLnNxdWFyZSB7XFxuICB3aWR0aDogNTBweDtcXG4gIGhlaWdodDogNTBweDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogYXp1cmU7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvc2hpcC1saXN0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsYUFBYTtFQUNiLHlCQUF5QjtFQUN6QixZQUFZO0VBQ1osYUFBYTtBQUNmOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsYUFBYTs7QUFFZjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osdUJBQXVCO0VBQ3ZCLHVCQUF1QjtBQUN6QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuc2hpcC1saXN0IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcm93LWdhcDogMTVweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMzg5ZGE7XFxuICB3aWR0aDogNDAwcHg7XFxuICBoZWlnaHQ6IDUwMHB4O1xcbn1cXG5cXG4uc2hpcC1saXN0IGgxIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLnNoaXAge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIFxcbn1cXG5cXG4uc3F1YXJlIHtcXG4gIHdpZHRoOiA1MHB4O1xcbiAgaGVpZ2h0OiA1MHB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBhenVyZTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuLi9hc3NldHMvaW1hZ2VzL2JhY2tncm91bmQuanBnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKiB7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuYm9keSB7XFxuICBiYWNrZ3JvdW5kOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4jcGFnZS10aXRsZSB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBtYXJnaW4tdG9wOiA2NXB4O1xcbiAgZm9udC1zaXplOiAxMDBweDtcXG59XFxuXFxuI2dhbWUtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBjb2x1bW4tZ2FwOiA3MHB4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiBtYXgtY29udGVudDtcXG4gIG1hcmdpbi10b3A6IDUwcHg7XFxuXFxufVxcblxcbi5ib2FyZCB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDFmcik7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjM4OWRhO1xcbiAgd2lkdGg6IDUwMHB4O1xcbiAgaGVpZ2h0OiA1MDBweDtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xcbn1cXG5cXG4uYm94IHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbn1cXG5cXG4uQUktYm94IHtcXG4gIGN1cnNvcjogY3Jvc3NoYWlyO1xcbn1cXG5cXG4uQUktYm94OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2MjAwZmY7XFxufVxcblxcbi5kZXRhaWxzIGgxIHtcXG4gIGZvbnQtc2l6ZTogNjBweFxcbn1cXG5cXG4uZGV0YWlscyBwIHtcXG4gIGZvbnQtc2l6ZTogMzBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xcbn1cXG5cXG4uaGlnaGxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2MjAwZmY7XFxufVxcblxcbi5jb250YWluLXNoaXAge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogYXp1cmU7XFxufVxcblxcbi5hdHRhY2tlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGEyMzIzO1xcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcXG59XFxuXFxuLmF0dGFja2VkOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYTIzMjM7XFxufVxcblxcbi5zaGlwLWhpdCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjM1NGRhO1xcbn1cXG5cXG4uc2hpcC1oaXQ6OmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcMjc0Y1xcXCI7XFxuICBmb250LXNpemU6IDQwcHg7IFxcbiAgY29sb3I6ICNGRkY7XFxufVxcblxcbi5zaGlwLWhpdDpob3ZlciB7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzNTRkYTtcXG59XFxuXFxuXFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9zdHlsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsVUFBVTtFQUNWLFNBQVM7RUFDVCxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxtREFBZ0Q7RUFDaEQsWUFBWTtBQUNkOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsZ0JBQWdCO0VBQ2hCLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsWUFBWTtFQUNaLG1CQUFtQjtFQUNuQixnQkFBZ0I7O0FBRWxCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNDQUFzQztFQUN0Qyx5QkFBeUI7RUFDekIsWUFBWTtFQUNaLGFBQWE7RUFDYixnQ0FBZ0M7QUFDbEM7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRTtBQUNGOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixnQ0FBZ0M7QUFDbEM7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsV0FBVztBQUNiOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLHlCQUF5QjtBQUMzQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5ib2R5IHtcXG4gIGJhY2tncm91bmQ6IHVybCguLi9hc3NldHMvaW1hZ2VzL2JhY2tncm91bmQuanBnKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuI3BhZ2UtdGl0bGUge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbWFyZ2luLXRvcDogNjVweDtcXG4gIGZvbnQtc2l6ZTogMTAwcHg7XFxufVxcblxcbiNnYW1lLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgY29sdW1uLWdhcDogNzBweDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGhlaWdodDogbWF4LWNvbnRlbnQ7XFxuICBtYXJnaW4tdG9wOiA1MHB4O1xcblxcbn1cXG5cXG4uYm9hcmQge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAxZnIpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzODlkYTtcXG4gIHdpZHRoOiA1MDBweDtcXG4gIGhlaWdodDogNTAwcHg7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcXG59XFxuXFxuLmJveCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG59XFxuXFxuLkFJLWJveCB7XFxuICBjdXJzb3I6IGNyb3NzaGFpcjtcXG59XFxuXFxuLkFJLWJveDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjIwMGZmO1xcbn1cXG5cXG4uZGV0YWlscyBoMSB7XFxuICBmb250LXNpemU6IDYwcHhcXG59XFxuXFxuLmRldGFpbHMgcCB7XFxuICBmb250LXNpemU6IDMwcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcXG59XFxuXFxuLmhpZ2hsaWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjIwMGZmO1xcbn1cXG5cXG4uY29udGFpbi1zaGlwIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGF6dXJlO1xcbn1cXG5cXG4uYXR0YWNrZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RhMjMyMztcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxufVxcblxcbi5hdHRhY2tlZDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGEyMzIzO1xcbn1cXG5cXG4uc2hpcC1oaXQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzNTRkYTtcXG59XFxuXFxuLnNoaXAtaGl0OjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjb250ZW50OiBcXFwiXFxcXDI3NGNcXFwiO1xcbiAgZm9udC1zaXplOiA0MHB4OyBcXG4gIGNvbG9yOiAjRkZGO1xcbn1cXG5cXG4uc2hpcC1oaXQ6aG92ZXIge1xcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMzU0ZGE7XFxufVxcblxcblxcblxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiLi4vYXNzZXRzL2ltYWdlcy9iYWNrZ3JvdW5kLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5vdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTtcXG59XFxuXFxuLndpbm5lci1vdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcm93LWdhcDogMzBweDtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICBiYWNrZ3JvdW5kOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO1xcbiAgd2lkdGg6IDYwMHB4O1xcbiAgaGVpZ2h0OiAzMDBweDtcXG4gIGJveC1zaGFkb3c6IDJweCAwcHggMTBweCAjMjQyNDI0O1xcbn1cXG5cXG4ud2lubmVyLW92ZXJsYXkgaDEge1xcbiAgZm9udC1zaXplOiA2MHB4XFxufVxcblxcbi53aW5uZXItb3ZlcmxheSBwIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMzg5ZGE7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBwYWRkaW5nOiAxMHB4IDI1cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi53aW5uZXItb3ZlcmxheSBwOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2MjAwZmY7XFxufVxcblxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvd2lubmVyLW92ZXJsYXkuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsZUFBZTtFQUNmLGFBQWE7RUFDYixNQUFNO0VBQ04sT0FBTztFQUNQLFlBQVk7RUFDWixhQUFhO0VBQ2Isb0NBQW9DO0FBQ3RDOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2IsUUFBUTtFQUNSLFNBQVM7RUFDVCxnQ0FBZ0M7RUFDaEMsbURBQWdEO0VBQ2hELFlBQVk7RUFDWixhQUFhO0VBQ2IsZ0NBQWdDO0FBQ2xDOztBQUVBO0VBQ0U7QUFDRjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5vdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTtcXG59XFxuXFxuLndpbm5lci1vdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcm93LWdhcDogMzBweDtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICBiYWNrZ3JvdW5kOiB1cmwoLi4vYXNzZXRzL2ltYWdlcy9iYWNrZ3JvdW5kLmpwZyk7XFxuICB3aWR0aDogNjAwcHg7XFxuICBoZWlnaHQ6IDMwMHB4O1xcbiAgYm94LXNoYWRvdzogMnB4IDBweCAxMHB4ICMyNDI0MjQ7XFxufVxcblxcbi53aW5uZXItb3ZlcmxheSBoMSB7XFxuICBmb250LXNpemU6IDYwcHhcXG59XFxuXFxuLndpbm5lci1vdmVybGF5IHAge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzODlkYTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIHBhZGRpbmc6IDEwcHggMjVweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLndpbm5lci1vdmVybGF5IHA6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYyMDBmZjtcXG59XFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTtcblxuICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfVxuXG4gIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTaGlwKGxlbiwgaWQgPSBudWxsKSB7XG4gIGNvbnN0IGxlbmd0aCA9IGxlblxuICBjb25zdCBzaGlwQ29vcmRpbmF0ZXMgPSBbXVxuICBsZXQgaGl0cyA9IDBcbiAgbGV0IGlzU3VuayA9IGZhbHNlXG4gIHJldHVybiB7XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgIHJldHVybiBsZW5ndGhcbiAgICB9LFxuXG4gICAgZ2V0IHNoaXBDb29yZGluYXRlcygpIHtcbiAgICAgIHJldHVybiBzaGlwQ29vcmRpbmF0ZXNcbiAgICB9LFxuICAgIFxuICAgIGdldCBpZCgpIHtcbiAgICAgIHJldHVybiBpZFxuICAgIH0sXG5cbiAgICBnZXQgaGl0cygpIHtcbiAgICAgIHJldHVybiBoaXRzXG4gICAgfSxcblxuICAgIGdldCBpc1N1bmsoKSB7XG4gICAgICByZXR1cm4gaXNTdW5rXG4gICAgfSxcblxuICAgIGFkZENvb3JkaW5hdGVzKGNvb3JkKSB7XG4gICAgICBzaGlwQ29vcmRpbmF0ZXMucHVzaChjb29yZClcbiAgICB9LFxuXG4gICAgaGl0KCkge1xuICAgICAgaGl0cysrXG4gICAgICBpZihoaXRzID09PSBsZW5ndGgpIGlzU3VuayA9IHRydWVcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgU2hpcCBmcm9tIFwiLi9TaGlwXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gR2FtZUJvYXJkKCkge1xuICBsZXQgYm9hcmQgPSBbXVxuICBsZXQgc2hpcHMgPSBbXVxuICBsZXQgc3Vua1NoaXBzID0gW11cbiAgbGV0IHRvdGFsSGl0cyA9IDBcbiAgbGV0IGdyaWRTaXplID0gMTAwXG4gIC8vIGluaXRpYWxpemUgY29vcmRpbmF0ZXMgYXQgMSwxXG4gIGxldCB4ID0gMVxuICBsZXQgeSA9IDFcbiAgZm9yKGxldCBpID0gMDsgaSA8IGdyaWRTaXplOyBpKyspIHtcbiAgICAvLyBtYWtlIGVhY2ggYm94IGFuIG9iamVjdCBjb250YWluaW5nIGRhdGFcbiAgICBsZXQgYm94ID0ge1xuICAgICAgXCJjb29yZGluYXRlc1wiOiBbeCx5XSxcbiAgICAgIFwic2hpcFwiOiBudWxsLFxuICAgICAgXCJhdHRhY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwiYXZhaWxhYmxlXCI6IHRydWVcbiAgICB9XG4gICAgLy8gYWRkIG9iamVjdCB0byBnYW1lQm9hcmQgYXJyYXlcbiAgICBib2FyZC5wdXNoKGJveClcbiAgICBcbiAgICAvLyBpbmNyZW1lbnQgeCBhbmQgeSBjb29yZGluYXRlc1xuICAgIHgrK1xuICAgIGlmKHggPiAxMCkge1xuICAgICAgeCA9IDFcbiAgICAgIHkrK1xuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXQgYm9hcmQoKSB7XG4gICAgICByZXR1cm4gYm9hcmRcbiAgICB9LFxuXG4gICAgZ2V0IHN1bmtTaGlwcygpIHtcbiAgICAgIHJldHVybiBzdW5rU2hpcHNcbiAgICB9LFxuXG4gICAgZ2V0IHRvdGFsSGl0cygpIHtcbiAgICAgIHJldHVybiB0b3RhbEhpdHNcbiAgICB9LFxuXG4gICAgZ2V0IHNoaXBzKCkge1xuICAgICAgcmV0dXJuIHNoaXBzXG4gICAgfSxcblxuICAgIHBsYWNlU2hpcChjb29yZHMsIGRpcmVjdGlvbiwgbGVuLCBpZCA9IG51bGwpIHtcbiAgICAgIC8vIGNoZWNrIGlmIHNoaXAgc3RheXMgd2l0aGluIGJvdW5kYXJpZXNcbiAgICAgIGlmKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyAmJiBjb29yZHNbMF0gKyBsZW4gPiAxMSkgcmV0dXJuICdzaGlwIGV4Y2VlZGluZyBib3VuZGFyaWVzJ1xuICAgICAgaWYoZGlyZWN0aW9uID09PSAnZG93bicgJiYgY29vcmRzWzFdICsgbGVuID4gMTEpIHJldHVybiAnc2hpcCBleGNlZWRpbmcgYm91bmRhcmllcydcblxuICAgICAgbGV0IGNvb3Jkc0NvcHkgPSBbLi4uY29vcmRzXVxuXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYoaSAhPT0gMCkge1xuICAgICAgICAgIGlmKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JykgY29vcmRzQ29weVswXSsrXG4gICAgICAgICAgZWxzZSBjb29yZHNDb3B5WzFdICsrXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNob3NlbkxvY2F0aW9uID0gYm9hcmQuZmluZChib3ggPT4gYm94LmNvb3JkaW5hdGVzLmV2ZXJ5KChjb29yZCwgaW5kZXgpID0+IGNvb3JkID09PSBjb29yZHNDb3B5W2luZGV4XSkpXG4gICAgICAgIGlmKCFjaG9zZW5Mb2NhdGlvbikgcmV0dXJuICdObyBzdWNoIGNvb3JkaW5hdGVzJ1xuICAgICAgICBpZighY2hvc2VuTG9jYXRpb24uYXZhaWxhYmxlKSByZXR1cm4gJ1NvbWUgb2YgdGhlIHNwYWNlIGlzIHVuYXZhaWxhYmxlJ1xuICAgICAgfVxuXG4gICAgICAvLyBjcmVhdGVzIHRoZSBzaGlwXG4gICAgICBjb25zdCBiYXR0bGVzaGlwID0gbmV3IFNoaXAobGVuLCBpZClcbiAgICAgIHNoaXBzLnB1c2goYmF0dGxlc2hpcClcblxuICAgICAgLy8gYWRkIHRoZSBzaGlwIGNvb3JkaW5hdGVzIHRvIHRoZSBzaGlwIG9iamVjdFxuICAgICAgbGV0IGNvb3JkaW5hdGVzQ29weSA9IFsuLi5jb29yZHNdXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgbGV0IGN1cnJlbnRDb29yZHMgPSBbLi4uY29vcmRpbmF0ZXNDb3B5XVxuXG4gICAgICAgIGlmKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JykgY29vcmRpbmF0ZXNDb3B5WzBdKytcbiAgICAgICAgZWxzZSBjb29yZGluYXRlc0NvcHlbMV0rK1xuXG4gICAgICAgIGJhdHRsZXNoaXAuYWRkQ29vcmRpbmF0ZXMoY3VycmVudENvb3JkcylcbiAgICAgIH1cblxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIC8vIHNraXBzIHN0YXRlbWVudCBvbiBmaXJzdCByb3VuZCB0byBhZGQgdGhlIGNob3NlbiBjb29yZGluYXRlc1xuICAgICAgICBpZihpICE9PSAwKSB7XG4gICAgICAgICAgLy8gY29udGludWUgbW92aW5nIGluIHRoZSBjaG9zZW4gZGlyZWN0aW9uXG4gICAgICAgICAgaWYoZGlyZWN0aW9uID09PSAncmlnaHQnKSBjb29yZHNbMF0rK1xuICAgICAgICAgIGVsc2UgY29vcmRzWzFdKytcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1ha2UgYW4gYXJyYXkgY29udGFpbmluZyBhbGwgb2YgdGhlIGFkamFjZW50IGxvY2F0aW9uc1xuICAgICAgICBsZXQgW2EsIGJdID0gY29vcmRzO1xuICAgICAgICBsZXQgYWRqYWNlbnRMb2NhdGlvbnMgPSBbXG4gICAgICAgICAgW2EgLSAxLCBiXSxcbiAgICAgICAgICBbYSArIDEsIGJdLFxuICAgICAgICAgIFthIC0gMSwgYiArIDFdLFxuICAgICAgICAgIFthIC0gMSwgYiAtIDFdLFxuICAgICAgICAgIFthICsgMSwgYiArIDFdLFxuICAgICAgICAgIFthICsgMSwgYiAtIDFdLFxuICAgICAgICAgIFthLCBiICsgMV0sXG4gICAgICAgICAgW2EsIGIgLSAxXVxuICAgICAgICBdO1xuXG4gICAgICAgIGxldCBjaG9zZW5Mb2NhdGlvbiA9IGJvYXJkLmZpbmQoYm94ID0+IGJveC5jb29yZGluYXRlcy5ldmVyeSgoY29vcmQsIGluZGV4KSA9PiBjb29yZCA9PT0gY29vcmRzW2luZGV4XSkpXG4gICAgICAgIGNob3NlbkxvY2F0aW9uLnNoaXAgPSBiYXR0bGVzaGlwXG4gICAgICAgIGNob3NlbkxvY2F0aW9uLnNoaXAuY29vcmRpbmF0ZXMgPSBjaG9zZW5Mb2NhdGlvbi5jb29yZGluYXRlc1xuXG4gICAgICAgIC8vIHNldCBzaGlwIGJveGVzIGFuZCBhZGphY2VudCBib3hlcyB1bmF2YWlsYWJsZVxuICAgICAgICBjaG9zZW5Mb2NhdGlvbi5hdmFpbGFibGUgPSBmYWxzZVxuICAgICAgICBhZGphY2VudExvY2F0aW9ucy5mb3JFYWNoKGxvY2F0aW9uID0+IHtcbiAgICAgICAgICBsZXQgY3VycmVudCA9IGJvYXJkLmZpbmQoYm94ID0+IGJveC5jb29yZGluYXRlcy5ldmVyeSgoY29vcmQsIGluZGV4KSA9PiBjb29yZCA9PT0gbG9jYXRpb25baW5kZXhdKSlcbiAgICAgICAgICBpZihjdXJyZW50KSBjdXJyZW50LmF2YWlsYWJsZSA9IGZhbHNlXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlY2VpdmVBdHRhY2soY29vcmRzKSB7XG4gICAgICBjb25zdCBjaG9zZW5Mb2NhdGlvbiA9IGJvYXJkLmZpbmQoYm94ID0+IGJveC5jb29yZGluYXRlcy5ldmVyeSgoY29vcmQsIGluZGV4KSA9PiBjb29yZCA9PT0gY29vcmRzW2luZGV4XSkpXG4gICAgICAvLyBpZiB0aGUgbG9jYXRpb24gaXMgb3V0IG9mIGJvdW5kYXJpZXMgb3Igd2FzIGFscmVhZHkgYXR0YWNrZWRcbiAgICAgIGlmKGNob3NlbkxvY2F0aW9uID09PSB1bmRlZmluZWQgfHwgY2hvc2VuTG9jYXRpb24uYXR0YWNrZWQpIHJldHVyblxuICAgIFxuICAgICAgLy8gbWFyayBsb2NhdGlvbiBhcyBhdHRhY2tlZFxuICAgICAgY2hvc2VuTG9jYXRpb24uYXR0YWNrZWQgPSB0cnVlXG4gICAgICB0b3RhbEhpdHMrK1xuICAgICAgLy8gaGl0IHNoaXAgaWYgcHJlc2VudFxuICAgICAgaWYoY2hvc2VuTG9jYXRpb24uc2hpcCkge1xuICAgICAgICBjaG9zZW5Mb2NhdGlvbi5zaGlwLmhpdCgpXG4gICAgICAgIC8vIGlmIHNoaXAgc3VuaywgYWRkIHRvIHN1bmtTaGlwc1xuICAgICAgICBpZihjaG9zZW5Mb2NhdGlvbi5zaGlwLmlzU3Vuaykge1xuICAgICAgICAgIHN1bmtTaGlwcy5wdXNoKGNob3NlbkxvY2F0aW9uLnNoaXApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gcmV0dXJuIHRoZSBhZGphY2VudCBsb2NhdGlvbnNcbiAgICBnZXRBZGphY2VudEJveGVzKGNvb3Jkcykge1xuICAgICAgY29uc3QgW2EsIGJdID0gY29vcmRzO1xuICAgICAgY29uc3QgYWRqYWNlbnRMb2NhdGlvbnMgPSBbXG4gICAgICAgIFthIC0gMSwgYl0sXG4gICAgICAgIFthICsgMSwgYl0sXG4gICAgICAgIFthIC0gMSwgYiArIDFdLFxuICAgICAgICBbYSAtIDEsIGIgLSAxXSxcbiAgICAgICAgW2EgKyAxLCBiICsgMV0sXG4gICAgICAgIFthICsgMSwgYiAtIDFdLFxuICAgICAgICBbYSwgYiArIDFdLFxuICAgICAgICBbYSwgYiAtIDFdXG4gICAgICBdO1xuICAgICAgY29uc3QgYWRqYWNlbnRCb3hlcyA9IGFkamFjZW50TG9jYXRpb25zLm1hcChsb2NhdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IGFkamFjZW50Qm94ID0gdGhpcy5ib2FyZC5maW5kKGJveCA9PiBib3guY29vcmRpbmF0ZXMuZXZlcnkoKGNvb3JkLCBpbmRleCkgPT4gY29vcmQgPT09IGxvY2F0aW9uW2luZGV4XSkpO1xuICAgICAgICByZXR1cm4gYWRqYWNlbnRCb3g7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhZGphY2VudEJveGVzLmZpbHRlcihib3ggPT4gYm94ICE9PSB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgXG4gICAgaGFzQXJtZWRTaGlwcygpIHtcbiAgICAgIGxldCBhcm1lZFNoaXBzID0gZmFsc2VcbiAgICAgIHNoaXBzLmZvckVhY2goc2hpcCA9PiB7XG4gICAgICAgIGlmKCFzaGlwLmlzU3VuaykgYXJtZWRTaGlwcyA9IHRydWVcbiAgICAgIH0pXG4gICAgICByZXR1cm4gYXJtZWRTaGlwc1xuICAgIH1cbiAgfVxufSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3dpbm5lci1vdmVybGF5LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vd2lubmVyLW92ZXJsYXkuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ByZXBhcmUtZ2FtZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ByZXBhcmUtZ2FtZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2hpcC1saXN0LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2hpcC1saXN0LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tZWRpYS1xdWVyaWVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWVkaWEtcXVlcmllcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgcHJlcGFyZUdhbWUgZnJvbSBcIi4vTW9kdWxlcy9wcmVwYXJlR2FtZVwiO1xuaW1wb3J0IEFJcGxheWVyIGZyb20gXCIuL2NvbnN0cnVjdG9ycy9BSXBsYXllclwiO1xuaW1wb3J0IFBsYXllciBmcm9tIFwiLi9jb25zdHJ1Y3RvcnMvUGxheWVyXCI7XG5pbXBvcnQgJy4vc3R5bGVzL3N0eWxlcy5jc3MnXG5pbXBvcnQgJy4vc3R5bGVzL3dpbm5lci1vdmVybGF5LmNzcydcbmltcG9ydCAnLi9zdHlsZXMvcHJlcGFyZS1nYW1lLmNzcydcbmltcG9ydCAnLi9zdHlsZXMvc2hpcC1saXN0LmNzcydcbmltcG9ydCAnLi9zdHlsZXMvbWVkaWEtcXVlcmllcy5jc3MnXG5cbi8vIGNyZWF0ZSB0aGUgcGxheWVyc1xuY29uc3QgcGxheWVyID0gUGxheWVyKCdwbGF5ZXInKVxuY29uc3QgQUkgPSBBSXBsYXllcigpXG5cbnByZXBhcmVHYW1lKHBsYXllciwgQUkpXG5cbmNvbnN0IHBsYXlBZ2FpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53aW5uZXItb3ZlcmxheSA+IHAnKVxuXG5wbGF5QWdhaW4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxufSlcbiIsImltcG9ydCBHYW1lQm9hcmQgZnJvbSBcIi4vR2FtZUJvYXJkXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGxheWVyKHBsYXllck5hbWUpIHtcbiAgY29uc3QgbmFtZSA9IHBsYXllck5hbWVcbiAgY29uc3QgZ2FtZUJvYXJkID0gbmV3IEdhbWVCb2FyZCgpXG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lLFxuICAgIGdhbWVCb2FyZCxcbiAgICBnZXQgYm9hcmQoKSB7XG4gICAgICByZXR1cm4gZ2FtZUJvYXJkLmJvYXJkXG4gICAgfSxcblxuICAgIHBsYWNlU2hpcChjb29yZCwgZGlyZWN0aW9uLCBsZW4pIHtcbiAgICAgIHJldHVybiBnYW1lQm9hcmQucGxhY2VTaGlwKGNvb3JkLCBkaXJlY3Rpb24sIGxlbilcbiAgICB9LFxuXG4gICAgc2hvb3QodGFyZ2V0LCBjb29yZCkge1xuICAgICAgdGFyZ2V0LmdhbWVCb2FyZC5yZWNlaXZlQXR0YWNrKGNvb3JkKVxuICAgIH1cbiAgfVxufSIsImltcG9ydCBHYW1lQm9hcmQgZnJvbSBcIi4vR2FtZUJvYXJkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFJcGxheWVyKCkge1xuICBjb25zdCBuYW1lID0gJ0FJJ1xuICBjb25zdCBnYW1lQm9hcmQgPSBuZXcgR2FtZUJvYXJkKClcbiAgbGV0IGxhc3RUdXJuSGl0ID0gZmFsc2VcbiAgbGV0IHNoaXBEaXJlY3Rpb24gPSAnJ1xuICBsZXQgZmlyc3RIaXQgPSBbXVxuICBsZXQgbGFzdEhpdCA9IFtdXG5cbiAgZnVuY3Rpb24gZmluZE5leHRBdHRhY2soZGlyZWN0aW9uKSB7XG4gICAgbGV0IG5leHRBdHRhY2sgPSBbXVxuICAgIGlmKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JykgbmV4dEF0dGFjayA9IFtsYXN0SGl0WzBdICsgMSwgbGFzdEhpdFsxXV1cbiAgICBpZihkaXJlY3Rpb24gPT09ICdsZWZ0JykgbmV4dEF0dGFjayA9IFtsYXN0SGl0WzBdIC0gMSwgbGFzdEhpdFsxXV1cbiAgICBpZihkaXJlY3Rpb24gPT09ICd1cCcpIG5leHRBdHRhY2sgPSBbbGFzdEhpdFswXSwgbGFzdEhpdFsxXSAtIDFdXG4gICAgaWYoZGlyZWN0aW9uID09PSAnZG93bicpIG5leHRBdHRhY2sgPSBbbGFzdEhpdFswXSwgbGFzdEhpdFsxXSArIDFdXG4gICAgcmV0dXJuIG5leHRBdHRhY2tcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBnYW1lQm9hcmQsXG4gICAgZ2V0IGJvYXJkKCkge1xuICAgICAgcmV0dXJuIGdhbWVCb2FyZC5ib2FyZFxuICAgIH0sXG5cbiAgICBwbGFjZVNoaXAobGVuKSB7XG4gICAgICBjb25zdCBpZCA9IGNyeXB0by5yYW5kb21VVUlEKClcbiAgICAgIC8vIGxpbWl0IHRoZSBhbW91bnQgb2YgYXR0ZW1wdHNcbiAgICAgIGxldCBhdHRlbXB0cyA9IDBcbiAgICAgIHdoaWxlKGF0dGVtcHRzIDwgMTAwMCkge1xuICAgICAgICBhdHRlbXB0cysrXG4gICAgICAgIC8vIGRlY2xhcmUgZW1wdHkgY29vcmRzIGFycmF5XG4gICAgICAgIGxldCBjb29yZHMgPSBbXVxuXG4gICAgICAgIC8vIGdlbmVyYXRlIHJhbmRvbSBjb29yZGluYXRlc1xuICAgICAgICBjb25zdCB4ID0gTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMClcbiAgICAgICAgY29uc3QgeSA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTApXG5cbiAgICAgICAgLy8gcHVzaCB0aGVtIHRvIHRoZSBhcnJheVxuICAgICAgICBjb29yZHMucHVzaCh4KVxuICAgICAgICBjb29yZHMucHVzaCh5KVxuXG4gICAgICAgIC8vIHBpY2sgcmFuZG9tIGRpcmVjdGlvblxuICAgICAgICBjb25zdCBwb3NzaWJsZURpcmVjdGlvbnMgPSBbJ3JpZ2h0JywgJ2Rvd24nXVxuICAgICAgICBjb25zdCByYW5kb21EaXJlY3Rpb24gPSBwb3NzaWJsZURpcmVjdGlvbnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGVEaXJlY3Rpb25zLmxlbmd0aCldXG5cbiAgICAgICAgLy8gdHJ5IHRvIHBsYWNlIHNoaXBcbiAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcChjb29yZHMsIHJhbmRvbURpcmVjdGlvbiwgbGVuLCBpZClcblxuICAgICAgICAvLyBnZXQgdGhlIHNoaXAgbG9jYXRpb24gb24gdGhlIGJvYXJkXG4gICAgICAgIGxldCBsb2NhdGlvbiA9IGdhbWVCb2FyZC5ib2FyZC5maW5kKGJveCA9PiBib3guY29vcmRpbmF0ZXMuZXZlcnkoKGNvb3JkLCBpbmRleCkgPT4gY29vcmQgPT09IGNvb3Jkc1tpbmRleF0pKVxuXG4gICAgICAgIC8vIGNoZWNrIGlmIHNoaXAgaXMgcHJlc2VudCBhdCB0aGUgbG9jYXRpb25cbiAgICAgICAgaWYobG9jYXRpb24uc2hpcCAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gY2hlY2sgaWYgaXRzIHRoZSBzaGlwIHdlIGp1c3QgY3JlYXRlZFxuICAgICAgICAgIGlmKGxvY2F0aW9uLnNoaXAuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc2hvb3QodGFyZ2V0KSB7XG4gICAgICAvLyBzdG9yZSB0aGUgdGFyZ2V0IGJvYXJkIGFycmF5IGFzIGEgdmFyaWFibGVcbiAgICAgIGNvbnN0IHRhcmdldEJvYXJkID0gdGFyZ2V0LmdhbWVCb2FyZC5ib2FyZFxuXG4gICAgICAvLyBjaGVjayBpZiBsYXN0IHR1cm4gd2FzIGEgaGl0XG4gICAgICBpZihsYXN0VHVybkhpdCkge1xuICAgICAgICAvLyBjaGVjayBpZiB3ZSBhbHJlYWR5IGtub3cgdGhlIHNoaXAgZGlyZWN0aW9uXG4gICAgICAgIGlmKHNoaXBEaXJlY3Rpb24gIT09ICcnKSB7XG4gICAgICAgICAgLy8ga2VlcCBzaG9vdGluZyBpbiB0aGUgc2FtZSBkaXJlY3Rpb25cblxuICAgICAgICAgIGxldCBzaG90RmlyZWQgPSBmYWxzZVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIGZpbmQgbmV4dCB0YXJnZXQgY29vcmRpbmF0ZXMgdXNpbmcgdGhlIGRpcmVjdGlvblxuICAgICAgICAgIGxldCBuZXh0QXR0YWNrID0gZmluZE5leHRBdHRhY2soc2hpcERpcmVjdGlvbilcblxuICAgICAgICAgIC8vIGZpbmQgdGhlIGxvY2F0aW9uIHdpdGggdGhlIGNvcnJlY3QgY29vcmRpbmF0ZXNcbiAgICAgICAgICBsZXQgbG9jYXRpb24gPSB0YXJnZXRCb2FyZC5maW5kKGJveCA9PiBib3guY29vcmRpbmF0ZXMuZXZlcnkoKGNvb3JkLCBpbmRleCkgPT4gY29vcmQgPT09IG5leHRBdHRhY2tbaW5kZXhdKSlcbiAgICAgICAgICAvLyBjaGVjayBpZiBsb2NhdGlvbiBpcyBpbnNpZGUgdGhlIGJvYXJkXG4gICAgICAgICAgaWYobG9jYXRpb24pIHtcbiAgICAgICAgICAgIC8vIGlmIGxvY2F0aW9uIGlzbid0IGF0dGFja2VkLCBhdHRhY2sgaXRcbiAgICAgICAgICAgIGlmKCFsb2NhdGlvbi5hdHRhY2tlZCkge1xuICAgICAgICAgICAgICB0YXJnZXQuZ2FtZUJvYXJkLnJlY2VpdmVBdHRhY2sobG9jYXRpb24uY29vcmRpbmF0ZXMpXG4gICAgICAgICAgICAgIGxhc3RIaXQgPSBsb2NhdGlvbi5jb29yZGluYXRlc1xuICAgICAgICAgICAgICBzaG90RmlyZWQgPSB0cnVlXG4gICAgICAgICAgICAgIC8vIGlmIHNoaXAgd2FzIGhpdCBpbiB0aGlzIGxvY2F0aW9uLCByZXR1cm5cbiAgICAgICAgICAgICAgaWYobG9jYXRpb24uc2hpcCkge1xuICAgICAgICAgICAgICAgIGlmKGxvY2F0aW9uLnNoaXAuaXNTdW5rKSB7XG4gICAgICAgICAgICAgICAgICBsYXN0VHVybkhpdCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICBzaGlwRGlyZWN0aW9uID0gJydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gaWYgbG9jYXRpb24gaGFzIG5vIHNoaXAsIGNvbnRpbnVlIHRvIGNoYW5nZSBkaXJlY3Rpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGxvY2F0aW9uIGlzIG91dHNpZGUgdGhlIGJvYXJkLCBjb250aW51ZSB0byBjaGFuZ2UgZGlyZWN0aW9uXG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIGlmIGl0IGlzIGF0dGFja2VkLCBmbGlwIHRoZSBkaXJlY3Rpb24gdG8gdGhlIG90aGVyIHNpZGUgYW5kIGhpdCBpdFxuICAgICAgICAgIGlmKHNoaXBEaXJlY3Rpb24gPT09ICdyaWdodCcpIHNoaXBEaXJlY3Rpb24gPSAnbGVmdCdcbiAgICAgICAgICBlbHNlIGlmKHNoaXBEaXJlY3Rpb24gPT09ICdsZWZ0Jykgc2hpcERpcmVjdGlvbiA9ICdyaWdodCdcbiAgICAgICAgICBlbHNlIGlmKHNoaXBEaXJlY3Rpb24gPT09ICd1cCcpIHNoaXBEaXJlY3Rpb24gPSAnZG93bidcbiAgICAgICAgICBlbHNlIGlmKHNoaXBEaXJlY3Rpb24gPT09ICdkb3duJykgc2hpcERpcmVjdGlvbiA9ICd1cCdcbiAgICAgICAgICBsYXN0SGl0ID0gZmlyc3RIaXRcbiAgICAgICAgICBpZihsb2NhdGlvbiAmJiAhbG9jYXRpb24uc2hpcCkgcmV0dXJuIGxvY2F0aW9uXG5cblxuICAgICAgICAgIC8vIGlmIG5vIHNob3Qgd2FzIGZpcmVkIHRoYXQgdHVyblxuICAgICAgICAgIGlmKCFzaG90RmlyZWQpIHtcbiAgICAgICAgICAgIC8vIGZpbmQgdGhlIG5ldyBsb2NhdGlvbiBmb3IgYXR0YWNrXG4gICAgICAgICAgICBuZXh0QXR0YWNrID0gZmluZE5leHRBdHRhY2soc2hpcERpcmVjdGlvbilcbiAgICAgICAgICAgIGxvY2F0aW9uID0gdGFyZ2V0Qm9hcmQuZmluZChib3ggPT4gYm94LmNvb3JkaW5hdGVzLmV2ZXJ5KChjb29yZCwgaW5kZXgpID0+IGNvb3JkID09PSBuZXh0QXR0YWNrW2luZGV4XSkpXG4gICAgICAgICAgICAvLyBhdHRhY2sgaXRcbiAgICAgICAgICAgIHRhcmdldC5nYW1lQm9hcmQucmVjZWl2ZUF0dGFjayhsb2NhdGlvbi5jb29yZGluYXRlcylcbiAgICAgICAgICAgIGxhc3RIaXQgPSBsb2NhdGlvbi5jb29yZGluYXRlc1xuICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uXG4gICAgICAgICAgfVxuXG5cblxuICAgICAgICAvLyBpZiB3ZSBkb24ndCBrbm93IHRoZSBkaXJlY3Rpb24sIGZpbmQgaXRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgZmlyc3RYID0gZmlyc3RIaXRbMF1cbiAgICAgICAgICBsZXQgZmlyc3RZID0gZmlyc3RIaXRbMV1cbiAgICAgICAgICBsZXQgYWRqYWNlbnRMb2NhdGlvbnMgPSBbXG4gICAgICAgICAgICBbZmlyc3RYICsgMSwgZmlyc3RZXSxcbiAgICAgICAgICAgIFtmaXJzdFgsIGZpcnN0WSArIDFdLFxuICAgICAgICAgICAgW2ZpcnN0WCAtIDEsIGZpcnN0WV0sXG4gICAgICAgICAgICBbZmlyc3RYLCBmaXJzdFkgLSAxXVxuICAgICAgICAgIF1cbiAgICAgICAgICAvLyBnZXQgdGhlIGFkamFjZW50IGJveCB0aGF0IGlzbid0IGF0dGFja2VkXG4gICAgICAgICAgbGV0IGxvY2F0aW9uXG4gICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGFkamFjZW50TG9jYXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsb2NhdGlvbiA9IHRhcmdldEJvYXJkLmZpbmQoYm94ID0+IGJveC5jb29yZGluYXRlcy5ldmVyeSgoY29vcmQsIGluZGV4KSA9PiBjb29yZCA9PT0gYWRqYWNlbnRMb2NhdGlvbnNbaV1baW5kZXhdKSlcbiAgICAgICAgICAgIC8vIGJyZWFrIHRoZSBsb29wIHdoZW4gbG9jYXRpb24gdGhhdCBpc24ndCBhdHRhY2sgZm91bmRcbiAgICAgICAgICAgIGlmKGxvY2F0aW9uICYmICFsb2NhdGlvbi5hdHRhY2tlZCkgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gYXR0YWNrIHRoZSBsb2NhdGlvblxuICAgICAgICAgIHRhcmdldC5nYW1lQm9hcmQucmVjZWl2ZUF0dGFjayhsb2NhdGlvbi5jb29yZGluYXRlcylcblxuICAgICAgICAgIC8vIGlmIHRoZSBsb2NhdGlvbiBoYXMgc2hpcCAod2hpY2ggbWVhbnMgaXQncyBhIGhpdClcbiAgICAgICAgICBpZihsb2NhdGlvbi5zaGlwKSB7XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZSBzaGlwIHN1bmssIG1ha2UgbmV4dCBhdHRhY2sgcmFuZG9tXG4gICAgICAgICAgICBpZihsb2NhdGlvbi5zaGlwLmlzU3VuaykgbGFzdFR1cm5IaXQgPSBmYWxzZVxuXG4gICAgICAgICAgICAvLyBlbHNlIHN0b3JlIHRoZSBjb29yZGluYXRlcyBhcyBsYXN0IGhpdFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGxhc3RIaXQgPSBsb2NhdGlvbi5jb29yZGluYXRlc1xuICAgICAgICAgICAgICBsZXQgbGFzdFggPSBsYXN0SGl0WzBdXG4gICAgICAgICAgICAgIGxldCBsYXN0WSA9IGxhc3RIaXRbMV1cblxuICAgICAgICAgICAgICAvLyBkZXRlcm1pbmUgdGhlIGNvcnJlY3QgZGlyZWN0aW9uXG4gICAgICAgICAgICAgIGlmKGxhc3RYID4gZmlyc3RYKSBzaGlwRGlyZWN0aW9uID0gJ3JpZ2h0J1xuICAgICAgICAgICAgICBlbHNlIGlmKGxhc3RYIDwgZmlyc3RYKSBzaGlwRGlyZWN0aW9uID0gJ2xlZnQnXG4gICAgICAgICAgICAgIGVsc2UgaWYobGFzdFkgPCBmaXJzdFkpIHNoaXBEaXJlY3Rpb24gPSAndXAnXG4gICAgICAgICAgICAgIGVsc2UgaWYobGFzdFkgPiBmaXJzdFkpIHNoaXBEaXJlY3Rpb24gPSAnZG93bidcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGxvY2F0aW9uXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gaWYgbGFzdCB0aW1lIHdhc24ndCBhIGhpdCwgdGFrZSBhIHJhbmRvbSBzaG90XG4gICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIC8vIGRlY2xhcmUgZW1wdHkgY29vcmRzIGFycmF5XG4gICAgICAgIGxldCBjb29yZHMgPSBbXVxuXG4gICAgICAgIC8vIGdlbmVyYXRlIHJhbmRvbSBjb29yZGluYXRlc1xuICAgICAgICBjb25zdCB4ID0gTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMClcbiAgICAgICAgY29uc3QgeSA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTApXG5cbiAgICAgICAgLy8gcHVzaCB0aGVtIHRvIHRoZSBhcnJheVxuICAgICAgICBjb29yZHMucHVzaCh4KVxuICAgICAgICBjb29yZHMucHVzaCh5KVxuXG4gICAgICAgIC8vIGZpbmQgdGhlIGNvcnJlY3QgbG9jYXRpb24gb24gdGFyZ2V0IGJvYXJkXG4gICAgICAgIGxldCBsb2NhdGlvbiA9IHRhcmdldEJvYXJkLmZpbmQoYm94ID0+IGJveC5jb29yZGluYXRlcy5ldmVyeSgoY29vcmQsIGluZGV4KSA9PiBjb29yZCA9PT0gY29vcmRzW2luZGV4XSkpXG5cbiAgICAgICAgLy8gaWYgdGhlIGxvY2F0aW9uIGlzbid0IGF0dGFja2VkXG4gICAgICAgIGlmKCFsb2NhdGlvbi5hdHRhY2tlZCkge1xuICAgICAgICAgIC8vIGF0dGFjayBpdFxuICAgICAgICAgIHRhcmdldC5nYW1lQm9hcmQucmVjZWl2ZUF0dGFjayhsb2NhdGlvbi5jb29yZGluYXRlcylcbiAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhIHNoaXAgYXQgdGhlIGxvY2F0aW9uXG4gICAgICAgICAgaWYobG9jYXRpb24uc2hpcCkge1xuICAgICAgICAgICAgLy8gaWYgc2hpcCBzdW5rKHRoZSBzaGlwIHdpdGggbGVuZ3RoIG9mIDEpXG4gICAgICAgICAgICBpZihsb2NhdGlvbi5zaGlwLmlzU3VuaykgcmV0dXJuIGxvY2F0aW9uXG5cbiAgICAgICAgICAgIC8vIGlmIHNoaXAgZGlkbid0IHNpbmtcbiAgICAgICAgICAgIC8vIGRlY2xhcmUgdGhpcyB0dXJuIGFzIGEgaGl0XG4gICAgICAgICAgICBsYXN0VHVybkhpdCA9IHRydWVcbiAgICAgICAgICAgIC8vIHN0b3JlIHRoZSBjb29yZGluYXRlcyB3aGVyZSBpdCBoaXRcbiAgICAgICAgICAgIGZpcnN0SGl0ID0gbG9jYXRpb24uY29vcmRpbmF0ZXNcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGxvY2F0aW9uXG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgbG9jYXRpb24gaXMgYXR0YWNrZWQsIHJlcGVhdCB0byBnZXQgYW5vdGhlciBsb2NhdGlvblxuICAgICAgfVxuICAgIH1cbiAgfVxufSIsImltcG9ydCBzdGFydEdhbWUgZnJvbSBcIi4vc3RhcnRHYW1lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXBhcmVHYW1lKHBsYXllciwgQUkpIHtcblxuICBjb25zdCBwbGF5ZXJCb2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXItYm9hcmQnKVxuXG4gIC8vIHJlbmRlciB0aGUgcGxheWVyIGJvYXJkXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBwbGF5ZXIuYm9hcmQubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGJveC5pZCA9IGBwJHtpfWBcbiAgICBib3guY2xhc3NMaXN0LmFkZCgnYm94JylcbiAgICAvLyBzaG93cyBzaGlwcyBvbiB0aGUgYm9hcmRcbiAgICBpZihwbGF5ZXIuYm9hcmRbaV0uc2hpcCkgYm94LmNsYXNzTGlzdC5hZGQoJ2NvbnRhaW4tc2hpcCcpXG4gICAgcGxheWVyQm9hcmQuYXBwZW5kKGJveClcbiAgfVxufSJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlc3QiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJuIiwiZ2V0dGVyIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInAiLCJiIiwiYmFzZVVSSSIsInNlbGYiLCJocmVmIiwibmMiLCJTaGlwIiwibGVuIiwiYXJndW1lbnRzIiwic2hpcENvb3JkaW5hdGVzIiwiaGl0cyIsImlzU3VuayIsImFkZENvb3JkaW5hdGVzIiwiY29vcmQiLCJoaXQiLCJHYW1lQm9hcmQiLCJib2FyZCIsInNoaXBzIiwic3Vua1NoaXBzIiwidG90YWxIaXRzIiwieCIsInkiLCJib3giLCJwbGFjZVNoaXAiLCJjb29yZHMiLCJkaXJlY3Rpb24iLCJjb29yZHNDb3B5IiwiY2hvc2VuTG9jYXRpb24iLCJmaW5kIiwiY29vcmRpbmF0ZXMiLCJldmVyeSIsImF2YWlsYWJsZSIsImJhdHRsZXNoaXAiLCJjb29yZGluYXRlc0NvcHkiLCJjdXJyZW50Q29vcmRzIiwiYWRqYWNlbnRMb2NhdGlvbnMiLCJzaGlwIiwiZm9yRWFjaCIsImN1cnJlbnQiLCJyZWNlaXZlQXR0YWNrIiwiYXR0YWNrZWQiLCJnZXRBZGphY2VudEJveGVzIiwiZmlsdGVyIiwiaGFzQXJtZWRTaGlwcyIsImFybWVkU2hpcHMiLCJwbGF5ZXIiLCJwbGF5ZXJOYW1lIiwiZ2FtZUJvYXJkIiwibmFtZSIsInNob290IiwiUGxheWVyIiwiQUkiLCJwbGF5ZXJCb2FyZCIsImdldEVsZW1lbnRCeUlkIiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kIiwicHJlcGFyZUdhbWUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVsb2FkIl0sInNvdXJjZVJvb3QiOiIifQ==