(()=>{"use strict";var n={772:(n,e,t)=>{t.d(e,{Z:()=>u});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),c=t(667),s=t.n(c),d=new URL(t(265),t.b),l=i()(o()),p=s()(d);l.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url("+p+');\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  margin-top: 50px;\n  width: 500px;\n  height: 500px;\n}\n\n.box {\n  border: 1px solid black;\n}\n\n.AI-box {\n  cursor: crosshair;\n}\n\n.AI-box:hover {\n  background-color: #6200ff;\n}\n\n.details h1 {\n  font-size: 60px\n}\n\n.details p {\n  font-size: 30px;\n  text-align: center;\n}\n\n.contain-ship {\n  background-color: azure;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}\n\n.ship-hit {\n  background-color: #2354da;\n}\n\n.ship-hit::after {\n  position: absolute;\n  content: "\\274c";\n  font-size: 40px; \n  color: #FFF;\n}\n\n.ship-hit:hover {\n  cursor: not-allowed;\n  background-color: #2354da;\n}\n\n\n\n',"",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;EACE,mDAAgD;EAChD,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,yBAAyB;EACzB,gBAAgB;EAChB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE;AACF;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,yBAAyB;AAC3B",sourcesContent:['* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url(../assets/images/background.jpg);\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  margin-top: 50px;\n  width: 500px;\n  height: 500px;\n}\n\n.box {\n  border: 1px solid black;\n}\n\n.AI-box {\n  cursor: crosshair;\n}\n\n.AI-box:hover {\n  background-color: #6200ff;\n}\n\n.details h1 {\n  font-size: 60px\n}\n\n.details p {\n  font-size: 30px;\n  text-align: center;\n}\n\n.contain-ship {\n  background-color: azure;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}\n\n.ship-hit {\n  background-color: #2354da;\n}\n\n.ship-hit::after {\n  position: absolute;\n  content: "\\274c";\n  font-size: 40px; \n  color: #FFF;\n}\n\n.ship-hit:hover {\n  cursor: not-allowed;\n  background-color: #2354da;\n}\n\n\n\n'],sourceRoot:""}]);const u=l},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],d=r.base?s[0]+r.base:s[0],l=a[d]||0,p="".concat(d," ").concat(l);a[d]=l+1;var u=t(p),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(A);else{var h=o(A,r);r.byIndex=c,e.splice(c,0,{identifier:p,updater:h,references:1})}i.push(p)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var s=r(n,o),d=0;d<a.length;d++){var l=t(a[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},265:(n,e,t)=>{n.exports=t.p+"assets/images/background.jpg"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{function n(n){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const t=n;let r=0,o=!1;return{get length(){return t},get id(){return e},get hits(){return r},get isSunk(){return o},hit(){r++,r===t&&(o=!0)}}}function e(){let e=[],t=[],r=[],o=0,a=1,i=1;for(let n=0;n<100;n++){let n={coordinates:[a,i],ship:null,attacked:!1,available:!0};e.push(n),a++,a>10&&(a=1,i++)}return{get board(){return e},get sunkShips(){return r},get totalHits(){return o},get ships(){return t},placeShip(r,o,a){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;if("right"===o&&r[0]+a>10)return"ship exceeding boundaries";if("up"===o&&r[1]-a<1)return"ship exceeding boundaries";let c=[...r];for(let n=0;n<a;n++){0!==n&&("right"===o?c[0]++:c[1]--);let t=e.find((n=>n.coordinates.every(((n,e)=>n===c[e]))));if(!t)return"No such coordinates";if(!t.available)return"Some of the space is unavailable"}const s=new n(a,i);t.push(s);for(let n=0;n<a;n++){0!==n&&("right"===o?r[0]++:r[1]--);let t=[[r[0]-1,r[1]],[r[0]+1,r[1]],[r[0]-1,r[1]+1],[r[0]-1,r[1]-1],[r[0]+1,r[1]-1],[r[0]+1,r[1]+1],[r[0],r[1]+1],[r[0],r[1]-1]],a=e.find((n=>n.coordinates.every(((n,e)=>n===r[e]))));a.ship=s,a.available=!1,t.forEach((n=>{let t=e.find((e=>e.coordinates.every(((e,t)=>e===n[t]))));t&&(t.available=!1)}))}},receiveAttack(n){const t=e.find((e=>e.coordinates.every(((e,t)=>e===n[t]))));void 0===t||t.attacked||(t.attacked=!0,o++,t.ship&&(t.ship.hit(),t.ship.isSunk&&r.push(t.ship)))},hasArmedShips(){let n=!1;return t.forEach((e=>{e.isSunk||(n=!0)})),n}}}var r=t(379),o=t.n(r),a=t(795),i=t.n(a),c=t(569),s=t.n(c),d=t(565),l=t.n(d),p=t(216),u=t.n(p),A=t(589),h=t.n(A),g=t(772),f={};f.styleTagTransform=h(),f.setAttributes=l(),f.insert=s().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=u(),o()(g.Z,f),g.Z&&g.Z.locals&&g.Z.locals,function(){const n=function(n){const t=new e;return{name:"player",gameBoard:t,get board(){return t.board},placeShip(n,e,r){t.placeShip(n,e,r)},shoot(n,e){n.gameBoard.receiveAttack(e)}}}(),t=function(){const n=new e;return{name:"AI",gameBoard:n,get board(){return n.board},placeShip(e){const t=crypto.randomUUID();for(;;){let r=[];const o=Math.ceil(10*Math.random()),a=Math.ceil(10*Math.random());r.push(o),r.push(a);const i=["right","up"],c=i[Math.floor(Math.random()*i.length)];n.placeShip(r,c,e,t);let s=n.board.find((n=>n.coordinates.every(((n,e)=>n===r[e]))));if(null!=s.ship&&s.ship.id===t)return}},shoot(n){for(;;){let e=[];const t=Math.ceil(10*Math.random()),r=Math.ceil(10*Math.random());e.push(t),e.push(r);let o=n.gameBoard.board.find((n=>n.coordinates.every(((n,t)=>n===e[t]))));if(!o.attacked)return n.gameBoard.receiveAttack(o.coordinates),o}}}}();n.placeShip([1,1],"right",1),n.placeShip([1,3],"right",2),n.placeShip([1,5],"right",3),n.placeShip([1,7],"right",4),n.placeShip([1,9],"right",5),n.placeShip([10,10],"up",6),t.placeShip(1),t.placeShip(2),t.placeShip(5),t.placeShip(5);const r=document.getElementById("player-board"),o=document.getElementById("AI-board");for(let e=0;e<n.board.length;e++){const t=document.createElement("div");t.id=`num${e}`,t.classList.add("box"),n.board[e].ship&&t.classList.add("contain-ship"),r.append(t)}for(let e=0;e<t.board.length;e++){const r=document.createElement("div");r.classList.add("AI-box","box"),t.board[e].ship&&r.classList.add("contain-ship"),r.addEventListener("click",(()=>{if(t.board[e].attacked)return;n.shoot(t,t.board[e].coordinates),t.board[e].ship?r.classList.add("ship-hit"):r.classList.add("attacked");const o=n.board.indexOf(t.shoot(n)),a=document.querySelector(`#player-board > #num${o}`);n.board[o].ship?a.classList.add("ship-hit"):a.classList.add("attacked"),d()})),o.append(r)}const a=document.querySelector("#player-details h1"),i=document.querySelector("#AI-details h1"),c=document.querySelector("#player-details p"),s=document.querySelector("#AI-details p");function d(){c.textContent="Ships alive: "+(n.gameBoard.ships.length-n.gameBoard.sunkShips.length),s.textContent="Ships alive: "+(t.gameBoard.ships.length-t.gameBoard.sunkShips.length)}a.textContent=n.name,i.textContent=t.name,d()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,