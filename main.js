(()=>{"use strict";var n={884:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,".hidden {\n  display: none\n}\n\n.player h1 {\n  text-align: center;\n  font-size: 40px;\n}\n\n.player h2 {\n  text-align: center;\n  font-size: 30px;\n  margin-bottom: 10px;\n}","",{version:3,sources:["webpack://./src/styles/prepare-game.css"],names:[],mappings:"AAAA;EACE;AACF;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,mBAAmB;AACrB",sourcesContent:[".hidden {\n  display: none\n}\n\n.player h1 {\n  text-align: center;\n  font-size: 40px;\n}\n\n.player h2 {\n  text-align: center;\n  font-size: 30px;\n  margin-bottom: 10px;\n}"],sourceRoot:""}]);const s=i},772:(n,e,t)=>{t.d(e,{Z:()=>p});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),s=t(667),c=t.n(s),l=new URL(t(265),t.b),d=i()(r()),A=c()(l);d.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url("+A+');\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n  margin-top: 50px;\n\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  width: 500px;\n  height: 500px;\n  transition: all 0.1s ease-in-out;\n}\n\n.box {\n  border: 1px solid black;\n}\n\n.AI-box {\n  cursor: crosshair;\n}\n\n.AI-box:hover {\n  background-color: #6200ff;\n}\n\n.details h1 {\n  font-size: 60px\n}\n\n.details p {\n  font-size: 30px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n}\n\n.highlight {\n  background-color: #6200ff;\n}\n\n.contain-ship {\n  background-color: azure;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}\n\n.ship-hit {\n  background-color: #2354da;\n}\n\n.ship-hit::after {\n  position: absolute;\n  content: "\\274c";\n  font-size: 40px; \n  color: #FFF;\n}\n\n.ship-hit:hover {\n  cursor: not-allowed;\n  background-color: #2354da;\n}\n\n\n\n',"",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;EACE,mDAAgD;EAChD,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,mBAAmB;EACnB,gBAAgB;;AAElB;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,yBAAyB;EACzB,YAAY;EACZ,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE;AACF;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gCAAgC;AAClC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,yBAAyB;AAC3B",sourcesContent:['* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url(../assets/images/background.jpg);\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n  margin-top: 50px;\n\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  width: 500px;\n  height: 500px;\n  transition: all 0.1s ease-in-out;\n}\n\n.box {\n  border: 1px solid black;\n}\n\n.AI-box {\n  cursor: crosshair;\n}\n\n.AI-box:hover {\n  background-color: #6200ff;\n}\n\n.details h1 {\n  font-size: 60px\n}\n\n.details p {\n  font-size: 30px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n}\n\n.highlight {\n  background-color: #6200ff;\n}\n\n.contain-ship {\n  background-color: azure;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}\n\n.ship-hit {\n  background-color: #2354da;\n}\n\n.ship-hit::after {\n  position: absolute;\n  content: "\\274c";\n  font-size: 40px; \n  color: #FFF;\n}\n\n.ship-hit:hover {\n  cursor: not-allowed;\n  background-color: #2354da;\n}\n\n\n\n'],sourceRoot:""}]);const p=d},561:(n,e,t)=>{t.d(e,{Z:()=>p});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),s=t(667),c=t.n(s),l=new URL(t(265),t.b),d=i()(r()),A=c()(l);d.push([n.id,".overlay {\n  position: fixed;\n  display: none;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.winner-overlay {\n  position: fixed;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 30px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: url("+A+");\n  width: 600px;\n  height: 300px;\n  box-shadow: 2px 0px 10px #242424;\n}\n\n.winner-overlay h1 {\n  font-size: 60px\n}\n\n.winner-overlay p {\n  background-color: #2389da;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 10px 25px;\n  cursor: pointer;\n}\n\n.winner-overlay p:hover {\n  background-color: #6200ff;\n}\n\n","",{version:3,sources:["webpack://./src/styles/winner-overlay.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,aAAa;EACb,MAAM;EACN,OAAO;EACP,YAAY;EACZ,aAAa;EACb,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;EACb,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,mDAAgD;EAChD,YAAY;EACZ,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE;AACF;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B",sourcesContent:[".overlay {\n  position: fixed;\n  display: none;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.winner-overlay {\n  position: fixed;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 30px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: url(../assets/images/background.jpg);\n  width: 600px;\n  height: 300px;\n  box-shadow: 2px 0px 10px #242424;\n}\n\n.winner-overlay h1 {\n  font-size: 60px\n}\n\n.winner-overlay p {\n  background-color: #2389da;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 10px 25px;\n  cursor: pointer;\n}\n\n.winner-overlay p:hover {\n  background-color: #6200ff;\n}\n\n"],sourceRoot:""}]);const p=d},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],l=o.base?c[0]+o.base:c[0],d=a[l]||0,A="".concat(l," ").concat(d);a[l]=d+1;var p=t(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var h=r(u,o);o.byIndex=s,e.splice(s,0,{identifier:A,updater:h,references:1})}i.push(A)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=o(n,r),l=0;l<a.length;l++){var d=t(a[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},265:(n,e,t)=>{n.exports=t.p+"assets/images/background.jpg"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");o.length&&(n=o[o.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{function n(n,e){const t=document.getElementById("player-board"),o=document.getElementById("AI-board"),r=document.querySelector(".player > h1"),a=document.querySelector("#AI-player");r.classList.add("hidden"),a.classList.remove("hidden"),t.innerHTML="";for(let e=0;e<n.board.length;e++){const o=document.createElement("div");o.id=`p${e}`,o.classList.add("box"),n.board[e].ship&&o.classList.add("contain-ship"),t.append(o)}for(let r=0;r<e.board.length;r++){const a=document.createElement("div");a.id=e.board[r].coordinates,a.classList.add("AI-box","box"),e.board[r].ship&&a.classList.add("contain-ship"),a.addEventListener("click",(()=>{if(e.board[r].attacked)return;n.shoot(e,e.board[r].coordinates),e.board[r].ship?(a.classList.add("ship-hit"),e.board[r].ship.isSunk&&(o.style.backgroundColor="red",l.style.color="red",setTimeout((()=>{o.style.backgroundColor="#2389da",l.style.color="#fff"}),50),e.board[r].ship.shipCoordinates.forEach((n=>{e.gameBoard.getAdjacentBoxes(n).forEach((n=>{document.getElementById(n.coordinates).classList.add("attacked")}))})),A())):a.classList.add("attacked");const i=n.board.indexOf(e.shoot(n)),s=document.querySelector(`#player-board > #p${i}`);n.board[i].ship?(s.classList.add("ship-hit"),n.board[i].ship.isSunk&&(t.style.backgroundColor="red",c.style.color="red",setTimeout((()=>{t.style.backgroundColor="#2389da",c.style.color="#fff"}),50),n.board[i].ship.shipCoordinates.forEach((e=>{n.gameBoard.getAdjacentBoxes(e).forEach((e=>{const t=n.board.find((n=>n.coordinates.every(((n,t)=>n===e.coordinates[t])))),o=n.board.indexOf(t);document.getElementById(`p${o}`).classList.add("attacked")}))})),A())):s.classList.add("attacked"),d()})),o.append(a)}const i=document.querySelector("#player-details h1"),s=document.querySelector("#AI-details h1"),c=document.querySelector("#player-details p"),l=document.querySelector("#AI-details p");function d(){c.textContent="Ships alive: "+(n.gameBoard.ships.length-n.gameBoard.sunkShips.length),l.textContent="Ships alive: "+(e.gameBoard.ships.length-e.gameBoard.sunkShips.length)}function A(){const t=document.querySelector(".overlay"),o=document.querySelector(".winner-overlay"),r=document.querySelector(".winner-overlay > h1");n.gameBoard.ships.length===n.gameBoard.sunkShips.length?(t.style.display="block",r.textContent="Computer won!",o.style.display="flex"):e.gameBoard.ships.length===e.gameBoard.sunkShips.length&&(t.style.display="block",r.textContent="Player won!",o.style.display="flex")}i.textContent=n.name,s.textContent=e.name,d()}function e(n){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const t=n,o=[];let r=0,a=!1;return{get length(){return t},get shipCoordinates(){return o},get id(){return e},get hits(){return r},get isSunk(){return a},addCoordinates(n){o.push(n)},hit(){r++,r===t&&(a=!0)}}}function o(){let n=[],t=[],o=[],r=0,a=1,i=1;for(let e=0;e<100;e++){let e={coordinates:[a,i],ship:null,attacked:!1,available:!0};n.push(e),a++,a>10&&(a=1,i++)}return{get board(){return n},get sunkShips(){return o},get totalHits(){return r},get ships(){return t},placeShip(o,r,a){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;if("right"===r&&o[0]+a>11)return"ship exceeding boundaries";if("up"===r&&o[1]-a<1)return"ship exceeding boundaries";let s=[...o];for(let e=0;e<a;e++){0!==e&&("right"===r?s[0]++:s[1]--);let t=n.find((n=>n.coordinates.every(((n,e)=>n===s[e]))));if(!t)return"No such coordinates";if(!t.available)return"Some of the space is unavailable"}const c=new e(a,i);t.push(c);let l=[...o];for(let n=0;n<a;n++){let n=[...l];"right"===r?l[0]++:l[1]--,c.addCoordinates(n)}for(let e=0;e<a;e++){0!==e&&("right"===r?o[0]++:o[1]--);let[t,a]=o,i=[[t-1,a],[t+1,a],[t-1,a+1],[t-1,a-1],[t+1,a+1],[t+1,a-1],[t,a+1],[t,a-1]],s=n.find((n=>n.coordinates.every(((n,e)=>n===o[e]))));s.ship=c,s.ship.coordinates=s.coordinates,s.available=!1,i.forEach((e=>{let t=n.find((n=>n.coordinates.every(((n,t)=>n===e[t]))));t&&(t.available=!1)}))}},receiveAttack(e){const t=n.find((n=>n.coordinates.every(((n,t)=>n===e[t]))));void 0===t||t.attacked||(t.attacked=!0,r++,t.ship&&(t.ship.hit(),t.ship.isSunk&&o.push(t.ship)))},getAdjacentBoxes(n){const[e,t]=n;return[[e-1,t],[e+1,t],[e-1,t+1],[e-1,t-1],[e+1,t+1],[e+1,t-1],[e,t+1],[e,t-1]].map((n=>this.board.find((e=>e.coordinates.every(((e,t)=>e===n[t])))))).filter((n=>void 0!==n))},hasArmedShips(){let n=!1;return t.forEach((e=>{e.isSunk||(n=!0)})),n}}}var r=t(379),a=t.n(r),i=t(795),s=t.n(i),c=t(569),l=t.n(c),d=t(565),A=t.n(d),p=t(216),u=t.n(p),h=t(589),g=t.n(h),f=t(772),m={};m.styleTagTransform=g(),m.setAttributes=A(),m.insert=l().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=u(),a()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;var b=t(561),E={};E.styleTagTransform=g(),E.setAttributes=A(),E.insert=l().bind(null,"head"),E.domAPI=s(),E.insertStyleElement=u(),a()(b.Z,E),b.Z&&b.Z.locals&&b.Z.locals;var y=t(884),C={};C.styleTagTransform=g(),C.setAttributes=A(),C.insert=l().bind(null,"head"),C.domAPI=s(),C.insertStyleElement=u(),a()(y.Z,C),y.Z&&y.Z.locals&&y.Z.locals,function(e,t){const o=document.getElementById("player-board"),r=[5,5,3,2,2,2,1];let a=0;for(let s=0;s<e.board.length;s++){const c=document.createElement("div");c.id=e.board[s].coordinates,c.classList.add("box","pre-game"),c.addEventListener("mouseover",(()=>{i.forEach((n=>{n.classList.remove("highlight");{const e=c.id.split(","),t=+e[0],o=+e[1],i=n.id.split(","),s=+i[0],l=+i[1];if(t<=s&&s<t+r[a]&&l===o){if(t+r[a]>11)return;n.classList.add("highlight")}}}))})),c.addEventListener("click",(()=>{const o=c.id.split(","),i=[];i.push(+o[0]),i.push(+o[1]),e.placeShip(i,"right",r[a]),e.gameBoard.ships.length>a&&(a++,document.querySelectorAll(".highlight").forEach((n=>{n.classList.add("contain-ship")}))),r[a]||n(e,t)})),o.append(c)}const i=document.querySelectorAll(".pre-game")}(function(n){const e=new o;return{name:"player",gameBoard:e,get board(){return e.board},placeShip(n,t,o){e.placeShip(n,t,o)},shoot(n,e){n.gameBoard.receiveAttack(e)}}}(),function(){const n=new o;let e=!0;return{name:"AI",gameBoard:n,get board(){return n.board},placeShip(t){const o=crypto.randomUUID();let r=0;for(;r<1e3;){r++;let a=[];const i=Math.ceil(10*Math.random()),s=Math.ceil(10*Math.random());a.push(i),a.push(s);const c=["right","up"],l=c[Math.floor(Math.random()*c.length)];n.placeShip(a,l,t,o);let d=n.board.find((n=>n.coordinates.every(((n,e)=>n===a[e]))));if(null!=d.ship&&d.ship.id===o)return void(e=!0)}},shoot(n){for(;;){let e=[];const t=Math.ceil(10*Math.random()),o=Math.ceil(10*Math.random());e.push(t),e.push(o);let r=n.gameBoard.board.find((n=>n.coordinates.every(((n,t)=>n===e[t]))));if(!r.attacked)return n.gameBoard.receiveAttack(r.coordinates),r}}}}()),document.querySelector(".winner-overlay > p").addEventListener("click",(()=>{window.location.reload()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,