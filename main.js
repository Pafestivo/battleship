(()=>{"use strict";var n={884:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,".hidden {\n  display: none\n}\n\n.player h1 {\n  text-align: center;\n  font-size: 40px;\n  margin-bottom: 10px;\n}\n\n.direction {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n}\n\n.player h2 {\n  font-size: 30px;\n}\n\n.rotate {\n  background-color: white;\n  color: black;\n  margin: 0 0 10px 10px;\n  width: max-content;\n  text-align: center;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 5px 15px;\n  cursor: pointer;\n}\n\n.rotate:hover {\n  background-color: rgb(199, 199, 199);\n}","",{version:3,sources:["webpack://./src/styles/prepare-game.css"],names:[],mappings:"AAAA;EACE;AACF;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,YAAY;EACZ,qBAAqB;EACrB,kBAAkB;EAClB,kBAAkB;EAClB,kBAAkB;EAClB,eAAe;EACf,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,oCAAoC;AACtC",sourcesContent:[".hidden {\n  display: none\n}\n\n.player h1 {\n  text-align: center;\n  font-size: 40px;\n  margin-bottom: 10px;\n}\n\n.direction {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n}\n\n.player h2 {\n  font-size: 30px;\n}\n\n.rotate {\n  background-color: white;\n  color: black;\n  margin: 0 0 10px 10px;\n  width: max-content;\n  text-align: center;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 5px 15px;\n  cursor: pointer;\n}\n\n.rotate:hover {\n  background-color: rgb(199, 199, 199);\n}"],sourceRoot:""}]);const s=i},772:(n,e,t)=>{t.d(e,{Z:()=>p});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),s=t(667),c=t.n(s),l=new URL(t(265),t.b),d=i()(r()),A=c()(l);d.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url("+A+');\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n  margin-top: 50px;\n\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  width: 500px;\n  height: 500px;\n  transition: all 0.1s ease-in-out;\n}\n\n.box {\n  border: 1px solid black;\n}\n\n.AI-box {\n  cursor: crosshair;\n}\n\n.AI-box:hover {\n  background-color: #6200ff;\n}\n\n.details h1 {\n  font-size: 60px\n}\n\n.details p {\n  font-size: 30px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n}\n\n.highlight {\n  background-color: #6200ff;\n}\n\n.contain-ship {\n  background-color: azure;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}\n\n.ship-hit {\n  background-color: #2354da;\n}\n\n.ship-hit::after {\n  position: absolute;\n  content: "\\274c";\n  font-size: 40px; \n  color: #FFF;\n}\n\n.ship-hit:hover {\n  cursor: not-allowed;\n  background-color: #2354da;\n}\n\n\n\n',"",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;EACE,mDAAgD;EAChD,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,mBAAmB;EACnB,gBAAgB;;AAElB;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,yBAAyB;EACzB,YAAY;EACZ,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE;AACF;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gCAAgC;AAClC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,yBAAyB;AAC3B",sourcesContent:['* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: url(../assets/images/background.jpg);\n  color: white;\n}\n\n#page-title {\n  text-align: center;\n  margin-top: 65px;\n  font-size: 100px;\n}\n\n#game-container {\n  display: flex;\n  column-gap: 70px;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: max-content;\n  margin-top: 50px;\n\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  background-color: #2389da;\n  width: 500px;\n  height: 500px;\n  transition: all 0.1s ease-in-out;\n}\n\n.box {\n  border: 1px solid black;\n}\n\n.AI-box {\n  cursor: crosshair;\n}\n\n.AI-box:hover {\n  background-color: #6200ff;\n}\n\n.details h1 {\n  font-size: 60px\n}\n\n.details p {\n  font-size: 30px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n}\n\n.highlight {\n  background-color: #6200ff;\n}\n\n.contain-ship {\n  background-color: azure;\n}\n\n.attacked {\n  background-color: #da2323;\n  cursor: not-allowed;\n}\n\n.attacked:hover {\n  background-color: #da2323;\n}\n\n.ship-hit {\n  background-color: #2354da;\n}\n\n.ship-hit::after {\n  position: absolute;\n  content: "\\274c";\n  font-size: 40px; \n  color: #FFF;\n}\n\n.ship-hit:hover {\n  cursor: not-allowed;\n  background-color: #2354da;\n}\n\n\n\n'],sourceRoot:""}]);const p=d},561:(n,e,t)=>{t.d(e,{Z:()=>p});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),s=t(667),c=t.n(s),l=new URL(t(265),t.b),d=i()(r()),A=c()(l);d.push([n.id,".overlay {\n  position: fixed;\n  display: none;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.winner-overlay {\n  position: fixed;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 30px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: url("+A+");\n  width: 600px;\n  height: 300px;\n  box-shadow: 2px 0px 10px #242424;\n}\n\n.winner-overlay h1 {\n  font-size: 60px\n}\n\n.winner-overlay p {\n  background-color: #2389da;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 10px 25px;\n  cursor: pointer;\n}\n\n.winner-overlay p:hover {\n  background-color: #6200ff;\n}\n\n","",{version:3,sources:["webpack://./src/styles/winner-overlay.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,aAAa;EACb,MAAM;EACN,OAAO;EACP,YAAY;EACZ,aAAa;EACb,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;EACb,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,mDAAgD;EAChD,YAAY;EACZ,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE;AACF;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B",sourcesContent:[".overlay {\n  position: fixed;\n  display: none;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.winner-overlay {\n  position: fixed;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 30px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: url(../assets/images/background.jpg);\n  width: 600px;\n  height: 300px;\n  box-shadow: 2px 0px 10px #242424;\n}\n\n.winner-overlay h1 {\n  font-size: 60px\n}\n\n.winner-overlay p {\n  background-color: #2389da;\n  border-radius: 5px;\n  font-size: 20px;\n  padding: 10px 25px;\n  cursor: pointer;\n}\n\n.winner-overlay p:hover {\n  background-color: #6200ff;\n}\n\n"],sourceRoot:""}]);const p=d},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],l=o.base?c[0]+o.base:c[0],d=a[l]||0,A="".concat(l," ").concat(d);a[l]=d+1;var p=t(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var h=r(u,o);o.byIndex=s,e.splice(s,0,{identifier:A,updater:h,references:1})}i.push(A)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=o(n,r),l=0;l<a.length;l++){var d=t(a[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},265:(n,e,t)=>{n.exports=t.p+"assets/images/background.jpg"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");o.length&&(n=o[o.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{function n(n,e){const t=document.getElementById("player-board"),o=document.getElementById("AI-board"),r=document.querySelector(".player > h1"),a=document.querySelector("#AI-player");r.classList.add("hidden"),a.classList.remove("hidden"),t.innerHTML="";for(let e=0;e<n.board.length;e++){const o=document.createElement("div");o.id=`p${e}`,o.classList.add("box"),n.board[e].ship&&o.classList.add("contain-ship"),t.append(o)}for(let r=0;r<e.board.length;r++){const a=document.createElement("div");a.id=e.board[r].coordinates,a.classList.add("AI-box","box"),a.addEventListener("click",(()=>{if(e.board[r].attacked)return;n.shoot(e,e.board[r].coordinates),e.board[r].ship?(a.classList.add("ship-hit"),e.board[r].ship.isSunk&&(o.style.backgroundColor="red",l.style.color="red",setTimeout((()=>{o.style.backgroundColor="#2389da",l.style.color="#fff"}),50),e.board[r].ship.shipCoordinates.forEach((n=>{e.gameBoard.getAdjacentBoxes(n).forEach((n=>{document.getElementById(n.coordinates).classList.add("attacked")}))})),A())):a.classList.add("attacked");const i=n.board.indexOf(e.shoot(n)),s=document.querySelector(`#player-board > #p${i}`);n.board[i].ship?(s.classList.add("ship-hit"),n.board[i].ship.isSunk&&(t.style.backgroundColor="red",c.style.color="red",setTimeout((()=>{t.style.backgroundColor="#2389da",c.style.color="#fff"}),50),n.board[i].ship.shipCoordinates.forEach((e=>{n.gameBoard.getAdjacentBoxes(e).forEach((e=>{const t=n.board.find((n=>n.coordinates.every(((n,t)=>n===e.coordinates[t])))),o=n.board.indexOf(t);document.getElementById(`p${o}`).classList.add("attacked")}))})),A())):s.classList.add("attacked"),d()})),o.append(a)}const i=document.querySelector("#player-details h1"),s=document.querySelector("#AI-details h1"),c=document.querySelector("#player-details p"),l=document.querySelector("#AI-details p");function d(){c.textContent="Ships alive: "+(n.gameBoard.ships.length-n.gameBoard.sunkShips.length),l.textContent="Ships alive: "+(e.gameBoard.ships.length-e.gameBoard.sunkShips.length)}function A(){const t=document.querySelector(".overlay"),o=document.querySelector(".winner-overlay"),r=document.querySelector(".winner-overlay > h1");n.gameBoard.ships.length===n.gameBoard.sunkShips.length?(t.style.display="block",r.textContent="Computer won!",o.style.display="flex"):e.gameBoard.ships.length===e.gameBoard.sunkShips.length&&(t.style.display="block",r.textContent="Player won!",o.style.display="flex")}i.textContent=n.name,s.textContent=e.name,d()}function e(n){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const t=n,o=[];let r=0,a=!1;return{get length(){return t},get shipCoordinates(){return o},get id(){return e},get hits(){return r},get isSunk(){return a},addCoordinates(n){o.push(n)},hit(){r++,r===t&&(a=!0)}}}function o(){let n=[],t=[],o=[],r=0,a=1,i=1;for(let e=0;e<100;e++){let e={coordinates:[a,i],ship:null,attacked:!1,available:!0};n.push(e),a++,a>10&&(a=1,i++)}return{get board(){return n},get sunkShips(){return o},get totalHits(){return r},get ships(){return t},placeShip(o,r,a){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;if("right"===r&&o[0]+a>11)return"ship exceeding boundaries";if("down"===r&&o[1]+a>11)return"ship exceeding boundaries";let s=[...o];for(let e=0;e<a;e++){0!==e&&("right"===r?s[0]++:s[1]++);let t=n.find((n=>n.coordinates.every(((n,e)=>n===s[e]))));if(!t)return"No such coordinates";if(!t.available)return"Some of the space is unavailable"}const c=new e(a,i);t.push(c);let l=[...o];for(let n=0;n<a;n++){let n=[...l];"right"===r?l[0]++:l[1]++,c.addCoordinates(n)}for(let e=0;e<a;e++){0!==e&&("right"===r?o[0]++:o[1]++);let[t,a]=o,i=[[t-1,a],[t+1,a],[t-1,a+1],[t-1,a-1],[t+1,a+1],[t+1,a-1],[t,a+1],[t,a-1]],s=n.find((n=>n.coordinates.every(((n,e)=>n===o[e]))));s.ship=c,s.ship.coordinates=s.coordinates,s.available=!1,i.forEach((e=>{let t=n.find((n=>n.coordinates.every(((n,t)=>n===e[t]))));t&&(t.available=!1)}))}},receiveAttack(e){const t=n.find((n=>n.coordinates.every(((n,t)=>n===e[t]))));void 0===t||t.attacked||(t.attacked=!0,r++,t.ship&&(t.ship.hit(),t.ship.isSunk&&o.push(t.ship)))},getAdjacentBoxes(n){const[e,t]=n;return[[e-1,t],[e+1,t],[e-1,t+1],[e-1,t-1],[e+1,t+1],[e+1,t-1],[e,t+1],[e,t-1]].map((n=>this.board.find((e=>e.coordinates.every(((e,t)=>e===n[t])))))).filter((n=>void 0!==n))},hasArmedShips(){let n=!1;return t.forEach((e=>{e.isSunk||(n=!0)})),n}}}var r=t(379),a=t.n(r),i=t(795),s=t.n(i),c=t(569),l=t.n(c),d=t(565),A=t.n(d),p=t(216),u=t.n(p),h=t(589),g=t.n(h),f=t(772),m={};m.styleTagTransform=g(),m.setAttributes=A(),m.insert=l().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=u(),a()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;var E=t(561),b={};b.styleTagTransform=g(),b.setAttributes=A(),b.insert=l().bind(null,"head"),b.domAPI=s(),b.insertStyleElement=u(),a()(E.Z,b),E.Z&&E.Z.locals&&E.Z.locals;var C=t(884),y={};y.styleTagTransform=g(),y.setAttributes=A(),y.insert=l().bind(null,"head"),y.domAPI=s(),y.insertStyleElement=u(),a()(C.Z,y),C.Z&&C.Z.locals&&C.Z.locals,function(e,t){const o=document.getElementById("player-board"),r=[5,5,3,2,2,2,1];let a="right",i=0;const s=document.getElementById("direction-text");document.querySelector(".rotate").addEventListener("click",(()=>{"right"===a?a="down":"down"===a&&(a="right"),s.textContent=a}));for(let s=0;s<e.board.length;s++){const l=document.createElement("div");l.id=e.board[s].coordinates,l.classList.add("box","pre-game"),l.addEventListener("mouseover",(()=>{c.forEach((n=>{n.classList.remove("highlight");const e=l.id.split(","),t=+e[0],o=+e[1],s=n.id.split(","),c=+s[0],d=+s[1];if("right"===a){if(t<=c&&c<t+r[i]&&d===o){if(t+r[i]>11)return;n.classList.add("highlight")}}else if("down"===a&&o<=d&&d<o+r[i]&&c===t){if(o+r[i]>11)return;n.classList.add("highlight")}}))})),l.addEventListener("click",(()=>{const o=l.id.split(","),s=[];s.push(+o[0]),s.push(+o[1]),console.log(e.placeShip(s,a,r[i])),console.log(s),console.log(a),console.log(r[i]),e.gameBoard.ships.length>i&&(i++,document.querySelectorAll(".highlight").forEach((n=>{n.classList.add("contain-ship")}))),r[i]||(t.placeShip(1),t.placeShip(2),t.placeShip(2),t.placeShip(2),t.placeShip(3),t.placeShip(5),t.placeShip(5),n(e,t))})),o.append(l)}const c=document.querySelectorAll(".pre-game")}(function(n){const e=new o;return{name:"player",gameBoard:e,get board(){return e.board},placeShip:(n,t,o)=>e.placeShip(n,t,o),shoot(n,e){n.gameBoard.receiveAttack(e)}}}(),function(){const n=new o;let e=!0;return{name:"AI",gameBoard:n,get board(){return n.board},placeShip(t){const o=crypto.randomUUID();let r=0;for(;r<1e3;){r++;let a=[];const i=Math.ceil(10*Math.random()),s=Math.ceil(10*Math.random());a.push(i),a.push(s);const c=["right","down"],l=c[Math.floor(Math.random()*c.length)];n.placeShip(a,l,t,o);let d=n.board.find((n=>n.coordinates.every(((n,e)=>n===a[e]))));if(null!=d.ship&&d.ship.id===o)return void(e=!0)}},shoot(n){for(;;){let e=[];const t=Math.ceil(10*Math.random()),o=Math.ceil(10*Math.random());e.push(t),e.push(o);let r=n.gameBoard.board.find((n=>n.coordinates.every(((n,t)=>n===e[t]))));if(!r.attacked)return n.gameBoard.receiveAttack(r.coordinates),r}}}}()),document.querySelector(".winner-overlay > p").addEventListener("click",(()=>{window.location.reload()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNLENBQUNDLEVBQU8vRyxJQUFVK0csSUFBVVosRUFBT25HLE9BR2hHLElBQUk4RCxFQUFTNEIsU0FHWCxPQURBbkYsRUFBTzZGLFVBQVU0QyxjQUFjbEYsRUFBUzBCLGFBQ2pDMUIsQ0FHWCxDQUNGLEVBRUosQ0Z0RVdrSCxJQUlPdkssU0FBU0MsY0FBYyx1QkFFL0IrRSxpQkFBaUIsU0FBUyxLQUNsQzlFLE9BQU9tRCxTQUFTbUgsUUFBUSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvcHJlcGFyZS1nYW1lLmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9zdHlsZXMuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL3dpbm5lci1vdmVybGF5LmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9Nb2R1bGVzL3N0YXJ0R2FtZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2NvbnN0cnVjdG9ycy9TaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvY29uc3RydWN0b3JzL0dhbWVCb2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9zdHlsZXMuY3NzP2U0NWIiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvd2lubmVyLW92ZXJsYXkuY3NzP2Q1YzkiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvcHJlcGFyZS1nYW1lLmNzcz9hZmUxIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvTW9kdWxlcy9wcmVwYXJlR2FtZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvY29uc3RydWN0b3JzL1BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2NvbnN0cnVjdG9ycy9BSXBsYXllci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZVxcbn1cXG5cXG4ucGxheWVyIGgxIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogNDBweDtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcblxcbi5kaXJlY3Rpb24ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuLnBsYXllciBoMiB7XFxuICBmb250LXNpemU6IDMwcHg7XFxufVxcblxcbi5yb3RhdGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBjb2xvcjogYmxhY2s7XFxuICBtYXJnaW46IDAgMCAxMHB4IDEwcHg7XFxuICB3aWR0aDogbWF4LWNvbnRlbnQ7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBwYWRkaW5nOiA1cHggMTVweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnJvdGF0ZTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTk5LCAxOTksIDE5OSk7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvcHJlcGFyZS1nYW1lLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZUFBZTtFQUNmLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLHVCQUF1QjtFQUN2QixZQUFZO0VBQ1oscUJBQXFCO0VBQ3JCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLG9DQUFvQztBQUN0Q1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmVcXG59XFxuXFxuLnBsYXllciBoMSB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmb250LXNpemU6IDQwcHg7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG5cXG4uZGlyZWN0aW9uIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcblxcbi5wbGF5ZXIgaDIge1xcbiAgZm9udC1zaXplOiAzMHB4O1xcbn1cXG5cXG4ucm90YXRlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgY29sb3I6IGJsYWNrO1xcbiAgbWFyZ2luOiAwIDAgMTBweCAxMHB4O1xcbiAgd2lkdGg6IG1heC1jb250ZW50O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgcGFkZGluZzogNXB4IDE1cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5yb3RhdGU6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE5OSwgMTk5LCAxOTkpO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4uL2Fzc2V0cy9pbWFnZXMvYmFja2dyb3VuZC5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5ib2R5IHtcXG4gIGJhY2tncm91bmQ6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbiNwYWdlLXRpdGxlIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIG1hcmdpbi10b3A6IDY1cHg7XFxuICBmb250LXNpemU6IDEwMHB4O1xcbn1cXG5cXG4jZ2FtZS1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGNvbHVtbi1nYXA6IDcwcHg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogMTAwdnc7XFxuICBoZWlnaHQ6IG1heC1jb250ZW50O1xcbiAgbWFyZ2luLXRvcDogNTBweDtcXG5cXG59XFxuXFxuLmJvYXJkIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMCwgMWZyKTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMzg5ZGE7XFxuICB3aWR0aDogNTAwcHg7XFxuICBoZWlnaHQ6IDUwMHB4O1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XFxufVxcblxcbi5ib3gge1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxufVxcblxcbi5BSS1ib3gge1xcbiAgY3Vyc29yOiBjcm9zc2hhaXI7XFxufVxcblxcbi5BSS1ib3g6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYyMDBmZjtcXG59XFxuXFxuLmRldGFpbHMgaDEge1xcbiAgZm9udC1zaXplOiA2MHB4XFxufVxcblxcbi5kZXRhaWxzIHAge1xcbiAgZm9udC1zaXplOiAzMHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XFxufVxcblxcbi5oaWdobGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYyMDBmZjtcXG59XFxuXFxuLmNvbnRhaW4tc2hpcCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBhenVyZTtcXG59XFxuXFxuLmF0dGFja2VkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYTIzMjM7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbn1cXG5cXG4uYXR0YWNrZWQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RhMjMyMztcXG59XFxuXFxuLnNoaXAtaGl0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMzU0ZGE7XFxufVxcblxcbi5zaGlwLWhpdDo6YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY29udGVudDogXFxcIlxcXFwyNzRjXFxcIjtcXG4gIGZvbnQtc2l6ZTogNDBweDsgXFxuICBjb2xvcjogI0ZGRjtcXG59XFxuXFxuLnNoaXAtaGl0OmhvdmVyIHtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjM1NGRhO1xcbn1cXG5cXG5cXG5cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3N0eWxlcy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxVQUFVO0VBQ1YsU0FBUztFQUNULHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLG1EQUFnRDtFQUNoRCxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixnQkFBZ0I7RUFDaEIsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixZQUFZO0VBQ1osbUJBQW1CO0VBQ25CLGdCQUFnQjs7QUFFbEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0NBQXNDO0VBQ3RDLHlCQUF5QjtFQUN6QixZQUFZO0VBQ1osYUFBYTtFQUNiLGdDQUFnQztBQUNsQzs7QUFFQTtFQUNFLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFO0FBQ0Y7O0FBRUE7RUFDRSxlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLGdDQUFnQztBQUNsQzs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLGVBQWU7RUFDZixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIseUJBQXlCO0FBQzNCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIioge1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbmJvZHkge1xcbiAgYmFja2dyb3VuZDogdXJsKC4uL2Fzc2V0cy9pbWFnZXMvYmFja2dyb3VuZC5qcGcpO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4jcGFnZS10aXRsZSB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBtYXJnaW4tdG9wOiA2NXB4O1xcbiAgZm9udC1zaXplOiAxMDBweDtcXG59XFxuXFxuI2dhbWUtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBjb2x1bW4tZ2FwOiA3MHB4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiBtYXgtY29udGVudDtcXG4gIG1hcmdpbi10b3A6IDUwcHg7XFxuXFxufVxcblxcbi5ib2FyZCB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDFmcik7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjM4OWRhO1xcbiAgd2lkdGg6IDUwMHB4O1xcbiAgaGVpZ2h0OiA1MDBweDtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xcbn1cXG5cXG4uYm94IHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbn1cXG5cXG4uQUktYm94IHtcXG4gIGN1cnNvcjogY3Jvc3NoYWlyO1xcbn1cXG5cXG4uQUktYm94OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2MjAwZmY7XFxufVxcblxcbi5kZXRhaWxzIGgxIHtcXG4gIGZvbnQtc2l6ZTogNjBweFxcbn1cXG5cXG4uZGV0YWlscyBwIHtcXG4gIGZvbnQtc2l6ZTogMzBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xcbn1cXG5cXG4uaGlnaGxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2MjAwZmY7XFxufVxcblxcbi5jb250YWluLXNoaXAge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogYXp1cmU7XFxufVxcblxcbi5hdHRhY2tlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGEyMzIzO1xcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcXG59XFxuXFxuLmF0dGFja2VkOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYTIzMjM7XFxufVxcblxcbi5zaGlwLWhpdCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjM1NGRhO1xcbn1cXG5cXG4uc2hpcC1oaXQ6OmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcMjc0Y1xcXCI7XFxuICBmb250LXNpemU6IDQwcHg7IFxcbiAgY29sb3I6ICNGRkY7XFxufVxcblxcbi5zaGlwLWhpdDpob3ZlciB7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzNTRkYTtcXG59XFxuXFxuXFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuLi9hc3NldHMvaW1hZ2VzL2JhY2tncm91bmQuanBnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm92ZXJsYXkge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwdnc7XFxuICBoZWlnaHQ6IDEwMHZoO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xcbn1cXG5cXG4ud2lubmVyLW92ZXJsYXkge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICByb3ctZ2FwOiAzMHB4O1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIGJhY2tncm91bmQ6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxuICB3aWR0aDogNjAwcHg7XFxuICBoZWlnaHQ6IDMwMHB4O1xcbiAgYm94LXNoYWRvdzogMnB4IDBweCAxMHB4ICMyNDI0MjQ7XFxufVxcblxcbi53aW5uZXItb3ZlcmxheSBoMSB7XFxuICBmb250LXNpemU6IDYwcHhcXG59XFxuXFxuLndpbm5lci1vdmVybGF5IHAge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzODlkYTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIHBhZGRpbmc6IDEwcHggMjVweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLndpbm5lci1vdmVybGF5IHA6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYyMDBmZjtcXG59XFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy93aW5uZXItb3ZlcmxheS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxlQUFlO0VBQ2YsYUFBYTtFQUNiLE1BQU07RUFDTixPQUFPO0VBQ1AsWUFBWTtFQUNaLGFBQWE7RUFDYixvQ0FBb0M7QUFDdEM7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsYUFBYTtFQUNiLHNCQUFzQjtFQUN0Qix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGFBQWE7RUFDYixRQUFRO0VBQ1IsU0FBUztFQUNULGdDQUFnQztFQUNoQyxtREFBZ0Q7RUFDaEQsWUFBWTtFQUNaLGFBQWE7RUFDYixnQ0FBZ0M7QUFDbEM7O0FBRUE7RUFDRTtBQUNGOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLGtCQUFrQjtFQUNsQixlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm92ZXJsYXkge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwdnc7XFxuICBoZWlnaHQ6IDEwMHZoO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xcbn1cXG5cXG4ud2lubmVyLW92ZXJsYXkge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICByb3ctZ2FwOiAzMHB4O1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIGJhY2tncm91bmQ6IHVybCguLi9hc3NldHMvaW1hZ2VzL2JhY2tncm91bmQuanBnKTtcXG4gIHdpZHRoOiA2MDBweDtcXG4gIGhlaWdodDogMzAwcHg7XFxuICBib3gtc2hhZG93OiAycHggMHB4IDEwcHggIzI0MjQyNDtcXG59XFxuXFxuLndpbm5lci1vdmVybGF5IGgxIHtcXG4gIGZvbnQtc2l6ZTogNjBweFxcbn1cXG5cXG4ud2lubmVyLW92ZXJsYXkgcCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjM4OWRhO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgcGFkZGluZzogMTBweCAyNXB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ud2lubmVyLW92ZXJsYXkgcDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjIwMGZmO1xcbn1cXG5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpO1xuXG4gIC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9XG5cbiAgLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0R2FtZShwbGF5ZXIsIEFJKSB7XG5cbiAgLy8gc2VsZWN0IHRoZSBjb250YWluZXJzIG9mIGVhY2ggYm9hcmRcbiAgY29uc3QgcGxheWVyQm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxheWVyLWJvYXJkJylcbiAgY29uc3QgQUlCb2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdBSS1ib2FyZCcpXG5cblxuICAvLyBoaWRlIHBsYWNlIHlvdXIgc2hpcHMgdGl0bGUsIHJldmVhbCBBSSBib2FyZFxuICBjb25zdCBwbGFjZVNoaXBzVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGxheWVyID4gaDEnKVxuICBjb25zdCBBSVNpZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjQUktcGxheWVyJylcbiAgcGxhY2VTaGlwc1RpdGxlLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG4gIEFJU2lkZS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuXG4gIC8vIHJlc2V0IHRoZSBwbGF5ZXIgYm9hcmRcbiAgcGxheWVyQm9hcmQuaW5uZXJIVE1MID0gXCJcIlxuXG4gIC8vIHJlbmRlciB0aGUgcGxheWVyIGJvYXJkXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBwbGF5ZXIuYm9hcmQubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGJveC5pZCA9IGBwJHtpfWBcbiAgICBib3guY2xhc3NMaXN0LmFkZCgnYm94JylcbiAgICAvLyBzaG93cyBzaGlwcyBvbiB0aGUgYm9hcmRcbiAgICBpZihwbGF5ZXIuYm9hcmRbaV0uc2hpcCkgYm94LmNsYXNzTGlzdC5hZGQoJ2NvbnRhaW4tc2hpcCcpXG4gICAgcGxheWVyQm9hcmQuYXBwZW5kKGJveClcbiAgfVxuXG4gIC8vIHJlbmRlciB0aGUgQUkgYm9hcmRcbiAgZm9yKGxldCBpID0gMDsgaSA8IEFJLmJvYXJkLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBib3guaWQgPSBBSS5ib2FyZFtpXS5jb29yZGluYXRlcyAvLyBzZXQgdGhlIGlkIG9mIHRoZSBib3ggdG8gaXQncyBjb29yZGluYXRlc1xuICAgIGJveC5jbGFzc0xpc3QuYWRkKCdBSS1ib3gnLCAnYm94JylcblxuICAgIC8vIHdoZW4gYm94IGlzIGNsaWNrZWRcbiAgICBib3guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAvLyBkbyBub3RoaW5nIGlmIGl0J3MgYWxyZWFkeSBhdHRhY2tlZFxuICAgICAgaWYoQUkuYm9hcmRbaV0uYXR0YWNrZWQpIHJldHVyblxuICAgICAgLy8gaWYgbm90LCBzaG9vdCBBSSBhdCBsb2NhdGlvblxuICAgICAgcGxheWVyLnNob290KEFJLCBBSS5ib2FyZFtpXS5jb29yZGluYXRlcylcbiAgICAgIC8vIGlmIHNoaXAgZ290IGhpdFxuICAgICAgaWYoQUkuYm9hcmRbaV0uc2hpcCkge1xuICAgICAgICBib3guY2xhc3NMaXN0LmFkZCgnc2hpcC1oaXQnKVxuICAgICAgICAvLyBpZiBzaGlwIHN1bmtcbiAgICAgICAgaWYoQUkuYm9hcmRbaV0uc2hpcC5pc1N1bmspIHtcbiAgICAgICAgICBBSUJvYXJkLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZWQnXG4gICAgICAgICAgQUlTdGF0ZS5zdHlsZS5jb2xvciA9ICdyZWQnXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBBSUJvYXJkLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMjM4OWRhJ1xuICAgICAgICAgICAgQUlTdGF0ZS5zdHlsZS5jb2xvciA9ICcjZmZmJ1xuICAgICAgICAgIH0sIDUwKVxuICAgICAgICAgIC8vIG1hcmsgYWRqYWNlbnQgYXMgYXR0YWNrZWRcbiAgICAgICAgICBjb25zdCBzaGlwQ29vcmRzID0gQUkuYm9hcmRbaV0uc2hpcC5zaGlwQ29vcmRpbmF0ZXNcbiAgICAgICAgICBzaGlwQ29vcmRzLmZvckVhY2goY29vcmRzID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFkamFjZW50Qm94ZXMgPSBBSS5nYW1lQm9hcmQuZ2V0QWRqYWNlbnRCb3hlcyhjb29yZHMpXG4gICAgICAgICAgICBhZGphY2VudEJveGVzLmZvckVhY2goYWRqYWNlbnQgPT4ge1xuICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhZGphY2VudC5jb29yZGluYXRlcykuY2xhc3NMaXN0LmFkZCgnYXR0YWNrZWQnKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICAgIC8vIGNoZWNrIGlmIGdhbWUgaXMgb3ZlclxuICAgICAgICAgIGlzR2FtZU92ZXIoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGJveC5jbGFzc0xpc3QuYWRkKCdhdHRhY2tlZCcpXG5cbiAgICAgIC8vIHRoZW4gQUkgc2hvb3RzIGJhY2sgYXQgcmFuZG9tIGxvY2F0aW9uXG4gICAgICBjb25zdCBBSUhpdCA9IHBsYXllci5ib2FyZC5pbmRleE9mKEFJLnNob290KHBsYXllcikpXG4gICAgICBjb25zdCB0YXJnZXRCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjcGxheWVyLWJvYXJkID4gI3Ake0FJSGl0fWApXG4gICAgICAvLyBpZiBzaGlwIGdvdCBoaXRcbiAgICAgIGlmKHBsYXllci5ib2FyZFtBSUhpdF0uc2hpcCkge1xuICAgICAgICB0YXJnZXRCb3guY2xhc3NMaXN0LmFkZCgnc2hpcC1oaXQnKSBcbiAgICAgICAgLy8gaWYgc2hpcCBzdW5rXG4gICAgICAgIGlmKHBsYXllci5ib2FyZFtBSUhpdF0uc2hpcC5pc1N1bmspIHtcbiAgICAgICAgICBwbGF5ZXJCb2FyZC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmVkJ1xuICAgICAgICAgIHBsYXllclN0YXRlLnN0eWxlLmNvbG9yID0gJ3JlZCdcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHBsYXllckJvYXJkLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMjM4OWRhJ1xuICAgICAgICAgICAgcGxheWVyU3RhdGUuc3R5bGUuY29sb3IgPSAnI2ZmZidcbiAgICAgICAgICB9LCA1MClcbiAgICAgICAgICAvLyBtYXJrIGFkamFjZW50IGFzIGF0dGFja2VkXG4gICAgICAgICAgY29uc3Qgc2hpcENvb3JkcyA9IHBsYXllci5ib2FyZFtBSUhpdF0uc2hpcC5zaGlwQ29vcmRpbmF0ZXNcbiAgICAgICAgICBzaGlwQ29vcmRzLmZvckVhY2goY29vcmRzID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFkamFjZW50Qm94ZXMgPSBwbGF5ZXIuZ2FtZUJvYXJkLmdldEFkamFjZW50Qm94ZXMoY29vcmRzKVxuICAgICAgICAgICAgYWRqYWNlbnRCb3hlcy5mb3JFYWNoKGFkamFjZW50ID0+IHtcbiAgICAgICAgICAgICAgLy8gZmluZCB0aGUgY29ycmVjdCBib3ggaW4gdGhlIGFycmF5IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGNvb3JkXG4gICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRCb3ggPSBwbGF5ZXIuYm9hcmQuZmluZChpdGVtID0+IGl0ZW0uY29vcmRpbmF0ZXMuZXZlcnkoKGNvb3JkLCBpbmRleCkgPT4gY29vcmQgPT09IGFkamFjZW50LmNvb3JkaW5hdGVzW2luZGV4XSkpXG4gICAgICAgICAgICAgIC8vIGdldCB0aGUgaW5kZXggb2YgdGhpcyBib3hcbiAgICAgICAgICAgICAgY29uc3QgY3VycmVudEJveEluZGV4ID0gcGxheWVyLmJvYXJkLmluZGV4T2YoY3VycmVudEJveClcbiAgICAgICAgICAgICAgLy8gdXNlIHNlbGVjdG9yIHRvIHNlbGVjdCB0aGUgYm94IHdpdGggdGhlIGluZGV4IGFzIGl0J3MgaWRcbiAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHAke2N1cnJlbnRCb3hJbmRleH1gKS5jbGFzc0xpc3QuYWRkKCdhdHRhY2tlZCcpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLy8gY2hlY2sgaWYgZ2FtZSBpcyBvdmVyXG4gICAgICAgICAgaXNHYW1lT3ZlcigpXG4gICAgICAgIH1cbiAgICAgIH0gXG4gICAgICBlbHNlIHRhcmdldEJveC5jbGFzc0xpc3QuYWRkKCdhdHRhY2tlZCcpXG4gICAgICB1cGRhdGVTaGlwc0RldGFpbHMoKVxuICAgIH0pXG4gICAgQUlCb2FyZC5hcHBlbmQoYm94KVxuICB9XG5cbiAgLy8gYWRkIHBsYXllciBkZXRhaWxzOlxuICBjb25zdCBwbGF5ZXJOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BsYXllci1kZXRhaWxzIGgxJylcbiAgY29uc3QgQUlOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI0FJLWRldGFpbHMgaDEnKVxuICBjb25zdCBwbGF5ZXJTdGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwbGF5ZXItZGV0YWlscyBwJylcbiAgY29uc3QgQUlTdGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNBSS1kZXRhaWxzIHAnKVxuICBwbGF5ZXJOYW1lLnRleHRDb250ZW50ID0gcGxheWVyLm5hbWVcbiAgQUlOYW1lLnRleHRDb250ZW50ID0gQUkubmFtZVxuICB1cGRhdGVTaGlwc0RldGFpbHMoKVxuXG5cbiAgZnVuY3Rpb24gdXBkYXRlU2hpcHNEZXRhaWxzKCkge1xuICAgIHBsYXllclN0YXRlLnRleHRDb250ZW50ID0gYFNoaXBzIGFsaXZlOiAke3BsYXllci5nYW1lQm9hcmQuc2hpcHMubGVuZ3RoIC0gcGxheWVyLmdhbWVCb2FyZC5zdW5rU2hpcHMubGVuZ3RofWBcbiAgICBBSVN0YXRlLnRleHRDb250ZW50ID0gYFNoaXBzIGFsaXZlOiAke0FJLmdhbWVCb2FyZC5zaGlwcy5sZW5ndGggLSBBSS5nYW1lQm9hcmQuc3Vua1NoaXBzLmxlbmd0aH1gXG4gIH1cblxuICBmdW5jdGlvbiBpc0dhbWVPdmVyKCkge1xuICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcub3ZlcmxheScpXG4gICAgY29uc3Qgd2lubmVyT3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53aW5uZXItb3ZlcmxheScpXG4gICAgY29uc3Qgd2lubmVyTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53aW5uZXItb3ZlcmxheSA+IGgxJylcblxuICAgIC8vIGlmIHBsYXllciBoYXMgbm8gbW9yZSBzaGlwcyBhbGl2ZVxuICAgIGlmKHBsYXllci5nYW1lQm9hcmQuc2hpcHMubGVuZ3RoID09PSBwbGF5ZXIuZ2FtZUJvYXJkLnN1bmtTaGlwcy5sZW5ndGgpIHtcbiAgICAgIC8vIGNvbXB1dGVyIHdpbnNcbiAgICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgIHdpbm5lck5hbWUudGV4dENvbnRlbnQgPSAnQ29tcHV0ZXIgd29uISdcbiAgICAgIHdpbm5lck92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdmbGV4J1xuICAgIH1cbiAgICAvLyBpZiBjb21wdXRlciBoYXMgbm8gbW9yZSBzaGlwcyBhbGl2ZVxuICAgIGVsc2UgaWYoQUkuZ2FtZUJvYXJkLnNoaXBzLmxlbmd0aCA9PT0gQUkuZ2FtZUJvYXJkLnN1bmtTaGlwcy5sZW5ndGgpIHtcbiAgICAgIC8vIHBsYXllciB3aW5zXG4gICAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG4gICAgICB3aW5uZXJOYW1lLnRleHRDb250ZW50ID0gJ1BsYXllciB3b24hJ1xuICAgICAgd2lubmVyT3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnXG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2hpcChsZW4sIGlkID0gbnVsbCkge1xuICBjb25zdCBsZW5ndGggPSBsZW5cbiAgY29uc3Qgc2hpcENvb3JkaW5hdGVzID0gW11cbiAgbGV0IGhpdHMgPSAwXG4gIGxldCBpc1N1bmsgPSBmYWxzZVxuICByZXR1cm4ge1xuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoXG4gICAgfSxcblxuICAgIGdldCBzaGlwQ29vcmRpbmF0ZXMoKSB7XG4gICAgICByZXR1cm4gc2hpcENvb3JkaW5hdGVzXG4gICAgfSxcbiAgICBcbiAgICBnZXQgaWQoKSB7XG4gICAgICByZXR1cm4gaWRcbiAgICB9LFxuXG4gICAgZ2V0IGhpdHMoKSB7XG4gICAgICByZXR1cm4gaGl0c1xuICAgIH0sXG5cbiAgICBnZXQgaXNTdW5rKCkge1xuICAgICAgcmV0dXJuIGlzU3Vua1xuICAgIH0sXG5cbiAgICBhZGRDb29yZGluYXRlcyhjb29yZCkge1xuICAgICAgc2hpcENvb3JkaW5hdGVzLnB1c2goY29vcmQpXG4gICAgfSxcblxuICAgIGhpdCgpIHtcbiAgICAgIGhpdHMrK1xuICAgICAgaWYoaGl0cyA9PT0gbGVuZ3RoKSBpc1N1bmsgPSB0cnVlXG4gICAgfVxuICB9XG59IiwiaW1wb3J0IFNoaXAgZnJvbSBcIi4vU2hpcFwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdhbWVCb2FyZCgpIHtcbiAgbGV0IGJvYXJkID0gW11cbiAgbGV0IHNoaXBzID0gW11cbiAgbGV0IHN1bmtTaGlwcyA9IFtdXG4gIGxldCB0b3RhbEhpdHMgPSAwXG4gIGxldCBncmlkU2l6ZSA9IDEwMFxuICAvLyBpbml0aWFsaXplIGNvb3JkaW5hdGVzIGF0IDEsMVxuICBsZXQgeCA9IDFcbiAgbGV0IHkgPSAxXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBncmlkU2l6ZTsgaSsrKSB7XG4gICAgLy8gbWFrZSBlYWNoIGJveCBhbiBvYmplY3QgY29udGFpbmluZyBkYXRhXG4gICAgbGV0IGJveCA9IHtcbiAgICAgIFwiY29vcmRpbmF0ZXNcIjogW3gseV0sXG4gICAgICBcInNoaXBcIjogbnVsbCxcbiAgICAgIFwiYXR0YWNrZWRcIjogZmFsc2UsXG4gICAgICBcImF2YWlsYWJsZVwiOiB0cnVlXG4gICAgfVxuICAgIC8vIGFkZCBvYmplY3QgdG8gZ2FtZUJvYXJkIGFycmF5XG4gICAgYm9hcmQucHVzaChib3gpXG4gICAgXG4gICAgLy8gaW5jcmVtZW50IHggYW5kIHkgY29vcmRpbmF0ZXNcbiAgICB4KytcbiAgICBpZih4ID4gMTApIHtcbiAgICAgIHggPSAxXG4gICAgICB5KytcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0IGJvYXJkKCkge1xuICAgICAgcmV0dXJuIGJvYXJkXG4gICAgfSxcblxuICAgIGdldCBzdW5rU2hpcHMoKSB7XG4gICAgICByZXR1cm4gc3Vua1NoaXBzXG4gICAgfSxcblxuICAgIGdldCB0b3RhbEhpdHMoKSB7XG4gICAgICByZXR1cm4gdG90YWxIaXRzXG4gICAgfSxcblxuICAgIGdldCBzaGlwcygpIHtcbiAgICAgIHJldHVybiBzaGlwc1xuICAgIH0sXG5cbiAgICBwbGFjZVNoaXAoY29vcmRzLCBkaXJlY3Rpb24sIGxlbiwgaWQgPSBudWxsKSB7XG4gICAgICAvLyBjaGVjayBpZiBzaGlwIHN0YXlzIHdpdGhpbiBib3VuZGFyaWVzXG4gICAgICBpZihkaXJlY3Rpb24gPT09ICdyaWdodCcgJiYgY29vcmRzWzBdICsgbGVuID4gMTEpIHJldHVybiAnc2hpcCBleGNlZWRpbmcgYm91bmRhcmllcydcbiAgICAgIGlmKGRpcmVjdGlvbiA9PT0gJ2Rvd24nICYmIGNvb3Jkc1sxXSArIGxlbiA+IDExKSByZXR1cm4gJ3NoaXAgZXhjZWVkaW5nIGJvdW5kYXJpZXMnXG5cbiAgICAgIGxldCBjb29yZHNDb3B5ID0gWy4uLmNvb3Jkc11cblxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmKGkgIT09IDApIHtcbiAgICAgICAgICBpZihkaXJlY3Rpb24gPT09ICdyaWdodCcpIGNvb3Jkc0NvcHlbMF0rK1xuICAgICAgICAgIGVsc2UgY29vcmRzQ29weVsxXSArK1xuICAgICAgICB9XG4gICAgICAgIGxldCBjaG9zZW5Mb2NhdGlvbiA9IGJvYXJkLmZpbmQoYm94ID0+IGJveC5jb29yZGluYXRlcy5ldmVyeSgoY29vcmQsIGluZGV4KSA9PiBjb29yZCA9PT0gY29vcmRzQ29weVtpbmRleF0pKVxuICAgICAgICBpZighY2hvc2VuTG9jYXRpb24pIHJldHVybiAnTm8gc3VjaCBjb29yZGluYXRlcydcbiAgICAgICAgaWYoIWNob3NlbkxvY2F0aW9uLmF2YWlsYWJsZSkgcmV0dXJuICdTb21lIG9mIHRoZSBzcGFjZSBpcyB1bmF2YWlsYWJsZSdcbiAgICAgIH1cblxuICAgICAgLy8gY3JlYXRlcyB0aGUgc2hpcFxuICAgICAgY29uc3QgYmF0dGxlc2hpcCA9IG5ldyBTaGlwKGxlbiwgaWQpXG4gICAgICBzaGlwcy5wdXNoKGJhdHRsZXNoaXApXG5cbiAgICAgIC8vIGFkZCB0aGUgc2hpcCBjb29yZGluYXRlcyB0byB0aGUgc2hpcCBvYmplY3RcbiAgICAgIGxldCBjb29yZGluYXRlc0NvcHkgPSBbLi4uY29vcmRzXVxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGxldCBjdXJyZW50Q29vcmRzID0gWy4uLmNvb3JkaW5hdGVzQ29weV1cblxuICAgICAgICBpZihkaXJlY3Rpb24gPT09ICdyaWdodCcpIGNvb3JkaW5hdGVzQ29weVswXSsrXG4gICAgICAgIGVsc2UgY29vcmRpbmF0ZXNDb3B5WzFdKytcblxuICAgICAgICBiYXR0bGVzaGlwLmFkZENvb3JkaW5hdGVzKGN1cnJlbnRDb29yZHMpXG4gICAgICB9XG5cbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAvLyBza2lwcyBzdGF0ZW1lbnQgb24gZmlyc3Qgcm91bmQgdG8gYWRkIHRoZSBjaG9zZW4gY29vcmRpbmF0ZXNcbiAgICAgICAgaWYoaSAhPT0gMCkge1xuICAgICAgICAgIC8vIGNvbnRpbnVlIG1vdmluZyBpbiB0aGUgY2hvc2VuIGRpcmVjdGlvblxuICAgICAgICAgIGlmKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JykgY29vcmRzWzBdKytcbiAgICAgICAgICBlbHNlIGNvb3Jkc1sxXSsrXG4gICAgICAgIH1cblxuICAgICAgICAvLyBtYWtlIGFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIG9mIHRoZSBhZGphY2VudCBsb2NhdGlvbnNcbiAgICAgICAgbGV0IFthLCBiXSA9IGNvb3JkcztcbiAgICAgICAgbGV0IGFkamFjZW50TG9jYXRpb25zID0gW1xuICAgICAgICAgIFthIC0gMSwgYl0sXG4gICAgICAgICAgW2EgKyAxLCBiXSxcbiAgICAgICAgICBbYSAtIDEsIGIgKyAxXSxcbiAgICAgICAgICBbYSAtIDEsIGIgLSAxXSxcbiAgICAgICAgICBbYSArIDEsIGIgKyAxXSxcbiAgICAgICAgICBbYSArIDEsIGIgLSAxXSxcbiAgICAgICAgICBbYSwgYiArIDFdLFxuICAgICAgICAgIFthLCBiIC0gMV1cbiAgICAgICAgXTtcblxuICAgICAgICBsZXQgY2hvc2VuTG9jYXRpb24gPSBib2FyZC5maW5kKGJveCA9PiBib3guY29vcmRpbmF0ZXMuZXZlcnkoKGNvb3JkLCBpbmRleCkgPT4gY29vcmQgPT09IGNvb3Jkc1tpbmRleF0pKVxuICAgICAgICBjaG9zZW5Mb2NhdGlvbi5zaGlwID0gYmF0dGxlc2hpcFxuICAgICAgICBjaG9zZW5Mb2NhdGlvbi5zaGlwLmNvb3JkaW5hdGVzID0gY2hvc2VuTG9jYXRpb24uY29vcmRpbmF0ZXNcblxuICAgICAgICAvLyBzZXQgc2hpcCBib3hlcyBhbmQgYWRqYWNlbnQgYm94ZXMgdW5hdmFpbGFibGVcbiAgICAgICAgY2hvc2VuTG9jYXRpb24uYXZhaWxhYmxlID0gZmFsc2VcbiAgICAgICAgYWRqYWNlbnRMb2NhdGlvbnMuZm9yRWFjaChsb2NhdGlvbiA9PiB7XG4gICAgICAgICAgbGV0IGN1cnJlbnQgPSBib2FyZC5maW5kKGJveCA9PiBib3guY29vcmRpbmF0ZXMuZXZlcnkoKGNvb3JkLCBpbmRleCkgPT4gY29vcmQgPT09IGxvY2F0aW9uW2luZGV4XSkpXG4gICAgICAgICAgaWYoY3VycmVudCkgY3VycmVudC5hdmFpbGFibGUgPSBmYWxzZVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG5cbiAgICByZWNlaXZlQXR0YWNrKGNvb3Jkcykge1xuICAgICAgY29uc3QgY2hvc2VuTG9jYXRpb24gPSBib2FyZC5maW5kKGJveCA9PiBib3guY29vcmRpbmF0ZXMuZXZlcnkoKGNvb3JkLCBpbmRleCkgPT4gY29vcmQgPT09IGNvb3Jkc1tpbmRleF0pKVxuICAgICAgLy8gaWYgdGhlIGxvY2F0aW9uIGlzIG91dCBvZiBib3VuZGFyaWVzIG9yIHdhcyBhbHJlYWR5IGF0dGFja2VkXG4gICAgICBpZihjaG9zZW5Mb2NhdGlvbiA9PT0gdW5kZWZpbmVkIHx8IGNob3NlbkxvY2F0aW9uLmF0dGFja2VkKSByZXR1cm5cbiAgICBcbiAgICAgIC8vIG1hcmsgbG9jYXRpb24gYXMgYXR0YWNrZWRcbiAgICAgIGNob3NlbkxvY2F0aW9uLmF0dGFja2VkID0gdHJ1ZVxuICAgICAgdG90YWxIaXRzKytcbiAgICAgIC8vIGhpdCBzaGlwIGlmIHByZXNlbnRcbiAgICAgIGlmKGNob3NlbkxvY2F0aW9uLnNoaXApIHtcbiAgICAgICAgY2hvc2VuTG9jYXRpb24uc2hpcC5oaXQoKVxuICAgICAgICAvLyBpZiBzaGlwIHN1bmssIGFkZCB0byBzdW5rU2hpcHNcbiAgICAgICAgaWYoY2hvc2VuTG9jYXRpb24uc2hpcC5pc1N1bmspIHtcbiAgICAgICAgICBzdW5rU2hpcHMucHVzaChjaG9zZW5Mb2NhdGlvbi5zaGlwKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIHJldHVybiB0aGUgYWRqYWNlbnQgbG9jYXRpb25zXG4gICAgZ2V0QWRqYWNlbnRCb3hlcyhjb29yZHMpIHtcbiAgICAgIGNvbnN0IFthLCBiXSA9IGNvb3JkcztcbiAgICAgIGNvbnN0IGFkamFjZW50TG9jYXRpb25zID0gW1xuICAgICAgICBbYSAtIDEsIGJdLFxuICAgICAgICBbYSArIDEsIGJdLFxuICAgICAgICBbYSAtIDEsIGIgKyAxXSxcbiAgICAgICAgW2EgLSAxLCBiIC0gMV0sXG4gICAgICAgIFthICsgMSwgYiArIDFdLFxuICAgICAgICBbYSArIDEsIGIgLSAxXSxcbiAgICAgICAgW2EsIGIgKyAxXSxcbiAgICAgICAgW2EsIGIgLSAxXVxuICAgICAgXTtcbiAgICAgIGNvbnN0IGFkamFjZW50Qm94ZXMgPSBhZGphY2VudExvY2F0aW9ucy5tYXAobG9jYXRpb24gPT4ge1xuICAgICAgICBjb25zdCBhZGphY2VudEJveCA9IHRoaXMuYm9hcmQuZmluZChib3ggPT4gYm94LmNvb3JkaW5hdGVzLmV2ZXJ5KChjb29yZCwgaW5kZXgpID0+IGNvb3JkID09PSBsb2NhdGlvbltpbmRleF0pKTtcbiAgICAgICAgcmV0dXJuIGFkamFjZW50Qm94O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWRqYWNlbnRCb3hlcy5maWx0ZXIoYm94ID0+IGJveCAhPT0gdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIFxuICAgIGhhc0FybWVkU2hpcHMoKSB7XG4gICAgICBsZXQgYXJtZWRTaGlwcyA9IGZhbHNlXG4gICAgICBzaGlwcy5mb3JFYWNoKHNoaXAgPT4ge1xuICAgICAgICBpZighc2hpcC5pc1N1bmspIGFybWVkU2hpcHMgPSB0cnVlXG4gICAgICB9KVxuICAgICAgcmV0dXJuIGFybWVkU2hpcHNcbiAgICB9XG4gIH1cbn0iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi93aW5uZXItb3ZlcmxheS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3dpbm5lci1vdmVybGF5LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9wcmVwYXJlLWdhbWUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9wcmVwYXJlLWdhbWUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHN0YXJ0R2FtZSBmcm9tIFwiLi9zdGFydEdhbWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJlcGFyZUdhbWUocGxheWVyLCBBSSkge1xuXG4gIGNvbnN0IHBsYXllckJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllci1ib2FyZCcpXG4gIGNvbnN0IHNoaXBMZW5zID0gWzUsIDUsIDMsIDIsIDIsIDIsIDFdXG4gIGxldCBkaXJlY3Rpb24gPSAncmlnaHQnXG4gIGxldCBjdXJyZW50U2hpcCA9IDBcblxuICAvLyBoYW5kbGUgY2hhbmdpbmcgZGlyZWN0aW9uXG4gIGNvbnN0IGRpcmVjdGlvblRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGlyZWN0aW9uLXRleHQnKVxuICBjb25zdCByb3RhdGVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucm90YXRlJylcbiAgcm90YXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcpIGRpcmVjdGlvbiA9ICdkb3duJ1xuICAgIGVsc2UgaWYoZGlyZWN0aW9uID09PSAnZG93bicpIGRpcmVjdGlvbiA9ICdyaWdodCdcbiAgICBkaXJlY3Rpb25UZXh0LnRleHRDb250ZW50ID0gZGlyZWN0aW9uXG4gIH0pXG5cbiAgZm9yKGxldCBpID0gMDsgaSA8IHBsYXllci5ib2FyZC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgYm94LmlkID0gcGxheWVyLmJvYXJkW2ldLmNvb3JkaW5hdGVzXG4gICAgYm94LmNsYXNzTGlzdC5hZGQoJ2JveCcsICdwcmUtZ2FtZScpXG4gICAgLy8gc2hvdyBzaGlwIGxvY2F0aW9uIG9uIGhvdmVyXG4gICAgYm94LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsICgpID0+IHtcbiAgICAgIGFsbEJveGVzLmZvckVhY2goc3F1YXJlID0+IHtcbiAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpXG4gICAgICAgIC8vIGdldCB0aGUgeCBhbmQgdGhlIHkgb2YgaG92ZXJlZCBib3ggYW5kIG90aGVyIHNxdWFyZXNcbiAgICAgICAgY29uc3QgaG92ZXJlZENvb3JkcyA9IGJveC5pZC5zcGxpdCgnLCcpXG4gICAgICAgIGNvbnN0IGJveFggPSAraG92ZXJlZENvb3Jkc1swXVxuICAgICAgICBjb25zdCBib3hZID0gK2hvdmVyZWRDb29yZHNbMV1cbiAgICAgICAgY29uc3Qgc3F1YXJlQ29vcmQgPSBzcXVhcmUuaWQuc3BsaXQoJywnKVxuICAgICAgICBjb25zdCBzcXVhcmVYID0gK3NxdWFyZUNvb3JkWzBdXG4gICAgICAgIGNvbnN0IHNxdWFyZVkgPSArc3F1YXJlQ29vcmRbMV1cblxuICAgICAgICAvLyBoaWdobGlnaHQgdGhlIHNoaXAgc2l6ZSBpbiB0aGUgY29ycmVjdCBkaXJlY3Rpb25cbiAgICAgICAgaWYoZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgaWYoYm94WCA8PSBzcXVhcmVYICYmIHNxdWFyZVggPCBib3hYICsgc2hpcExlbnNbY3VycmVudFNoaXBdICYmIHNxdWFyZVkgPT09IGJveFkpIHtcbiAgICAgICAgICAgIC8vIGlmIHNoaXAgZXhjZWVkaW5nIHRoZSBib2FyZCByZXR1cm5cbiAgICAgICAgICAgIGlmKGJveFggKyBzaGlwTGVuc1tjdXJyZW50U2hpcF0gPiAxMSkgcmV0dXJuXG4gICAgICAgICAgICAvLyBlbHNlIGNvbG9yIHRoZSBzcXVhcmVzIHRoZSBzaGlwIHdpbGwgdGFrZVxuICAgICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodCcpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYoZGlyZWN0aW9uID09PSAnZG93bicpIHtcbiAgICAgICAgICBpZihib3hZIDw9IHNxdWFyZVkgJiYgc3F1YXJlWSA8IGJveFkgKyBzaGlwTGVuc1tjdXJyZW50U2hpcF0gJiYgc3F1YXJlWCA9PT0gYm94WCkge1xuICAgICAgICAgICAgLy8gaWYgc2hpcCBleGNlZWRpbmcgdGhlIGJvYXJkIHJldHVyblxuICAgICAgICAgICAgaWYoYm94WSArIHNoaXBMZW5zW2N1cnJlbnRTaGlwXSA+IDExKSByZXR1cm5cbiAgICAgICAgICAgIC8vIGVsc2UgY29sb3IgdGhlIHNxdWFyZXMgdGhlIHNoaXAgd2lsbCB0YWtlXG4gICAgICAgICAgICBzcXVhcmUuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIC8vIHBsYWNlIHRoZSBzaGlwIG9uIGNsaWNrXG4gICAgYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgLy8gZ2V0IGFuIGFycmF5IG9mIHR3byBudW1iZXJzIGFzIGNvb3JkaW5hdGVzXG4gICAgICBjb25zdCBob3ZlcmVkQ29vcmRzU3RyaW5nID0gYm94LmlkLnNwbGl0KCcsJylcbiAgICAgIGNvbnN0IGhvdmVyZWRDb29yZHMgPSBbXVxuICAgICAgaG92ZXJlZENvb3Jkcy5wdXNoKCtob3ZlcmVkQ29vcmRzU3RyaW5nWzBdKVxuICAgICAgaG92ZXJlZENvb3Jkcy5wdXNoKCtob3ZlcmVkQ29vcmRzU3RyaW5nWzFdKVxuICAgICAgXG4gICAgICAvLyB0cnkgdG8gcGxhY2Ugc2hpcFxuICAgICAgY29uc29sZS5sb2cocGxheWVyLnBsYWNlU2hpcChob3ZlcmVkQ29vcmRzLCBkaXJlY3Rpb24sIHNoaXBMZW5zW2N1cnJlbnRTaGlwXSkpXG4gICAgICBjb25zb2xlLmxvZyhob3ZlcmVkQ29vcmRzKVxuICAgICAgY29uc29sZS5sb2coZGlyZWN0aW9uKVxuICAgICAgY29uc29sZS5sb2coc2hpcExlbnNbY3VycmVudFNoaXBdKVxuICAgICAgLy8gY2hlY2sgaWYgc2hpcCByZWFsbHkgcGxhY2VkXG4gICAgICBpZihwbGF5ZXIuZ2FtZUJvYXJkLnNoaXBzLmxlbmd0aCA+IGN1cnJlbnRTaGlwKSB7XG4gICAgICAgIGN1cnJlbnRTaGlwKytcbiAgICAgICAgLy8gaWYgaXQncyBwbGFjZWQsIGNoYW5nZWQgaGlnaGxpZ2h0ZWQgc3F1YXJlcyB0byBzaGlwIHNxdWFyZXNcbiAgICAgICAgY29uc3QgaGlnaGxpZ2h0ZWRTcXVhcmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmhpZ2hsaWdodCcpXG4gICAgICAgIGhpZ2hsaWdodGVkU3F1YXJlcy5mb3JFYWNoKHNxdWFyZSA9PiB7XG4gICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoJ2NvbnRhaW4tc2hpcCcpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBpZighc2hpcExlbnNbY3VycmVudFNoaXBdKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBBSSBzaGlwcyBhbmQgc3RhcnQgZ2FtZVxuICAgICAgICBBSS5wbGFjZVNoaXAoMSkgXG4gICAgICAgIEFJLnBsYWNlU2hpcCgyKSBcbiAgICAgICAgQUkucGxhY2VTaGlwKDIpIFxuICAgICAgICBBSS5wbGFjZVNoaXAoMikgXG4gICAgICAgIEFJLnBsYWNlU2hpcCgzKSBcbiAgICAgICAgQUkucGxhY2VTaGlwKDUpIFxuICAgICAgICBBSS5wbGFjZVNoaXAoNSkgXG4gICAgICAgIHN0YXJ0R2FtZShwbGF5ZXIsIEFJKVxuICAgICAgfVxuICAgIH0pXG4gICAgcGxheWVyQm9hcmQuYXBwZW5kKGJveClcbiAgfVxuICBjb25zdCBhbGxCb3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcmUtZ2FtZScpXG5cbiAgLy8gY3JlYXRlIHRoZSBzaGlwcyBtYW51YWxseSBmb3IgdGVzdGluZ1xuICAvLyBwbGF5ZXIucGxhY2VTaGlwKFsxLDFdLCAncmlnaHQnLCAxKVxuICAvLyBwbGF5ZXIucGxhY2VTaGlwKFsxLDNdLCAncmlnaHQnLCAyKVxuICAvLyBwbGF5ZXIucGxhY2VTaGlwKFsxLDVdLCAncmlnaHQnLCAzKVxuICAvLyBwbGF5ZXIucGxhY2VTaGlwKFsxLDddLCAncmlnaHQnLCA0KVxuICAvLyBwbGF5ZXIucGxhY2VTaGlwKFsxLDldLCAncmlnaHQnLCA1KVxuICAvLyBwbGF5ZXIucGxhY2VTaGlwKFsxMCwxMF0sICdkb3duJywgNilcbiAgLy8gQUkucGxhY2VTaGlwKDEpIFxuICAvLyBBSS5wbGFjZVNoaXAoMikgXG4gIC8vIEFJLnBsYWNlU2hpcCgyKSBcbiAgLy8gQUkucGxhY2VTaGlwKDIpIFxuICAvLyBBSS5wbGFjZVNoaXAoMykgXG4gIC8vIEFJLnBsYWNlU2hpcCg1KSBcbiAgLy8gQUkucGxhY2VTaGlwKDUpIFxuXG4gIC8vIGdhbWVMb29wKHBsYXllciwgQUkpXG59IiwiaW1wb3J0IHByZXBhcmVHYW1lIGZyb20gXCIuL01vZHVsZXMvcHJlcGFyZUdhbWVcIjtcbmltcG9ydCBBSXBsYXllciBmcm9tIFwiLi9jb25zdHJ1Y3RvcnMvQUlwbGF5ZXJcIjtcbmltcG9ydCBQbGF5ZXIgZnJvbSBcIi4vY29uc3RydWN0b3JzL1BsYXllclwiO1xuaW1wb3J0ICcuL3N0eWxlcy9zdHlsZXMuY3NzJ1xuaW1wb3J0ICcuL3N0eWxlcy93aW5uZXItb3ZlcmxheS5jc3MnXG5pbXBvcnQgJy4vc3R5bGVzL3ByZXBhcmUtZ2FtZS5jc3MnXG5cbi8vIGNyZWF0ZSB0aGUgcGxheWVyc1xuY29uc3QgcGxheWVyID0gUGxheWVyKCdwbGF5ZXInKVxuY29uc3QgQUkgPSBBSXBsYXllcigpXG5cbnByZXBhcmVHYW1lKHBsYXllciwgQUkpXG5cbmNvbnN0IHBsYXlBZ2FpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53aW5uZXItb3ZlcmxheSA+IHAnKVxuXG5wbGF5QWdhaW4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxufSlcbiIsImltcG9ydCBHYW1lQm9hcmQgZnJvbSBcIi4vR2FtZUJvYXJkXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGxheWVyKHBsYXllck5hbWUpIHtcbiAgY29uc3QgbmFtZSA9IHBsYXllck5hbWVcbiAgY29uc3QgZ2FtZUJvYXJkID0gbmV3IEdhbWVCb2FyZCgpXG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lLFxuICAgIGdhbWVCb2FyZCxcbiAgICBnZXQgYm9hcmQoKSB7XG4gICAgICByZXR1cm4gZ2FtZUJvYXJkLmJvYXJkXG4gICAgfSxcblxuICAgIHBsYWNlU2hpcChjb29yZCwgZGlyZWN0aW9uLCBsZW4pIHtcbiAgICAgIHJldHVybiBnYW1lQm9hcmQucGxhY2VTaGlwKGNvb3JkLCBkaXJlY3Rpb24sIGxlbilcbiAgICB9LFxuXG4gICAgc2hvb3QodGFyZ2V0LCBjb29yZCkge1xuICAgICAgdGFyZ2V0LmdhbWVCb2FyZC5yZWNlaXZlQXR0YWNrKGNvb3JkKVxuICAgIH1cbiAgfVxufSIsImltcG9ydCBHYW1lQm9hcmQgZnJvbSBcIi4vR2FtZUJvYXJkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFJcGxheWVyKCkge1xuICBjb25zdCBuYW1lID0gJ0FJJ1xuICBjb25zdCBnYW1lQm9hcmQgPSBuZXcgR2FtZUJvYXJkKClcbiAgbGV0IGFsbFNoaXBzUGxhY2VkID0gdHJ1ZVxuXG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBnYW1lQm9hcmQsXG4gICAgZ2V0IGJvYXJkKCkge1xuICAgICAgcmV0dXJuIGdhbWVCb2FyZC5ib2FyZFxuICAgIH0sXG5cbiAgICBwbGFjZVNoaXAobGVuKSB7XG4gICAgICBjb25zdCBpZCA9IGNyeXB0by5yYW5kb21VVUlEKClcbiAgICAgIC8vIGxpbWl0IHRoZSBhbW91bnQgb2YgYXR0ZW1wdHNcbiAgICAgIGxldCBhdHRlbXB0cyA9IDBcbiAgICAgIHdoaWxlKGF0dGVtcHRzIDwgMTAwMCkge1xuICAgICAgICBhdHRlbXB0cysrXG4gICAgICAgIC8vIGRlY2xhcmUgZW1wdHkgY29vcmRzIGFycmF5XG4gICAgICAgIGxldCBjb29yZHMgPSBbXVxuXG4gICAgICAgIC8vIGdlbmVyYXRlIHJhbmRvbSBjb29yZGluYXRlc1xuICAgICAgICBjb25zdCB4ID0gTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMClcbiAgICAgICAgY29uc3QgeSA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTApXG5cbiAgICAgICAgLy8gcHVzaCB0aGVtIHRvIHRoZSBhcnJheVxuICAgICAgICBjb29yZHMucHVzaCh4KVxuICAgICAgICBjb29yZHMucHVzaCh5KVxuXG4gICAgICAgIC8vIHBpY2sgcmFuZG9tIGRpcmVjdGlvblxuICAgICAgICBjb25zdCBwb3NzaWJsZURpcmVjdGlvbnMgPSBbJ3JpZ2h0JywgJ2Rvd24nXVxuICAgICAgICBjb25zdCByYW5kb21EaXJlY3Rpb24gPSBwb3NzaWJsZURpcmVjdGlvbnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGVEaXJlY3Rpb25zLmxlbmd0aCldXG5cbiAgICAgICAgLy8gdHJ5IHRvIHBsYWNlIHNoaXBcbiAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcChjb29yZHMsIHJhbmRvbURpcmVjdGlvbiwgbGVuLCBpZClcblxuICAgICAgICAvLyBnZXQgdGhlIHNoaXAgbG9jYXRpb24gb24gdGhlIGJvYXJkXG4gICAgICAgIGxldCBsb2NhdGlvbiA9IGdhbWVCb2FyZC5ib2FyZC5maW5kKGJveCA9PiBib3guY29vcmRpbmF0ZXMuZXZlcnkoKGNvb3JkLCBpbmRleCkgPT4gY29vcmQgPT09IGNvb3Jkc1tpbmRleF0pKVxuXG4gICAgICAgIC8vIGNoZWNrIGlmIHNoaXAgaXMgcHJlc2VudCBhdCB0aGUgbG9jYXRpb25cbiAgICAgICAgaWYobG9jYXRpb24uc2hpcCAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gY2hlY2sgaWYgaXRzIHRoZSBzaGlwIHdlIGp1c3QgY3JlYXRlZFxuICAgICAgICAgIGlmKGxvY2F0aW9uLnNoaXAuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICBhbGxTaGlwc1BsYWNlZCA9IHRydWVcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzaG9vdCh0YXJnZXQpIHtcbiAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgLy8gZGVjbGFyZSBlbXB0eSBjb29yZHMgYXJyYXlcbiAgICAgICAgbGV0IGNvb3JkcyA9IFtdXG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgcmFuZG9tIGNvb3JkaW5hdGVzXG4gICAgICAgIGNvbnN0IHggPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwKVxuICAgICAgICBjb25zdCB5ID0gTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMClcblxuICAgICAgICAvLyBwdXNoIHRoZW0gdG8gdGhlIGFycmF5XG4gICAgICAgIGNvb3Jkcy5wdXNoKHgpXG4gICAgICAgIGNvb3Jkcy5wdXNoKHkpXG5cbiAgICAgICAgLy8gZmluZCB0aGUgY29ycmVjdCBsb2NhdGlvbiBvbiB0YXJnZXQgYm9hcmRcbiAgICAgICAgY29uc3QgdGFyZ2V0Qm9hcmQgPSB0YXJnZXQuZ2FtZUJvYXJkLmJvYXJkXG4gICAgICAgIGxldCBsb2NhdGlvbiA9IHRhcmdldEJvYXJkLmZpbmQoYm94ID0+IGJveC5jb29yZGluYXRlcy5ldmVyeSgoY29vcmQsIGluZGV4KSA9PiBjb29yZCA9PT0gY29vcmRzW2luZGV4XSkpXG5cbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGxvY2F0aW9uIHdhcyBhbHJlYWR5IGF0dGFja2VkXG4gICAgICAgIGlmKCFsb2NhdGlvbi5hdHRhY2tlZCkge1xuICAgICAgICAgIC8vIGlmIG5vdCBhdHRhY2tcbiAgICAgICAgICB0YXJnZXQuZ2FtZUJvYXJkLnJlY2VpdmVBdHRhY2sobG9jYXRpb24uY29vcmRpbmF0ZXMpXG4gICAgICAgICAgcmV0dXJuIGxvY2F0aW9uXG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgeWVzLCByZXBlYXRcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwibiIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIm5jIiwic3RhcnRHYW1lIiwicGxheWVyIiwiQUkiLCJwbGF5ZXJCb2FyZCIsImdldEVsZW1lbnRCeUlkIiwiQUlCb2FyZCIsInBsYWNlU2hpcHNUaXRsZSIsIkFJU2lkZSIsImNsYXNzTGlzdCIsImFkZCIsImlubmVySFRNTCIsImJvYXJkIiwiYm94Iiwic2hpcCIsImFwcGVuZCIsImNvb3JkaW5hdGVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFja2VkIiwic2hvb3QiLCJpc1N1bmsiLCJiYWNrZ3JvdW5kQ29sb3IiLCJBSVN0YXRlIiwiY29sb3IiLCJzZXRUaW1lb3V0Iiwic2hpcENvb3JkaW5hdGVzIiwiZm9yRWFjaCIsImNvb3JkcyIsImdhbWVCb2FyZCIsImdldEFkamFjZW50Qm94ZXMiLCJhZGphY2VudCIsImlzR2FtZU92ZXIiLCJBSUhpdCIsImluZGV4T2YiLCJ0YXJnZXRCb3giLCJwbGF5ZXJTdGF0ZSIsImN1cnJlbnRCb3giLCJmaW5kIiwiZXZlcnkiLCJjb29yZCIsImN1cnJlbnRCb3hJbmRleCIsInVwZGF0ZVNoaXBzRGV0YWlscyIsInBsYXllck5hbWUiLCJBSU5hbWUiLCJ0ZXh0Q29udGVudCIsInNoaXBzIiwic3Vua1NoaXBzIiwib3ZlcmxheSIsIndpbm5lck92ZXJsYXkiLCJ3aW5uZXJOYW1lIiwiZGlzcGxheSIsIm5hbWUiLCJTaGlwIiwibGVuIiwiYXJndW1lbnRzIiwiaGl0cyIsImFkZENvb3JkaW5hdGVzIiwiaGl0IiwiR2FtZUJvYXJkIiwidG90YWxIaXRzIiwieCIsInkiLCJwbGFjZVNoaXAiLCJkaXJlY3Rpb24iLCJjb29yZHNDb3B5IiwiY2hvc2VuTG9jYXRpb24iLCJhdmFpbGFibGUiLCJiYXR0bGVzaGlwIiwiY29vcmRpbmF0ZXNDb3B5IiwiY3VycmVudENvb3JkcyIsImFkamFjZW50TG9jYXRpb25zIiwiY3VycmVudCIsInJlY2VpdmVBdHRhY2siLCJmaWx0ZXIiLCJoYXNBcm1lZFNoaXBzIiwiYXJtZWRTaGlwcyIsInNoaXBMZW5zIiwiY3VycmVudFNoaXAiLCJkaXJlY3Rpb25UZXh0IiwiYWxsQm94ZXMiLCJzcXVhcmUiLCJob3ZlcmVkQ29vcmRzIiwic3BsaXQiLCJib3hYIiwiYm94WSIsInNxdWFyZUNvb3JkIiwic3F1YXJlWCIsInNxdWFyZVkiLCJob3ZlcmVkQ29vcmRzU3RyaW5nIiwiY29uc29sZSIsImxvZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwcmVwYXJlR2FtZSIsIlBsYXllciIsImFsbFNoaXBzUGxhY2VkIiwiY3J5cHRvIiwicmFuZG9tVVVJRCIsImF0dGVtcHRzIiwiTWF0aCIsImNlaWwiLCJyYW5kb20iLCJwb3NzaWJsZURpcmVjdGlvbnMiLCJyYW5kb21EaXJlY3Rpb24iLCJmbG9vciIsIkFJcGxheWVyIiwicmVsb2FkIl0sInNvdXJjZVJvb3QiOiIifQ==